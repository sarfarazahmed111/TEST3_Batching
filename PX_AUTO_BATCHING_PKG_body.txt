create or replace 
PACKAGE BODY PX_AUTO_BATCHING_PKG AS

 g_conc_request_id Number  := FND_GLOBAL.CONC_REQUEST_ID;     -- Added By Lingaraj (Replace FND_GLOBAL.CONC_REQUEST_ID with g_conc_request_id)

/*
   Called By - PX OM Autobatch Schedule Program



*/
PROCEDURE main (P_ERRBUFF OUT VARCHAR2 , P_RETCODE OUT NUMBER,P_SETUP_ID NUMBER,p_request_id number) AS
-- restrictions needs to be done.

	v_request_id NUMBER;
	v_status     BOOLEAN;
    lv_is_new_sol VARCHAR2(4000);  -- Added for new batch process

	CURSOR C_GET_SETUP(P_SETUP_ID NUMBER) IS
	SELECT * FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T WHERE HEADER_ID=P_SETUP_ID;

	CURSOR C_GET_SEQ_HDR(P_SEQ_NO NUMBER) IS
	select HEADER_ID from PAXAR.PAXAR_OE_AUTO_BATCH_SEQ_HDR_T where cf_seqno=P_SEQ_NO;

	CURSOR C_GET_GROUP_ID(P_SEQ_HEADER_ID NUMBER) IS
	select group_id,count(*) g_count from PAXAR.PAXAR_OE_AUTO_BATCH_SEQ_LINE_T
    WHERE HEADER_ID=P_SEQ_HEADER_ID group by group_id;

	CURSOR C_GET_SEQ_LINE(P_SEQ_HEADER_ID NUMBER,P_GROUP_ID NUMBER) IS
	select operator_logic,parameter_details,operator_details,VALUE_FROM,VALUE_TO
	from PAXAR.PAXAR_OE_AUTO_BATCH_SEQ_LINE_T
    WHERE HEADER_ID=P_SEQ_HEADER_ID
    AND nvl(GROUP_ID,1)=nvl(P_GROUP_ID,1)
    order by  TO_NUMBER(ATTRIBUTE1) /*operator_logic  desc*/;

  CURSOR C_RELEASE_BATCH(P_PRESSTYPE VARCHAR2,P_INV_ORG VARCHAR2) IS
  SELECT DISTINCT BATCH_NUMBER FROM PX_BATCH_DETAILS_TAB
  WHERE BATCH_STATUS='Batched' AND BATCHTYPE='Auto'
  AND PRESSTYPE=P_PRESSTYPE AND INVENTORYORG=P_INV_ORG
  ORDER BY BATCH_NUMBER; --- ADDED BY SARFARAZ // NS-PROD-65 // 23-01-2023

  CURSOR C_GET_PARAM_DET(P_PARAM_DESC VARCHAR2) IS
  SELECT meaning
  FROM FND_LOOKUP_VALUES
  WHERE lookup_type='PAXAR_ONT_AUTO_SEQUENCE'
  AND language     ='US'
  AND ENABLED_FLAG='Y'
  AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE) )
  AND TAG='SQL' AND DESCRIPTION=P_PARAM_DESC;

  CURSOR C_GET_OPERATOR_DET(P_OPERATOR_DESC VARCHAR2) IS
  SELECT meaning
  FROM FND_LOOKUP_VALUES
  WHERE lookup_type='PAXAR_ONT_AUTO_SEQUENCE'
  AND language     ='US'
  AND ENABLED_FLAG='Y'
  AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE) )
  AND TAG='SEQ' AND DESCRIPTION=P_OPERATOR_DESC;

	CURSOR C_GET_BATCH_COUNT(P_BATCH_NO VARCHAR2) IS
	select count(*) from px_batch_details_hstry_tab where batch_number=P_BATCH_NO;


  TYPE C_GET_DATA IS REF CURSOR;
  C_GET_DATA_V C_GET_DATA;

  TYPE px_auto_batch_sols is record
	(
		CUSTOMER_NUMBER         NUMBER ,
		CUSTOMER_NAME           VARCHAR2(1000),
		ORDER_NO                NUMBER         ,
		ORGANIZATION_ID         NUMBER         ,
		LINE_NO                 NUMBER         ,
		INTERNAL_ITEM           VARCHAR2(100)  ,
		INVENTORY_ITEM_ID       NUMBER         ,
		QUANTITY                NUMBER         ,
		UOM                     VARCHAR2(50)   ,
		JOBNO                   VARCHAR2(100)  ,
		ASSEMBLY                VARCHAR2(100)  ,
		JOB_TYPE                VARCHAR2(1000) ,
		JOB_QTY                 NUMBER         ,
		JOBUOM                  VARCHAR2(50)   ,
		JOBSTATUS               VARCHAR2(50)   ,
		TE                      VARCHAR2(100)  ,
		STOCKTYPE               VARCHAR2(100)  ,
		INVENTORYCODE           VARCHAR2(100)  ,
		SYSTEMID                VARCHAR2(100)  ,
		FORMATNAME              VARCHAR2(100)  ,
		REQUESTDATE             DATE           ,
		PROMISEDATE             DATE           ,
		SCHEDULESHIPDATE        DATE           ,
		PLANNERCODE             VARCHAR2(100)  ,
		INVENTORYORG            VARCHAR2(100)  ,
		PRODUCTIONMETHOD        VARCHAR2(100)  ,
		BATCH_STATUS            VARCHAR2(20)   ,
		BATCH_NUMBER            VARCHAR2(100)  ,
		BATCHTYPE               VARCHAR2(100)  ,
		BATCH_CREATED_DATE      DATE           ,
		CREATEDBY               VARCHAR2(1000) ,
		LAST_UPDATED_DATE       DATE           ,
		LAST_UPDATED_BY         VARCHAR2(1000) ,
		RELEASED_DATE           DATE           ,
		TYPESETTING_METHOD      VARCHAR2(1000) ,
		PRESSTYPE               VARCHAR2(1000) ,
		ORDER_HEADER_ID         NUMBER         ,
		ORDER_LINE_ID           NUMBER         ,
		BATCH_LOGIC             VARCHAR2(4000) ,
		SUBBATCH_LOGIC          VARCHAR2(4000) ,
		BILL_TO                 VARCHAR2(4000) ,
		SHIP_TO                 VARCHAR2(4000) ,
		CUST_PO                 VARCHAR2(4000),
		WIP_ENTITY_ID			VARCHAR2(4000),
		OPERATING_UNIT			VARCHAR2(4000),
		ORDER_TYPE				VARCHAR2(4000),
		FSC_CONTENT				VARCHAR2(4000),
		SHIPPING_METHOD			VARCHAR2(4000)	-- Added by Sarfaraz // NS-MOCK2-180 // 10-11-2022
	);

	get_data px_auto_batch_sols;

  start_of_query long;
  end_of_query long;
  main_query long;
  order_by long;

  object_details_query long;
  final_query long;

  P_HEADER_ID NUMBER;
  L_OPERATOR_LOGIC VARCHAR2(1000);
  L_OBJECT_DETAILS VARCHAR2(1000);
  L_PARAMETER_DETAILS VARCHAR2(1000);
  L_OPERATOR_DETAILS VARCHAR2(1000);
  L_VALUE_FROM_DETAILS VARCHAR2(1000);
  L_VALUE_TO_DETAILS VARCHAR2(1000);
  L_PARAM_COLUMN VARCHAR2(1000);
  L_OPERATOR_VALUE VARCHAR2(1000);

  L_OPERATOR_DETAILS_QUERY LONG;
  L_CF_QUERY LONG;

	L_VALUE VARCHAR2(1000);
	l_layout BOOLEAN;
	l_batch_counter NUMBER;
	LV_BATCH_NUMBER VARCHAR2(32767); -- Modified by Lingaraj Changed 4000 to 32767

	P_BATCH_NUMBERS APPS.jtf_varchar2_table_200 := APPS.jtf_varchar2_table_200();
	batch_counter number;
	ERR_CODE NUMBER;
	ERR_MSG VARCHAR2(4000);
	L_ROWCOUNT NUMBER:=0;
	L_REQUEST_ID NUMBER;
	L_COUNTER NUMBER;

	l_req_return_status BOOLEAN;
	lc_phase            VARCHAR2(50);
	lc_status           VARCHAR2(50);
	lc_dev_phase        VARCHAR2(50);
	lc_dev_status       VARCHAR2(50);
	lc_message          VARCHAR2(50);
	LN_COUNTER NUMBER:=0;
    ln_rule_cnt Number ;-- Lingaraj
    lv_autobatch_Active Varchar2(5);

	lv_err_batching_msg  VARCHAR2(4000);
BEGIN

    pr_log_msg_auto('PX_AUTO_BATCHING_PKG.Main() Called. Setup ID / Request ID :'||P_SETUP_ID ||'/'||p_request_id);

    --Check if the Auto Batch Rule Was Active or Not
    Begin
      SELECT AUTO_BATCH_ACTIVE into lv_autobatch_Active
      FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T WHERE HEADER_ID=P_SETUP_ID;
    Exception
    When Others Then
       lv_autobatch_Active := 'No';
    End;
    If lv_autobatch_Active = 'No' Then
     pr_log_msg_auto('Auto Batch Rule is not Active');
     P_RETCODE := '1';
     P_ERRBUFF := 'Auto Batch Rule is not Active';
     Return;
    End If;

	if p_request_id is not null then
		LOOP
            pr_log_msg_auto('Waiting for Request ID  :'|| p_request_id );
			l_req_return_status :=
				fnd_concurrent.wait_for_request (request_id      => p_request_id
                                            ,INTERVAL        => 5 --interval Number of seconds to wait between checks
                                            ,max_wait        => 0 --Maximum number of seconds to wait for the request completion
                                             -- out arguments
                                            ,phase           => lc_phase
                                            ,STATUS          => lc_status
                                            ,dev_phase       => lc_dev_phase
                                            ,dev_status      => lc_dev_status
                                            ,message         => lc_message
                                            );

		EXIT WHEN UPPER (lc_phase) = 'COMPLETED' OR UPPER (lc_status) IN ('CANCELLED', 'ERROR', 'TERMINATED');
		END LOOP;
		IF UPPER (lc_phase) = 'COMPLETED' AND UPPER (lc_status) = 'NORMAL' THEN
			LN_COUNTER:=LN_COUNTER+1;
		END IF;
	end if;

	pr_log_msg_auto('Waiting for Request ID Completed');

 if p_request_id is null or ln_counter > 0 then
	FOR setup_data in C_GET_SETUP(P_SETUP_ID)
	LOOP
		P_HEADER_ID := setup_data.header_id;

		main_query:= fn_get_main_query(P_HEADER_ID);

		end_of_query:='
			)
			  where BATCH_STATUS IN (''Open'',''Unbatched'')
			  --AND REQUESTDATE>=(trunc(sysdate) + (SELECT nvl(BATCH_REQUEST_DATE_RANGE,0) FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||P_HEADER_ID||'))
			  --AND ORGANIZATION_ID = (SELECT INVENTORY_ORG_ID FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||P_HEADER_ID||')
			  AND PRESSTYPE  = (SELECT PRESS_TYPE FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||P_HEADER_ID||')
			  AND PX_AUTO_BATCHING_PKG.GET_COLOUR_BY_SIZE_STATUS(INVENTORY_ITEM_ID,ORGANIZATION_ID) = ''N''
			  AND PX_AUTO_BATCHING_PKG.GET_COPY_CHANGE_STATUS(INVENTORY_ITEM_ID,ORGANIZATION_ID) = ''N''
			  AND PX_AUTO_BATCHING_PKG.GET_COMBO_STATUS(INVENTORY_ITEM_ID,ORGANIZATION_ID) IS NULL';

		order_by := 'ORDER BY REQUESTDATE DESC';

		pr_log_msg_auto('Custom Query - Prepared.');

		IF setup_data.CF_SEQ IS NULL THEN
			final_query:=main_query||' '||end_of_query||chr(10)||order_by;
		ELSE
			L_CF_QUERY:= fn_get_autobatch_cf_query(setup_data.CF_SEQ,AUTO_BATCH);
			final_query:=main_query||' '||end_of_query||chr(10)||'  AND  ( '||L_CF_QUERY||' ) '|| chr(10) ||order_by;
		END IF;

		pr_log_msg_auto('+*********************************************************************************************************************************************************************');
		pr_log_msg_auto('Final Query  : ===========>' );
		pr_log_msg_auto(final_query );
		pr_log_msg_auto('+*********************************************************************************************************************************************************************');

		pr_log_msg_auto('Request id:' ||g_conc_request_id);

		L_ROWCOUNT:=0;
		OPEN C_GET_DATA_V FOR final_query;
		LOOP
			FETCH C_GET_DATA_V INTO get_data;
			EXIT WHEN C_GET_DATA_V%NOTFOUND;

			IF  get_data.quantity > setup_data.MAX_QTY_PER_BATCH OR get_data.JOB_QTY > setup_data.MAX_QTY_PER_BATCH
            THEN
                 lv_err_batching_msg :=  'The order quantity is over the ''Max Qty Per Batch'' in auto batching rule';
				fnd_file.put_line(fnd_file.log,'ERROR');
				fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
				fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
				fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
				fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
				fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
                pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>         get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   => ''
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );
			ELSIF GET_SKU_QTY(get_data.ORDER_LINE_ID) > setup_data.MAX_SKU_PER_BATCH and get_data.ORDER_NO IS NOT NULL
            THEN
                 lv_err_batching_msg :=  'The order SKU# is over the ''Max SKU Per Batch'' in auto batching rule';
				fnd_file.put_line(fnd_file.log,'ERROR');
				fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
				fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
				fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
				fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
				fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
                pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>         get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   => ''
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );
			--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023
			ELSIF upper(setup_data.BATCH_LOGIC)=upper('By GLID and Order Number') AND get_data.ORDER_NO IS NULL
			THEN
				lv_err_batching_msg :=  'We cannot execute ''By GLID and Order Number'' batch logic for these NON-ATO DJ''s';
				fnd_file.put_line(fnd_file.log,'ERROR');
				fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
				fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
				fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
				fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
				fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
                pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>         get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   => ''
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );
			--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023
			--- Added by Sarfaraz // NS-MOCK2-117 // 01.03.2023
			ELSIF upper(setup_data.BATCH_LOGIC) IN (upper('By Stock Type and Format'))
					AND get_data.ORDER_NO IS NOT NULL
					AND get_data.FORMATNAME IS NULL
			THEN
				lv_err_batching_msg :=  'The Format Name is null, cannot execute Auto Batching ';
				fnd_file.put_line(fnd_file.log,'ERROR');
				fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
				fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
				fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
				fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
				fnd_file.put_line(fnd_file.log,'Error Message:  '|| lv_err_batching_msg);

				pr_insert_Batch_error_record
											( p_order_number     => get_data.ORDER_NO
												,p_line_no                 =>  get_data.LINE_NO
												,p_error_msg            =>   lv_err_batching_msg
												,p_batch_program   => 'Color by Size'
												,p_customer_name  =>  get_data.customer_name
												,p_assembly             =>    get_data.assembly
												,p_quantity               =>     get_data.quantity
												,p_presstype             =>   get_data.presstype
												,p_jobno                    =>   get_data.jobno
												,p_organization_code   =>      get_data.inventoryorg
												,p_productionmethod =>get_data.productionmethod
											);
				--- Added by Sarfaraz // NS-MOCK2-117 // 01.03.2023
			ELSE
				INSERT INTO PAXAR.PX_BATCH_AUTO_TMP(
					CUSTOMER_NUMBER,
					CUSTOMER_NAME,
					ORDER_NO,
					LINE_NO,
					INTERNAL_ITEM,
					QUANTITY,
					UOM,
					JOBNO,
					ASSEMBLY,
					JOB_QTY,
					JOBUOM,
					JOBSTATUS,
					TE,
					STOCKTYPE,
					INVENTORYCODE,
					SYSTEMID,
					FORMATNAME,
					REQUESTDATE,
					PROMISEDATE,
					SCHEDULESHIPDATE,
					PLANNERCODE,
					INVENTORYORG,
					PRODUCTIONMETHOD,
					BATCH_STATUS,
					BATCH_NUMBER,
					BATCHTYPE,
					BATCH_CREATED_DATE,
					CREATEDBY,
					LAST_UPDATED_DATE,
					LAST_UPDATED_BY,
					RELEASED_DATE,
					TYPESETTING_METHOD,
					PRESSTYPE,
					ORDER_HEADER_ID,
					ORDER_LINE_ID,
					REQUEST_ID,
					BILL_TO,
					SHIP_TO,
					CUST_PO,
					WIP_ENTITY_ID,
					OPERATING_UNIT,
					ORDER_TYPE,
					FSC_CONTENT
				)
				VALUES(
					get_data.CUSTOMER_NUMBER,
					get_data.CUSTOMER_NAME,
					get_data.ORDER_NO,
					get_data.LINE_NO,
					get_data.INTERNAL_ITEM,
					get_data.QUANTITY,
					get_data.UOM,
					get_data.JOBNO,
					get_data.ASSEMBLY,
					get_data.JOB_QTY,
					get_data.JOBUOM,
					get_data.JOBSTATUS,
					get_data.TE,
					get_data.STOCKTYPE,
					get_data.INVENTORYCODE,
					get_data.SYSTEMID,
					get_data.FORMATNAME,
					get_data.REQUESTDATE,
					get_data.PROMISEDATE,
					get_data.SCHEDULESHIPDATE,
					get_data.PLANNERCODE,
					get_data.INVENTORYORG,
					get_data.PRODUCTIONMETHOD,
					get_data.BATCH_STATUS,
					get_data.BATCH_NUMBER,
					get_data.BATCHTYPE,
					get_data.BATCH_CREATED_DATE,
					get_data.CREATEDBY,
					get_data.LAST_UPDATED_DATE,
					get_data.LAST_UPDATED_BY,
					get_data.RELEASED_DATE,
					get_data.TYPESETTING_METHOD,
					get_data.PRESSTYPE,
					get_data.ORDER_HEADER_ID,
					get_data.ORDER_LINE_ID,
					g_conc_request_id,
					get_data.BILL_TO,
					get_data.SHIP_TO,
					get_data.CUST_PO,
					get_data.WIP_ENTITY_ID,
					get_data.OPERATING_UNIT,
					get_data.ORDER_TYPE,
					get_data.FSC_CONTENT
				);
				L_ROWCOUNT:=L_ROWCOUNT+1;
			END IF;
		END LOOP;
		CLOSE C_GET_DATA_V;
		IF L_ROWCOUNT > 0 THEN
			GENERATE_BATCH(setup_data.BATCH_LOGIC,setup_data.PRESS_TYPE,setup_data.header_id);
		END IF;

		fnd_file.put_line(fnd_file.log,'Request id:' ||g_conc_request_id);
		GENERATE_BATCH_COLOUR_BY_SIZE(P_HEADER_ID);
		GENERATE_BATCH_COPY_CHANGE(P_HEADER_ID);
		GENERATE_BATCH_COMBO(P_HEADER_ID);

		LV_BATCH_NUMBER:=null;
		batch_counter:=1;
		P_BATCH_NUMBERS.DELETE();
		FOR get_batch IN C_RELEASE_BATCH(setup_data.PRESS_TYPE,setup_data.INVENTORY_ORG_CODE)
		LOOP
			OPEN C_GET_BATCH_COUNT(get_batch.BATCH_NUMBER);
			FETCH C_GET_BATCH_COUNT INTO l_batch_counter;
			CLOSE C_GET_BATCH_COUNT;

			IF l_batch_counter = 0 THEN

                fnd_file.put_line(fnd_file.log,'Batch Number :'||   get_batch.BATCH_NUMBER);

				P_BATCH_NUMBERS.EXTEND();
				P_BATCH_NUMBERS(batch_counter) := get_batch.BATCH_NUMBER;
				batch_counter:=batch_counter+1;
				insert into PAXAR.PX_AUTO_BATCH_NUMBERS_TMP(batch_number,inventory_org,header_id,batch_creation_date,request_id)
				values(get_batch.BATCH_NUMBER,setup_data.INVENTORY_ORG_CODE,P_HEADER_ID,sysdate,g_conc_request_id);
			END IF;
		END LOOP; -- END OF RELEASE PROGRAMS
		--fnd_file.put_line(fnd_file.log,LV_BATCH_NUMBER);     Log Print Issue When Reaching 32767
		commit;

		--IF LV_BATCH_NUMBER IS NOT NULL THEN        -- Commented by Lingaraj
        IF P_BATCH_NUMBERS.COUNT > 0 THEN
			--PX_MANUAL_BATCHING.RELEASE_PAGE_FUN(P_BATCH_NUMBERS,'Y','Y','Y','Y','Y','Y',setup_data.INVENTORY_ORG_CODE,'Y',NULL,NULL,NULL,ERR_CODE,ERR_MSG);
			-- Added by Malik // 27-10-2022 // To get the value from the PX_NANSHA_BATCH_TRV_NS lookup to use new batching solution.
			lv_is_new_sol := PX_NANSHA_BATCH_UTIL_PKG.get_lookup_meaning('PX_NANSHA_BATCH_TRV_NS','NEW_SOL');
			IF lv_is_new_sol = 'Y' THEN
			-- Calling to procedure for the new solution
				RELEASE_PAGE_FUN_AUTO_NEW(P_BATCH_NUMBERS,
               -- 'Y','Y','Y','Y','Y','Y',
                setup_data.INVENTORY_ORG_CODE,
               -- 'Y',NULL,NULL,NULL,
                ERR_CODE,ERR_MSG);
			ELSE
			-- Added by Malik // 27-10-2022.

				-- if new solution is not set to Y then old solution will be called.
				RELEASE_PAGE_FUN_AUTO(P_BATCH_NUMBERS,'Y','Y','Y','Y','Y','Y',setup_data.INVENTORY_ORG_CODE,'Y',NULL,NULL,NULL,ERR_CODE,ERR_MSG);
			END IF;

       --     RELEASE_PAGE_FUN_AUTO(P_BATCH_NUMBERS,'Y','Y','Y','Y','Y','Y',setup_data.INVENTORY_ORG_CODE,'Y',NULL,NULL,NULL,ERR_CODE,ERR_MSG);
			fnd_file.put_line(fnd_file.log,ERR_CODE);
			fnd_file.put_line(fnd_file.log,ERR_MSG);

			-- Delete order from the staging table which are are released.
			DELETE_STAGING_ORDERS(P_BATCH_NUMBERS);

			-- Delete Unbatched orders from the px_batch_details_tab which are released.
			DELETE_UNBATCHED_ORDERS(P_BATCH_NUMBERS);
		END IF;

		-- Send error report if error.
		L_REQUEST_ID:=g_conc_request_id;
		--SEND_ERROR_REPORT(L_REQUEST_ID);
	END LOOP; -- C_GET_SETUP
	end if;
	COMMIT;

	PX_NANSHA_BATCH_UTIL_PKG.pr_update_vip_jobid;   -- Added by Sarfaraz // NS-MOCK2-83 // 26-10-2022

--END
END MAIN; --MAIN
-- Added by Malik // 27-10-2022 // For new release solution for batch traveller reports.
PROCEDURE release_page_fun_auto_new
                           (P_BATCH_NUMBERS APPS.JTF_VARCHAR2_TABLE_200,
                            --P_TRAB_SU VARCHAR2,--PX_BATCH_TRAVELER_SUMMARY  -- Report 1
                            --P_TRASUB_SU VARCHAR2,--PX_BATCH_TRAVELER_SUB_BATCH -- Report 2
                            --P_BATR_PICK VARCHAR2,--PX_BATCH_TRAVELER_PACKING_FORM -- Report 3
                            --P_BAT_DES_JOB VARCHAR2,--PX_BATCH_TRAVELER_DISCRETE_JOB -- Report 4
                            --P_TYPE_SETT VARCHAR2,--PXBATCHPTVG                       -- Report 5
                            --P_ORDER_BATCH VARCHAR2,--PX_OUTBOUND_BATCH_PRG          -- Report 6
                            P_ORG_CODE VARCHAR2,
                            --
                            --P_PRINT_SCOPE_CONFIG VARCHAR2,
                            --P_BATCH_SUMMARY_COPY VARCHAR2,
                            --P_DJD_COPY         VARCHAR2,
                            --P_PACKING_FORM_COPY  VARCHAR2,
                            --
                            P_OUT_RET_CODE OUT NUMBER,
                            P_out_return_msg OUT VARCHAR2
                            )
IS

	cursor c_get_config(p_batch_no varchar2) is
	Select    Distinct    TYPESETTING_METHOD,PRODUCTIONMETHOD,PLANNERCODE
    from px_batch_details_tab   pbdt
    Where   batch_number =  p_batch_no
    And    TYPESETTING_METHOD is not null
    And   PRODUCTIONMETHOD is not null
    And   SUB_BATCH is null
	union
	Select    Distinct    TYPESETTING_METHOD,PRODUCTIONMETHOD,PLANNERCODE
               FROM PX_BATCH_DETAILS_TAB   PBDT
               Where   batch_number = p_batch_no
               And    TYPESETTING_METHOD is not null
               AND   PRODUCTIONMETHOD IS NOT NULL
               AND   batching_type='Combo' and sub_batch is not null;

lv_appl    CONSTANT VARCHAR2(20) := 'PAX';
--
lv_ret_code Varchar2(10);
lv_ret_msg  Varchar2(10000);
lv_line_feed_char Varchar2(10) := '.';
ln_group_id NUMBER := paxar.px_nansha_batch_groupid_s.nextval;
ln_no_of_Batches Number := 0;
 ln_bs_cpy Number;-- := nvl(P_BATCH_SUMMARY_COPY,0);
ln_djd_cpy Number;--:= nvl(P_DJD_COPY,0);
ln_apf_cpy Number;--:= nvl(P_PACKING_FORM_COPY,0);
 --P_REPORT_ORG_CODE Varchar2(10):='';
 ln_subbatch_exists     NUMBER := 0;
 --
 lv_printer            Varchar2(100);
 lv_default_setup Varchar2(100);
 lv_default_bs_printer      Varchar2(100);
 lv_default_djd_printer    Varchar2(100);
 lv_default_apf_printer     Varchar2(100);
 lv_configSetup_Message     Varchar2(1000);

 lv_typesetting_method VARCHAR2(1000);
	lv_prod_method varchar2(1000);
	lv_planner_code varchar2(1000);
	lv_config_type varchar2(1000);
	lv_subbatch_report VARCHAR2(4000);

	v_request_id NUMBER;
	lv_ERRBUFF VARCHAR2(4000);
	ln_RETCODE NUMBER;

	l_req_return_status BOOLEAN;
	lc_phase            VARCHAR2(50);
	lc_status           VARCHAR2(50);
	lc_dev_phase        VARCHAR2(50);
	lc_dev_status       VARCHAR2(50);
	lc_message          VARCHAR2(50);
    P_PRINT_SCOPE_CONFIG    VARCHAR2(1) := 'Y';
BEGIN
  P_OUT_RET_CODE:=0;

  --Contcating the batchnumber forFile Generation Program
  FOR i IN 1 ..P_BATCH_NUMBERS.COUNT  LOOP
     IF P_BATCH_NUMBERS(i) is not null THEN
       ln_no_of_Batches := ln_no_of_Batches +1 ;
        /*
          GROUP_ID - multiple group id is getting Updated with One Group ID
          - AUTOBATCH_GROUP_ID - This Will Hold the Original Group ID
        */
        INSERT INTO PAXAR.PX_NANSHA_BATCH_DETAIL_TEMP
         (BATCH_NUMBER, GROUP_ID,AUTOBATCH_GROUP_ID ,BATCH_TYPE,creation_date,request_id,PRINT_SCOPE_CONFIG)
        VALUES (P_BATCH_NUMBERS(i) ,ln_group_id,ln_group_id,'Auto',sysdate,g_conc_request_id,'Y');    -- Changed From Manual to Auto  and Request ID Added

     END IF;
  END LOOP;

  COMMIT;

  Begin
    -- All Batchs in that Group  Released
    IF ln_no_of_Batches > 0 Then
      release_soldj_auto(
                   p_ret_code     => lv_ret_code
                   ,p_ret_msg      => lv_ret_msg
                   ,p_group_id     => ln_group_id
                    );
      If lv_ret_code = 'S' Then
         P_out_return_msg :=  'Wip Job Released Successfully.'||lv_line_feed_char;
      Else
          P_out_return_msg := 'Wip Job release failure #'||lv_ret_msg||lv_line_feed_char;
      End If;
    End If;

  Exception
  When Others Then
    P_out_return_msg := 'Error in Wip Job Release(release_soldj_auto).'||SQLERRM||lv_line_feed_char;
  End;

  P_out_return_msg := P_out_return_msg||' No. of Total Batches Processed :'||ln_no_of_Batches||'.';

  ln_no_of_Batches := 0;

  FOR i IN 1 ..P_BATCH_NUMBERS.COUNT  LOOP
    pr_log_msg_auto('Processing Started for Batch Number :'|| P_BATCH_NUMBERS(i));

    IF P_BATCH_NUMBERS(i) is not null THEN

	 -- Geting the print scope configuration for the batch traveller reports.
	   IF P_PRINT_SCOPE_CONFIG  = 'Y' THEN
			ln_bs_cpy := null;
			ln_djd_cpy := null;
			ln_apf_cpy := null;
			lv_printer := null;
              get_printer_scope_config_auto( p_batch_number => P_BATCH_NUMBERS(i),
                                              -- p_inv_org             VARCHAR2,
                                               p_bs_copy       => ln_bs_cpy,   --Out
                                               p_djd_copy      => ln_djd_cpy,  --Out
                                               p_apf_copy      => ln_apf_cpy,       --Out
                                               p_printer         =>  lv_printer  ,        --Out
                                               p_default_setup =>    lv_default_setup  ,      --Out
                                               p_default_bs_printer     =>lv_default_bs_printer,   --Out
                                               p_default_djd_printer   =>lv_default_djd_printer,        --Out
                                               p_default_apf_printer    =>lv_default_apf_printer,            --Out
                                               p_msg                    => lv_configSetup_Message                 --Out
                                            ) ;
                pr_log_msg_auto('pr_get_printer_scope_configuration -> Return Message :'||lv_configSetup_Message);
                pr_log_msg_auto(  'Fetching From Default Setup :'||   lv_default_setup );
                pr_log_msg_auto('Batch Summary/Sub-batch Summary No Of Copies :'||ln_bs_cpy);
                pr_log_msg_auto('Discrete Job Detail :'||ln_djd_cpy);
                pr_log_msg_auto('Avery Packing Form:'||ln_apf_cpy);

             If lv_default_setup= 'Y'  Then
                      pr_log_msg_auto('Printer for Batch Summary / Discrete Job Detail / Avery Packing Form :'|| lv_default_bs_printer ||'/'||  lv_default_djd_printer
                      ||'/' || lv_default_apf_printer );
					  lv_config_type:='Default';
              Else
                  lv_default_bs_printer := lv_printer;
                  lv_default_djd_printer := lv_printer;
                  lv_default_apf_printer  := lv_printer;
				  lv_config_type := 'Exception';
              End If;
       END IF;

	   open c_get_config(P_BATCH_NUMBERS(i));
	   fetch c_get_config into lv_typesetting_method,lv_prod_method,lv_planner_code;
	   close c_get_config;

	   -- To check if the batch contains sub-batch number.
	   ln_subbatch_exists := 0;
	   SELECT count(1)
       into ln_subbatch_exists
        FROM PX_BATCH_DETAILS_TAB
        WHERE BATCHING_TYPE IN ('Color by Size','Copy Change','Combo')
        And BATCH_NUMBER = P_BATCH_NUMBERS(i)
        And SUB_BATCH is not null;

        pr_log_msg_auto('ln_subbatch_exists:'||ln_subbatch_exists);

		-- To check wheather batch is having sub-batch or not.
		lv_subbatch_report := 'N';

        if ln_subbatch_exists > 0 THEN
		  lv_subbatch_report := 'Y';
		END IF;

		pr_log_msg_auto('ln_subbatch_exists:'||ln_subbatch_exists);
		pr_log_msg_auto('lv_config_type:'||lv_config_type);

		-- Added by Sarfaraz //NS-PROD-65//13-02-2023 for print sequence issue.
		PX_NANSHA_AUTO_BATCHING_PKG2.PR_AUTO_INSERT_BATCH_REL_DT
		(
			p_batch_number         =>  P_BATCH_NUMBERS(i) ,
            p_packing_rpt_copy     =>  ln_apf_cpy,
            p_Traveler_rpt_copy    =>  ln_bs_cpy ,
            p_Trv_Discre_rpt_copy  =>  ln_djd_cpy ,
            p_subbatch_report      =>  lv_subbatch_report,   --Subbatch report required Generate ?
            p_mapped_prod_method   =>  lv_prod_method,
            p_mapped_type_settings =>  lv_typesetting_method,
            p_planner_code         =>  lv_planner_code,
            p_printer              =>  lv_printer,
            p_config_type          =>  lv_config_type,
            p_inv_org              =>  P_ORG_CODE,
            p_release_num          =>  1
		);
		Commit;
		-- Added by Sarfaraz //NS-PROD-65//13-02-2023 for print sequence issue.

		/* Commented by Sarfaraz //NS-PROD-65//13-02-2023 for print sequence issue.
        -- New Change for the new report gen Soln
	    -- To insert the batch print details in the px_nansha_batch_release_queue TABLE
		PX_NANSHA_AUTO_BATCH_REL_PKG.pr_auto_insert_release_queue
             (p_batch_number         =>	 P_BATCH_NUMBERS(i) ,
              p_group_id             =>  ln_group_id ,
              p_packing_rpt_copy     =>  ln_apf_cpy,
              p_Traveler_rpt_copy    =>  ln_bs_cpy ,
              p_Trv_Discre_rpt_copy  =>  ln_djd_cpy ,
              p_subbatch_report      =>  lv_subbatch_report,   --Subbatch report required Generate ?
              p_mapped_prod_method   =>  lv_prod_method,
              p_mapped_type_settings =>  lv_typesetting_method,
              p_planner_code         =>  lv_planner_code,
              p_printer              =>  lv_printer,
              p_config_type          =>  lv_config_type,
              p_inv_org              =>  P_ORG_CODE,
              p_release_num          =>  1
             );
			--Commented by Sarfaraz //NS-PROD-65//13-02-2023 for print sequence issue.
			*/
	end if;
  END LOOP;
		/* Commented for NS-PROD-65 : Print not in sequence.
		-- Generates data for the batch traveller reports.
		PX_NANSHA_AUTO_BATCH_REL_PKG.main_program(ln_group_id);
		--fnd_file.put_line(fnd_file.log,lv_ERRBUFF);
		--fnd_file.put_line(fnd_file.log,ln_RETCODE);

	   -- Generates the xml and pdf files for the batch traveller reports.
		fnd_file.put_line(fnd_file.log,'Calling the PX_NANSHA_BATCH_REPORT_GEN concurrent program.');
        v_request_id := fnd_request.submit_request ( application => 'PAX'
                                                      , program     => 'PX_NANSHA_BATCH_REPORT_GEN'
                                                      , start_time  => SYSDATE   --TO_CHAR(SYSDATE + 3/24,'DD-Mon-YYYY HH24:MI:SS')
                                                      , sub_request => FALSE
                                                      , ARGUMENT1	=> 	ln_group_id);
         COMMIT;
		  Update PAXAR.px_nansha_batch_release_queue
          Set request_id = v_request_id
          Where group_id = ln_group_id;

          COMMIT;

            IF v_request_id = 0 THEN
                fnd_file.put_line(fnd_file.log,'Request not submitted: '|| fnd_message.get);
            ELSE
                fnd_file.put_line(fnd_file.log,'Request submitted successfully. Request id: ' || v_request_id);
                -- Wait for the PX_NANSHA_BATCH_REPORT_GEN program to complete execution.
                LOOP

                    pr_log_msg_auto('Waiting for Request ID  :'|| v_request_id );
                    l_req_return_status :=
                        fnd_concurrent.wait_for_request (request_id      => v_request_id
                                    ,INTERVAL        => 5 --interval Number of seconds to wait between checks
                                    ,max_wait        => 0 --Maximum number of seconds to wait for the request completion
                                     -- out arguments
                                    ,phase           => lc_phase
                                    ,STATUS          => lc_status
                                    ,dev_phase       => lc_dev_phase
                                    ,dev_status      => lc_dev_status
                                    ,message         => lc_message
                                    );

                EXIT WHEN UPPER (lc_phase) = 'COMPLETED' OR UPPER (lc_status) IN ('CANCELLED', 'ERROR', 'TERMINATED');
                END LOOP;

            END IF;

    --Update the "PAXAR.px_nansha_batch_release_queue" Table with All Details
    Update PAXAR.px_nansha_batch_release_queue
    Set REPORT_SUBMITTED_BY =  fnd_profile.value('USERNAME')
        ,REPORT_SUBMITTED = sysdate
        ,REPORT_COMPLETION = sysdate
        ,PRINT_STYLE         = 'PDF_TEST_STYLE'
        ,READY_TO_MERGE = 'Y'
    Where group_id = ln_group_id;
	*/

	/* COMMENTED FOR NEW PRINT LOGIC BASED ON INVENTORY ORG
    --Batch Documnet Submit Cmoleted.  Trigger the Document Print
    v_request_id := 0;

	begin
	   v_request_id :=  PX_MANUAL_BATCHING.fn_initiate_doc_print_wrapper(ln_group_id);
	   pr_log_msg_auto('Print Queue Program Triggered . Request ID :'|| v_request_id) ;
	exception
			when others then
				lc_message := SQLERRM;
				insert into PAXAR.PX_AUTO_PROGRAM_ERROR(request_id,program_name,error_messages)
				values(g_conc_request_id,'PX_MANUAL_BATCHING.fn_initiate_doc_print_wrapper',lc_message);
				commit;
	end;
    	*/
Exception
When Others Then
  P_OUT_RET_CODE:=0;
  P_out_return_msg:= 'Unexpected Error in DataBase PX_MANUAL_BATCHING.RELEASE_PAGE_FUN.'
    || 'SQL Error :'||lv_line_feed_char
    ||SQLCODE ||'.'||sqlerrm ||'.'||lv_line_feed_char
    ||dbms_utility.format_error_backtrace;

  COMMIT;
END release_page_fun_auto_new;
-- Added by Malik // 27-10-2022.

PROCEDURE release_page_fun_auto
                           (P_BATCH_NUMBERS APPS.JTF_VARCHAR2_TABLE_200,
                            P_TRAB_SU VARCHAR2,--PX_BATCH_TRAVELER_SUMMARY  -- Report 1
                            P_TRASUB_SU VARCHAR2,--PX_BATCH_TRAVELER_SUB_BATCH -- Report 2
                            P_BATR_PICK VARCHAR2,--PX_BATCH_TRAVELER_PACKING_FORM -- Report 3
                            P_BAT_DES_JOB VARCHAR2,--PX_BATCH_TRAVELER_DISCRETE_JOB -- Report 4
                            P_TYPE_SETT VARCHAR2,--PXBATCHPTVG                       -- Report 5
                            P_ORDER_BATCH VARCHAR2,--PX_OUTBOUND_BATCH_PRG          -- Report 6
                            P_ORG_CODE VARCHAR2,
                            --
                            P_PRINT_SCOPE_CONFIG VARCHAR2,
                            P_BATCH_SUMMARY_COPY VARCHAR2,
                            P_DJD_COPY         VARCHAR2,
                            P_PACKING_FORM_COPY  VARCHAR2,
                            --
                            P_OUT_RET_CODE OUT NUMBER,
                            P_out_return_msg OUT VARCHAR2)
IS

	cursor c_get_config(p_batch_no varchar2) is
	Select    Distinct    TYPESETTING_METHOD,PRODUCTIONMETHOD,PLANNERCODE
    from px_batch_details_tab   pbdt
    Where   batch_number =  p_batch_no
    And    TYPESETTING_METHOD is not null
    And   PRODUCTIONMETHOD is not null
    And   SUB_BATCH is null
	union
	Select    Distinct    TYPESETTING_METHOD,PRODUCTIONMETHOD,PLANNERCODE
               FROM PX_BATCH_DETAILS_TAB   PBDT
               Where   batch_number = p_batch_no
               And    TYPESETTING_METHOD is not null
               AND   PRODUCTIONMETHOD IS NOT NULL
               AND   batching_type='Combo' and sub_batch is not null;

lv_appl    CONSTANT VARCHAR2(20) := 'PAX';
lv_Report1 CONSTANT VARCHAR2(30) := 'PX_BATCH_TRAVELER_SUMMARY'; --PX Batch Traveler Batch Summary [XML Publisher Report]
lv_Report1_Req_ID Number;
--
lv_Report2 CONSTANT VARCHAR2(30) := 'PX_BATCH_TRAVELER_SUB_BATCH'; --PX Batch Traveler Sub Batch Summary
lv_Report2_Req_ID Number;
--
lv_Report4 CONSTANT VARCHAR2(30) := 'PX_BATCH_TRAVELER_PACKING_FORM'; --PX Batch Traveler Packing Form
lv_Report4_Req_ID Number;
--
lv_Report3 CONSTANT VARCHAR2(30) := 'PX_BATCH_TRAVELER_DISCRETE_JOB'; --PX Batch Traveler Discrete Job Detail
lv_Report3_Req_ID Number;
--

--
lv_Report6 CONSTANT VARCHAR2(30) := 'PX_OUTBOUND_BATCH_PRG'; --PX_OUTBOUND_BATCH_PRG
lv_Report6_Req_ID Number;
--
lv_Report7 CONSTANT VARCHAR2(30) := 'PX_OUTBOUND_SUB_BATCH_PRG'; --PX_OUTBOUND_SUB_BATCH_PRG
lv_Report7_Req_ID Number;

--
lv_concat_batch_num Varchar2(32767);
lv_request_ids Varchar2(32767);
lv_out_message Varchar2(10000);
lv_ret_code Varchar2(10);
lv_ret_msg  Varchar2(10000);
lv_line_feed_char Varchar2(10) := '.';
ln_group_id NUMBER := paxar.px_nansha_batch_groupid_s.nextval;
ln_no_of_Batches Number := 0;
 ln_bs_cpy Number := nvl(P_BATCH_SUMMARY_COPY,0);
 ln_djd_cpy Number:= nvl(P_DJD_COPY,0);
 ln_apf_cpy Number:= nvl(P_PACKING_FORM_COPY,0);
 --P_REPORT_ORG_CODE Varchar2(10):='';
 ln_subbatch_exists     NUMBER := 0;
 --
 lv_printer            Varchar2(100);
 lv_default_setup Varchar2(100);
 lv_default_bs_printer      Varchar2(100);
 lv_default_djd_printer    Varchar2(100);
 lv_default_apf_printer     Varchar2(100);
 lv_configSetup_Message     Varchar2(1000);

 lv_typesetting_method VARCHAR2(1000);
	lv_prod_method varchar2(1000);
	lv_planner_code varchar2(1000);
	lv_config_type varchar2(1000);
	lv_sqlerrm varchar2(4000);
BEGIN
  P_OUT_RET_CODE:=0;
  --RETURN;
  pr_log_msg_auto('Inside RELEASE_PAGE_FUN - '||CHR(13) ||
  'P_TRAB_SU :[ '||P_TRAB_SU ||']'||chr(13) ||
  'P_TRASUB_SU: ['||P_TRASUB_SU ||']'||chr(13) ||
  'P_BATR_PICK: ['||P_BATR_PICK ||']'||chr(13) ||
  'P_BAT_DES_JOB : ['||P_BAT_DES_JOB ||']'||chr(13) ||
  'P_TYPE_SETT: ['||P_TYPE_SETT  ||']'||chr(13) ||
  'P_ORDER_BATCH: ['||P_ORDER_BATCH||']'||chr(13) ||
  'P_ORG_CODE: ['||P_ORG_CODE||']'||chr(13) ||
  'P_PRINT_SCOPE_CONFIG: ['||P_PRINT_SCOPE_CONFIG||']'||chr(13) ||
  'P_BATCH_SUMMARY_COPY: ['||P_BATCH_SUMMARY_COPY||']'||chr(13) ||
  'P_DJD_COPY: ['||P_DJD_COPY||']'||chr(13) ||
  'P_PACKING_FORM_COPY: ['||P_PACKING_FORM_COPY||']'||chr(13)
  );

  --Contcating the batchnumber forFile Generation Program
  FOR i IN 1 ..P_BATCH_NUMBERS.COUNT  LOOP
     IF P_BATCH_NUMBERS(i) is not null THEN

       /* -- Commented By Lingaraj
         If lv_concat_batch_num is not null Then
          lv_concat_batch_num := lv_concat_batch_num ||','||P_BATCH_NUMBERS(i);
        Else
          lv_concat_batch_num := P_BATCH_NUMBERS(i);
        End If;      */

        ln_no_of_Batches := ln_no_of_Batches +1 ;
        /*
          GROUP_ID - multiple group id is getting Updated with One Group ID
          - AUTOBATCH_GROUP_ID - This Will Hold the Original Group ID
        */
        INSERT INTO PAXAR.PX_NANSHA_BATCH_DETAIL_TEMP
         (BATCH_NUMBER, GROUP_ID,AUTOBATCH_GROUP_ID ,BATCH_TYPE,creation_date,request_id,PRINT_SCOPE_CONFIG)
        VALUES (P_BATCH_NUMBERS(i) ,ln_group_id,ln_group_id,'Auto',sysdate,g_conc_request_id,'Y');    -- Changed From Manual to Auto  and Request ID Added

     END IF;
  END LOOP;

  COMMIT;

  Begin
    -- If lv_concat_batch_num is not null Then      -- Commented By Lingaraj
    IF ln_no_of_Batches > 0 Then                  -- Added By Lingaraj
      release_soldj_auto(--p_batch_number => lv_concat_batch_num
                   p_ret_code     => lv_ret_code
                   ,p_ret_msg      => lv_ret_msg
                   ,p_group_id     => ln_group_id
                    );
      If lv_ret_code = 'S' Then

         P_out_return_msg :=  'Wip Job Released Successfully.'||lv_line_feed_char;
      Else
          P_out_return_msg := 'Wip Job release failure #'||lv_ret_msg||lv_line_feed_char;
      End If;
    End If;
  Exception
  When Others Then
    P_out_return_msg := 'Error in Wip Job Release(release_soldj_auto).'||SQLERRM||lv_line_feed_char;
  End;
  P_out_return_msg := P_out_return_msg||' No. of Total Batches Processed :'||ln_no_of_Batches||'.';

  ln_no_of_Batches := 0;

  FOR i IN 1 ..P_BATCH_NUMBERS.COUNT  LOOP
     pr_log_msg_auto('Processing Started for Batch Number :'|| P_BATCH_NUMBERS(i));
     IF P_BATCH_NUMBERS(i) is not null THEN

	   IF nvl(P_PRINT_SCOPE_CONFIG,'N')  = 'Y' THEN
			ln_bs_cpy := null;
			ln_djd_cpy := null;
			ln_apf_cpy := null;
			lv_printer := null;
              get_printer_scope_config_auto( p_batch_number => P_BATCH_NUMBERS(i),
                                                                                  -- p_inv_org             VARCHAR2,
                                                                                   p_bs_copy       => ln_bs_cpy,   --Out
                                                                                   p_djd_copy      => ln_djd_cpy,  --Out
                                                                                   p_apf_copy      => ln_apf_cpy,       --Out
                                                                                   p_printer         =>  lv_printer  ,        --Out
                                                                                   p_default_setup =>    lv_default_setup  ,      --Out
                                                                                   p_default_bs_printer     =>lv_default_bs_printer,   --Out
                                                                                   p_default_djd_printer   =>lv_default_djd_printer,        --Out
                                                                                   p_default_apf_printer    =>lv_default_apf_printer,            --Out
                                                                                   p_msg                    => lv_configSetup_Message                 --Out
                                                                                ) ;
                pr_log_msg_auto('pr_get_printer_scope_configuration -> Return Message :'||lv_configSetup_Message);
                pr_log_msg_auto(  'Fetching From Default Setup :'||   lv_default_setup );
                pr_log_msg_auto('Batch Summary/Sub-batch Summary No Of Copies :'||ln_bs_cpy);
                pr_log_msg_auto('Discrete Job Detail :'||ln_djd_cpy);
                pr_log_msg_auto('Avery Packing Form:'||ln_apf_cpy);
             If lv_default_setup= 'Y'  Then
                      pr_log_msg_auto('Printer for Batch Summary / Discrete Job Detail / Avery Packing Form :'|| lv_default_bs_printer ||'/'||  lv_default_djd_printer
                      ||'/' || lv_default_apf_printer );
					  lv_config_type:='Default';
              Else
                  lv_default_bs_printer := lv_printer;
                  lv_default_djd_printer := lv_printer;
                  lv_default_apf_printer  := lv_printer;
				  lv_config_type := 'Exception';
              End If;
       END IF;

	   open c_get_config(P_BATCH_NUMBERS(i));
	   fetch c_get_config into lv_typesetting_method,lv_prod_method,lv_planner_code;
	   close c_get_config;

       pr_log_msg_auto('Batch Number Processing started ..'||P_BATCH_NUMBERS(i));
       IF  NVL(P_PRINT_SCOPE_CONFIG,'N')  = 'Y' OR
            NVL(P_TRAB_SU,'N') = 'Y'
       THEN
         --Submit PX Batch Traveler Batch Summary [XML Publisher Report]
         pr_log_msg_auto('Program 1 - PX Batch Traveler Batch Summary  No Of Copies And Printer Setup :'||nvl(ln_bs_cpy,0) || '/'|| lv_default_bs_printer);
         --Set_printer_options_auto(nvl(ln_bs_cpy,0) , lv_default_bs_printer);
         pr_attach_template_auto(lv_Report1);
         lv_Report1_Req_ID :=
          fnd_request.submit_request(
            application => lv_appl
          , program     => lv_Report1                                                                            -- Program short name
          , description => ''
          , start_time  => sysdate                                                                         -- Start Time
          , sub_request => False                                                                 -- Sub Request
          , argument1   => P_BATCH_NUMBERS(i) ---Batch Number
		  ,argument2 => nvl(ln_bs_cpy,1)
          );
          COMMIT;
          ln_no_of_Batches := ln_no_of_Batches +1;
          lv_request_ids := (Case When lv_request_ids is Null  Then '' Else lv_request_ids||',' End) ||  lv_Report1_Req_ID;

          pr_log_msg_auto('Program 1 - PX Batch Traveler Batch Summary #Request ID #'||lv_Report1_Req_ID);

		  begin
		  PX_MANUAL_BATCHING.pr_insert_batch_print_queue(
                                                            p_request_id              =>  lv_Report1_Req_ID,
                                                            p_batch_number       =>  P_BATCH_NUMBERS(i),
                                                            p_printer_name         =>  lv_default_bs_printer,
                                                            p_no_of_copies          => ln_bs_cpy,
                                                            p_group_id                 => ln_group_id,
                                                            p_release_type           =>  'Auto',
                                                            p_prod_method         =>   lv_prod_method,
                                                            p_typeSettingMethod => lv_typesetting_method,
                                                            p_plannerCode            => lv_planner_code,
                                                            p_config_type              => lv_config_type
                                                           ) ;
		exception
			when others then
				lv_sqlerrm := SQLERRM;
				insert into PAXAR.PX_AUTO_PROGRAM_ERROR(request_id,program_name,error_messages)
				values(g_conc_request_id,'PX_MANUAL_BATCHING.pr_insert_batch_print_queue.Report 1',lv_sqlerrm);
				commit;
		end;
       END IF;

        /*
            Check If Sub Batch Summery Report Needs to Trigger ?
            PX Batch Traveler Sub Batch Summary
        */
        ln_subbatch_exists := 0;
        SELECT count(1) into ln_subbatch_exists
        FROM PX_BATCH_DETAILS_TAB
        WHERE BATCHING_TYPE IN ('Color by Size','Copy Change','Combo')
        And BATCH_NUMBER = P_BATCH_NUMBERS(i)
        And SUB_BATCH is not null;

       IF  ln_subbatch_exists > 0 AND
          ( NVL(P_PRINT_SCOPE_CONFIG,'N')  = 'Y' OR
            NVL(P_TRASUB_SU,'N') = 'Y'
          )
       THEN
         --Submit - PX Batch Traveler Sub Batch Summary [XML Publisher Report]

         pr_log_msg_auto('Program 1.1 - PX Batch Traveler Sub Batch Summary No Of Copies And Printer Setup :'||nvl(ln_bs_cpy,0) || '/'|| lv_default_bs_printer);
         --Set_printer_options_auto(nvl(ln_bs_cpy,0) , lv_default_bs_printer);

         pr_attach_template_auto(lv_Report2);
         lv_Report2_Req_ID :=
          fnd_request.submit_request(
            application => lv_appl
          , program     => lv_Report2                                                                            -- Program short name
          , description => ''
          , start_time  => sysdate                                                                         -- Start Time
          , sub_request => False                                                                 -- Sub Request
          , argument1   => P_BATCH_NUMBERS(i) ---Batch Number
		  ,argument2    =>  nvl(ln_bs_cpy,1)
          );
          COMMIT;
          ln_no_of_Batches := ln_no_of_Batches +1;
           lv_request_ids := (Case When lv_request_ids is Null  Then '' Else lv_request_ids||',' End) ||  lv_Report2_Req_ID;

          pr_log_msg_auto('Program 1.1 - PX Batch Traveler Sub Batch Summary #Request ID #'||lv_Report2_Req_ID);
          begin
		  PX_MANUAL_BATCHING.pr_insert_batch_print_queue(
                                                            p_request_id              =>  lv_Report2_Req_ID,
                                                            p_batch_number       =>  P_BATCH_NUMBERS(i),
                                                            p_printer_name         =>  lv_default_bs_printer,
                                                            p_no_of_copies          => ln_bs_cpy,
                                                            p_group_id                 => ln_group_id,
                                                            p_release_type           =>  'Auto',
                                                            p_prod_method         =>   lv_prod_method,
                                                            p_typeSettingMethod => lv_typesetting_method,
                                                            p_plannerCode            => lv_planner_code,
                                                            p_config_type              => lv_config_type
                                                           ) ;
		exception
			when others then
				lv_sqlerrm := SQLERRM;
				insert into PAXAR.PX_AUTO_PROGRAM_ERROR(request_id,program_name,error_messages)
				values(g_conc_request_id,'PX_MANUAL_BATCHING.pr_insert_batch_print_queue.Report 2',lv_sqlerrm);
				commit;
		end;
       END IF;

       IF NVL(P_PRINT_SCOPE_CONFIG,'N') = 'Y' OR
          NVL(P_BAT_DES_JOB,'N') = 'Y'
       THEN
          --Submit - PX Batch Traveler Discrete Job Detail

          pr_log_msg_auto('Program 2 -PX Batch Traveler Discrete Job Detail - No Of Copies And Printer Setup :'||nvl(ln_djd_cpy,0) || '/'|| lv_default_djd_printer);
         --Set_printer_options_auto(nvl(ln_djd_cpy,0) , lv_default_djd_printer);

          pr_attach_template_auto(lv_Report3);
          lv_Report3_Req_ID :=
          fnd_request.submit_request(
            application => lv_appl
          , program     => lv_Report3                                                                          -- Program short name
          , description => ''
          , start_time  => sysdate                                                                         -- Start Time
          , sub_request => False                                                                 -- Sub Request
          , argument1   => P_BATCH_NUMBERS(i) ---Batch Number
		  ,argument2    =>  nvl(ln_djd_cpy,1)
          );
          COMMIT;
          ln_no_of_Batches := ln_no_of_Batches +1;
           lv_request_ids := (Case When lv_request_ids is Null  Then '' Else lv_request_ids||',' End) ||  lv_Report3_Req_ID;
          pr_log_msg_auto('Program 2 - PX Batch Traveler Discrete Job Detail #Request ID #'||lv_Report3_Req_ID);
           begin
		   PX_MANUAL_BATCHING.pr_insert_batch_print_queue(
                                                            p_request_id              =>  lv_Report3_Req_ID,
                                                            p_batch_number       =>  P_BATCH_NUMBERS(i),
                                                            p_printer_name         =>  lv_default_djd_printer,
                                                            p_no_of_copies          => ln_djd_cpy,
                                                            p_group_id                 => ln_group_id,
                                                            p_release_type           =>  'Auto',
                                                            p_prod_method         =>   lv_prod_method,
                                                            p_typeSettingMethod => lv_typesetting_method,
                                                            p_plannerCode            => lv_planner_code,
                                                            p_config_type              => lv_config_type
                                                           ) ;
       exception
			when others then
				lv_sqlerrm := SQLERRM;
				insert into PAXAR.PX_AUTO_PROGRAM_ERROR(request_id,program_name,error_messages)
				values(g_conc_request_id,'PX_MANUAL_BATCHING.pr_insert_batch_print_queue.Report 3',lv_sqlerrm);
				commit;
		end;
	   END IF;

         IF NVL(P_PRINT_SCOPE_CONFIG,'N')= 'Y' OR
            NVL(P_BATR_PICK,'N') = 'Y'
         THEN
           --Submit - PX Batch Traveler Packing Form [XML Publisher Report]
           --Set_printer_options_auto(ln_apf_cpy);
            pr_log_msg_auto('Program 3 -PX Batch Traveler Packing Form - No Of Copies And Printer Setup :'||nvl(ln_apf_cpy,0) || '/'|| lv_default_apf_printer);
           --Set_printer_options_auto(nvl(ln_apf_cpy,0) , lv_default_apf_printer);

           pr_attach_template_auto(lv_Report4);
           lv_Report4_Req_ID :=
            fnd_request.submit_request(
              application => lv_appl
            , program     => lv_Report4                                                                          -- Program short name
            , description => ''
            , start_time  => sysdate                                                                         -- Start Time
            , sub_request => False                                                                 -- Sub Request
            , argument1   => P_BATCH_NUMBERS(i) ---Batch Number
			,argument2    =>  nvl(ln_apf_cpy,1)
            );
            COMMIT;
            ln_no_of_Batches := ln_no_of_Batches +1;
             lv_request_ids := (Case When lv_request_ids is Null  Then '' Else lv_request_ids||',' End) ||  lv_Report4_Req_ID;

            pr_log_msg_auto('Program 3 -PX Batch Traveler Packing Form #Request ID #'||lv_Report4_Req_ID);
            begin
			PX_MANUAL_BATCHING.pr_insert_batch_print_queue(
                                                            p_request_id              =>  lv_Report4_Req_ID,
                                                            p_batch_number       =>  P_BATCH_NUMBERS(i),
                                                            p_printer_name         =>  lv_default_apf_printer,
                                                            p_no_of_copies          => ln_apf_cpy,
                                                            p_group_id                 => ln_group_id,
                                                            p_release_type           =>  'Auto',
                                                            p_prod_method         =>   lv_prod_method,
                                                            p_typeSettingMethod => lv_typesetting_method,
                                                            p_plannerCode            => lv_planner_code,
                                                            p_config_type              => lv_config_type
                                                           ) ;
         exception
			when others then
				lv_sqlerrm := SQLERRM;
				insert into PAXAR.PX_AUTO_PROGRAM_ERROR(request_id,program_name,error_messages)
				values(g_conc_request_id,'PX_MANUAL_BATCHING.pr_insert_batch_print_queue.Report 4',lv_sqlerrm);
				commit;
		end;
		 END IF;
     END IF;
      --P_out_return_msg := P_out_return_msg||lv_line_feed_char;
  END LOOP;

	--Batch Documnet Submit Cmoleted.  Trigger the Document Print
	begin
	   lv_Report3_Req_ID :=  PX_MANUAL_BATCHING.fn_initiate_doc_print_wrapper(ln_group_id);
	   pr_log_msg_auto('Print Queue Program Triggered . Request ID :'|| lv_Report3_Req_ID) ;
	exception
			when others then
				lv_sqlerrm := SQLERRM;
				insert into PAXAR.PX_AUTO_PROGRAM_ERROR(request_id,program_name,error_messages)
				values(g_conc_request_id,'PX_MANUAL_BATCHING.fn_initiate_doc_print_wrapper',lv_sqlerrm);
				commit;
	end;

  P_OUT_RET_CODE:=0;
  P_out_return_msg := '<html><p>'||P_out_return_msg||' No Of Requests Submitted :'||ln_no_of_Batches||'.</p>'
                                       ||'<p> Requests ID - '|| substr(lv_request_ids,0,500) ||'</p></html>';
/*  -- Delete All data older then 3 Days
  Delete PAXAR.PX_NANSHA_BATCH_DETAIL_TEMP
  Where creation_date < (Sysdate - 10) ;*/
  COMMIT;
Exception
When Others Then
  P_OUT_RET_CODE:=0;
  P_out_return_msg:= 'Unexpected Error in DataBase PX_MANUAL_BATCHING.RELEASE_PAGE_FUN.'
    || 'SQL Error :'||lv_line_feed_char
    ||SQLCODE ||'.'||sqlerrm ||'.'||lv_line_feed_char
    ||dbms_utility.format_error_backtrace;

/*  Delete PAXAR.PX_NANSHA_BATCH_DETAIL_TEMP
  Where group_id =   ln_group_id;*/
  COMMIT;
END release_page_fun_auto;

PROCEDURE Set_printer_options_auto(p_no_of_copies Number , p_printer Varchar2)
Is
l_true boolean;
Begin
IF p_printer = 'noprint' OR  Nvl(p_no_of_copies,0) = 0  Then
   l_true :=  FND_REQUEST.set_print_options
   ( printer =>  p_printer,copies => Nvl(p_no_of_copies,0), validate_printer => 'SKIP'   );

    pr_log_msg_auto('Printer is Not Required to Set, Because Printer is '||p_printer ||'  And No Of Copies :'|| p_no_of_copies );
Else
  l_true :=  FND_REQUEST.set_print_options
       (printer => p_printer --'NS121XN146061',--IN varchar2 default NULL,  --printer - Printer name where the request o/p should be sent.
         --style IN varchar2 default NULL,   --style - Print style that needs to be used for printing.
         ,copies => 1,--IN number default NULL,    --copies - Number of copies to print.
         --save_output IN boolean default TRUE, --save_output - Should the output file be saved after printing. Default is TRUE. TRUE/FALSE
         --print_together IN varchar2 default 'N',-- Applies only for sub requests. If 'Y', output will not be printed until all the sub requests complete. Default is 'N'. ( Y/N )
         validate_printer => 'SKIP' -- IN varchar2 default 'RESOLVE'
         /*
           Once submit function is called with a specific program, if the printer specified here conflicts with a printer setting at the program level, one of three options is available:
            - FAIL - raise an error and fail to submit
            - SKIP - skip this print pp action, but submit anyway
            - RESOLVE - switch to the valid printer, if printer and style are compatible
            - Default is RESOLVE
         */
         );

   If l_true = true Then
     pr_log_msg_auto('Printer Set Successfully ');
   Else
       pr_log_msg_auto('Printer Set UNSuccessfull');
   End If;

End If;

Exception
When Others Then
  pr_log_msg_auto('Unexpected Error When Setting Printer options :'|| SQLCODE ||'.'||sqlerrm ||'.'
    ||dbms_utility.format_error_backtrace);
End Set_printer_options_auto;

PROCEDURE pr_attach_template_auto(p_conc_prg Varchar2)
As
l_ret_status Boolean;
BEGIN

  if p_conc_prg = 'PX_BATCH_TRAVELER_SUMMARY' then
    --'PX_BATCH_TRAVELER_SUMMARY'
    -- PX Batch Traveler Batch Summary [XML Publisher Report]
    -- LAYOUT : PX_BATCH_TRAVELER_SUMMARY

   l_ret_status := fnd_request.add_layout (
      template_appl_name  => 'PAX',
      template_code       => 'PX_BATCH_TRAVELER_SUMMARY',
      template_language   => 'en', --Use language from template definition
      template_territory  => '00', --Use territory from template definition
      output_format       => 'PDF' --Use output format from template definition
      );
  end if;

  if  p_conc_prg = 'PX_BATCH_TRAVELER_SUB_BATCH' then
    --'PX_BATCH_TRAVELER_SUB_BATCH';
    --PX Batch Traveler Sub Batch Summary
    --LAYOUT : PX_BATCH_TRAVELER_SUB_BATCH
    l_ret_status :=fnd_request.add_layout (
      template_appl_name  => 'PAX',
      template_code       => 'PX_BATCH_TRAVELER_SUB_BATCH',
      template_language   => 'en', --Use language from template definition
      template_territory  => '00', --Use territory from template definition
      output_format       => 'PDF' --Use output format from template definition
      );

  end if;

  if  p_conc_prg = 'PX_BATCH_TRAVELER_PACKING_FORM' then
    -- 'PX_BATCH_TRAVELER_PACKING_FORM';
    --  PX Batch Traveler Packing Form
    --  LAYOUT :PX_BATCH_TRAVELER_PACKING_FORM
    l_ret_status :=fnd_request.add_layout (
      template_appl_name  => 'PAX',
      template_code       => 'PX_BATCH_TRAVELER_PACKING_FORM',
      template_language   => 'en', --Use language from template definition
      template_territory  => '00', --Use territory from template definition
      output_format       => 'PDF' --Use output format from template definition
      );
  end if;
  if  p_conc_prg = 'PX_BATCH_TRAVELER_DISCRETE_JOB' then
    --  'PX_BATCH_TRAVELER_DISCRETE_JOB';
     -- PX Batch Traveler Discrete Job Detail
     -- PX_BATCH_TRAVELER_DISCRETE_JOB
     l_ret_status :=fnd_request.add_layout (
      template_appl_name  => 'PAX',
      template_code       => 'PX_BATCH_TRAVELER_DISCRETE_JOB',
      template_language   => 'en', --Use language from template definition
      template_territory  => '00', --Use territory from template definition
      output_format       => 'PDF' --Use output format from template definition
      );
  End If;
Exception
When Others Then
  pr_log_msg_auto('Exception On pr_attach_template_auto '||SQLERRM);
END pr_attach_template_auto;

PROCEDURE release_soldj_auto(p_ret_code  out   Varchar2,p_ret_msg   OUT   Varchar2 ,p_group_id IN NUMBER DEFAULT NULL)
AS
    ln_group_id     NUMBER := apps.wip_job_schedule_interface_s.nextval;
    --
    lv_error_status VARCHAR2(15);
    lv_error_message VARCHAR2(1000);
	g_batched_status Varchar2(10) := 'Batched';
	g_released_status  Varchar2(10) := 'Released';
BEGIN
    p_ret_code := 'S';
    --pr_log_msg_auto('release_soldj_auto Called ..'||p_batch_number);

    UPDATE px_batch_details_tab  tbl
        SET
            batch_status = decode(tbl.batch_status , g_batched_status ,g_released_status,   tbl.batch_status)  -- Only Batch Status is Batched Update to Released
            ,last_updated_date = sysdate
            ,last_updated_by = fnd_profile.value('USERNAME')
            ,released_date = sysdate
            ,release_count = (nvl(tbl.release_count,0) + 1)
        WHERE
            batch_number IN
             (select BATCH_NUMBER
            from PAXAR.PX_NANSHA_BATCH_DETAIL_TEMP
            where group_id  =p_group_id
            );

            INSERT INTO px_batch_details_hstry_tab
            (BATCH_NUMBER
                ,BATCH_STATUS
                ,CUSTOMER_NUMBER
                ,CUSTOMER_NAME
                ,ORDER_NO
                ,LINE_NO
                ,INTERNAL_ITEM
                ,QUANTITY
                ,UOM
                ,JOBNO
                ,ASSEMBLY
                ,JOB_QTY
                ,JOBUOM
                ,JOBSTATUS
                ,TE
                ,STOCKTYPE
                ,INVENTORYCODE
                ,SYSTEMID
                ,FORMATNAME
                ,REQUESTDATE
                ,PROMISEDATE
                ,SCHEDULESHIPDATE
                ,PLANNERCODE
                ,INVENTORYORG
                ,PRODUCTIONMETHOD
                ,BATCHTYPE
                ,BATCH_CREATED_DATE
                ,CREATED_BY
                ,LAST_UPDATED_DATE
                ,LAST_UPDATED_BY
                ,RELEASED_DATE
                ,TYPESETTING_METHOD
                ,PRESSTYPE
                ,SUB_BATCH
                ,release_count
				,BATCH_LOGIC		-- Added by Sarfaraz // NS-MOCK2-86 // 29-10-2022
				,SUBBATCH_LOGIC		-- Added by Sarfaraz // NS-MOCK2-86 // 29-10-2022
                )
                SELECT
                    BATCH_NUMBER
                    ,BATCH_STATUS
                    ,CUSTOMER_NUMBER
                    ,CUSTOMER_NAME
                    ,ORDER_NO
                    ,LINE_NO
                    ,INTERNAL_ITEM
                    ,QUANTITY
                    ,UOM
                    ,JOBNO
                    ,ASSEMBLY
                    ,JOB_QTY
                    ,JOBUOM
                    ,JOBSTATUS
                    ,TE
                    ,STOCKTYPE
                    ,INVENTORYCODE
                    ,SYSTEMID
                    ,FORMATNAME
                    ,REQUESTDATE
                    ,PROMISEDATE
                    ,SCHEDULESHIPDATE
                    ,PLANNERCODE
                    ,INVENTORYORG
                    ,PRODUCTIONMETHOD
                    ,BATCHTYPE
                    ,BATCH_CREATED_DATE
                    ,CREATED_BY
                    ,LAST_UPDATED_DATE
                    ,LAST_UPDATED_BY
                    ,RELEASED_DATE
                    ,TYPESETTING_METHOD
                    ,PRESSTYPE
                    ,SUB_BATCH
                    ,release_count
					,BATCH_LOGIC		-- Added by Sarfaraz // NS-MOCK2-86 // 29-10-2022
					,SUBBATCH_LOGIC		-- Added by Sarfaraz // NS-MOCK2-86 // 29-10-2022
                FROM
                    px_batch_details_tab
                WHERE
                    batch_number IN
                     (select BATCH_NUMBER
                          from PAXAR.PX_NANSHA_BATCH_DETAIL_TEMP
                          where group_id  =p_group_id
                          )
					--AND line_no IN (rec_batch_line.line_no)
                    AND  SUB_BATCH is null ;

        COMMIT;

      begin
                    INSERT
                    INTO wip_job_schedule_interface
                    (
                      last_update_date
                      ,last_updated_by
                      ,creation_date
                      ,created_by
                      ,last_update_login
                      ,group_id
                      ,organization_id
                      ,load_type
                      ,wip_entity_id
                      ,process_phase
                      ,process_status
                      ,status_type
                      ,header_id
                      ,first_unit_start_date
                      ,first_unit_completion_date
                      ,last_unit_start_date
                      ,last_unit_completion_date
                      )
                      Select
                      SYSDATE   --last_update_date
                          ,apps.fnd_global.user_id  --last_updated_by
                          ,SYSDATE     --creation_date
                          ,apps.fnd_global.user_id  --created_by
                          ,fnd_global.login_id     --last_update_login
                          ,ln_group_id   --group_id
                          ,tbl.organization_id     --organization_id
                          ,3     --load_type
                          /*1. create standard DJ,
                           2.creative pending repetitive schedule,
                           3. update standard or non standard job,
                           4. create non standard job
                           */
                          ,tbl.wip_entity_id       --wip_entity_id
                          ,2  --process_phase -2. validation, 3.  EXPLOSION, 4. COMPLETION, 5. CREATION
                          ,1  --process_status -1. pending 2. running, 3. error 4. complete 5. warning
                          ,3  --status_type 1.UnReleased 3. Released 4.Complete 6.On Hold 7. Cancelled
                          ,wip_job_schedule_interface_s.NEXTVAL                                   --header_id
                          ,tbl.actual_start_date
                          ,tbl.date_completed
                          ,tbl.actual_start_date
                          ,tbl.date_completed
                      from WIP_DISCRETE_JOBS_V tbl ,
                           px_batch_details_tab pbd
                      where tbl.WIP_ENTITY_NAME = pbd.jobno
                      And tbl.status_type = 1  -- Insert the Dj for Release only if Status is     "UnReleased"
                      And batch_number IN
                           (select BATCH_NUMBER
                          from PAXAR.PX_NANSHA_BATCH_DETAIL_TEMP
                          where group_id  =p_group_id
                          );

           pr_log_msg_auto('Record Inserted into Interface[wip_job_schedule_interface] :' || SQL%rowcount);

              COMMIT;

            wip_massload_pub.massloadjobs(
              p_groupid         => ln_group_id, -- Group ID
              p_validationlevel => 2,           -- Validation Level
              p_commitflag      => 1,           -- Commit 1 =Yes , 0 ='No'
              x_returnstatus    => lv_error_status,
              x_errormsg        => lv_error_message);


     pr_log_msg_auto('wip_massload_pub.massloadjobs - Return Status:'||lv_error_status ||'-'||lv_error_message);
    --DELETE FROM px_batch_name;

    COMMIT;
Exception
When Others Then
p_ret_code := 'E';
    pr_log_msg_auto('Unexpected Erro in release_soldj_auto :'||SQLERRM);
    p_ret_msg :=  SQLCODE ||'.'||sqlerrm ||'.'||'\n'
                ||dbms_utility.format_error_backtrace;
end;
END release_soldj_auto;

Procedure get_printer_scope_config_auto( p_batch_number Varchar2,
										 p_bs_copy       OUT NUMBER,
										 p_djd_copy      OUT NUMBER,
										 p_apf_copy      OUT NUMBER,
										 p_printer          OUT Varchar2,
										 p_default_setup OUT Varchar2,
										 p_default_bs_printer     OUT Varchar2,
										 p_default_djd_printer   OUT Varchar2,
										 p_default_apf_printer    OUT Varchar2,
										 p_msg                    OUT Varchar2
										)
AS
ln_distinct_cnt            NUMBER;
ln_distinct_pc_cnt      NUMBER;
--lv_message               VARCHAR2(500);
lv_Get_default           VARCHAR2(1) := 'N';
cursor c_get_combo_count(p_batch_number varchar2) is
	Select count(1) c_count
       from
         (      Select    Distinct    TYPESETTING_METHOD,PRODUCTIONMETHOD,PLANNERCODE
               from px_batch_details_tab   pbdt
               Where   batch_number =  p_batch_number
               And    TYPESETTING_METHOD is not null
               And   PRODUCTIONMETHOD is not null
               And   SUB_BATCH is null
			   union
			   Select    Distinct    TYPESETTING_METHOD,PRODUCTIONMETHOD,PLANNERCODE
               FROM PX_BATCH_DETAILS_TAB   PBDT
               Where   batch_number = p_batch_number
               And    TYPESETTING_METHOD is not null
               AND   PRODUCTIONMETHOD IS NOT NULL
               AND   batching_type='Combo'
			   and sub_batch is not null
          );

	cursor c_get_combo(p_batch_number varchar2) is
	Select    Distinct    TYPESETTING_METHOD,PRODUCTIONMETHOD,PLANNERCODE,inventoryorg
               from px_batch_details_tab   pbdt
               Where   batch_number =  p_batch_number
               And    TYPESETTING_METHOD is not null
               And   PRODUCTIONMETHOD is not null
               And   SUB_BATCH is null
			 union
				Select    Distinct    TYPESETTING_METHOD,PRODUCTIONMETHOD,PLANNERCODE,inventoryorg
               FROM PX_BATCH_DETAILS_TAB   PBDT
               Where   batch_number =  p_batch_number
               And    TYPESETTING_METHOD is not null
               AND   PRODUCTIONMETHOD IS NOT NULL
               AND   batching_type='Combo' and sub_batch is not null;

	cursor c_get_copies_dt_pc(p_ts VARCHAR2,p_pm VARCHAR2,p_pc varchar2,p_inv_org varchar2) is
	select distinct  BATCH_SUMMARY,DISCRETE_JOB_DTL,AVERY_PACKING_FORM,PRINTER_DETAILS
	From PAXAR.PAXAR_OE_AUTO_BATCH_EXE_T CONFIG
	WHERE CONFIG.TYPE_SETTING_METHOD = p_ts
    AND  CONFIG.PRODUCTION_METHOD = p_pm
    AND  CONFIG.ATTRIBUTE1 = p_pc
    AND  CONFIG.INV_ORG = p_inv_org;

	cursor c_get_copies_dt(p_ts VARCHAR2,p_pm VARCHAR2,p_inv_org varchar2) is
	select distinct  BATCH_SUMMARY,DISCRETE_JOB_DTL,AVERY_PACKING_FORM,PRINTER_DETAILS
	From PAXAR.PAXAR_OE_AUTO_BATCH_EXE_T CONFIG
	WHERE CONFIG.TYPE_SETTING_METHOD = p_ts
    AND  CONFIG.PRODUCTION_METHOD = p_pm
    AND  CONFIG.ATTRIBUTE1 is null
    AND  CONFIG.INV_ORG = p_inv_org;

	cursor c_get_copies_2(p_ts VARCHAR2,p_pm VARCHAR2,p_inv_org varchar2) is
	select distinct  BATCH_SUMMARY,DISCRETE_JOB_DTL,AVERY_PACKING_FORM,PRINTER_DETAILS
	From PAXAR.PAXAR_OE_AUTO_BATCH_EXE_T CONFIG
	WHERE CONFIG.TYPE_SETTING_METHOD = p_ts
    AND  CONFIG.PRODUCTION_METHOD = p_pm
    AND  CONFIG.INV_ORG = p_inv_org;

	lv_typesetting_method VARCHAR2(1000) := null;
	lv_prod_method varchar2(1000) := null;
	lv_planner_code varchar2(1000) := null;
	lv_inv_org varchar2(1000) := null;
	l_bs_copy number := null;
	l_djd_copy number := null;
	l_apf_copy number := null;
	l_printer varchar2(4000) := null;
Begin
      p_default_setup := 'N';
	  lv_typesetting_method := null;
	lv_prod_method := null;
	lv_planner_code := null;
	lv_inv_org  := null;
	l_bs_copy := null;
	l_djd_copy  := null;
	l_apf_copy  := null;
	l_printer := null;
       --Check the Batch is Having only One Set Value for Type Setting Method + Production Method + Inv Org
       OPEN c_get_combo_count(p_batch_number);
	   FETCH c_get_combo_count INTO ln_distinct_cnt;
	   CLOSE c_get_combo_count;

       If  ln_distinct_cnt > 1 Then
             p_msg := 'More then one Production Method, Type Setting method and Planner Code+ combination is available for the Batch : '||p_batch_number||'.';
       End If;

       pr_log_msg_auto('get_printer_scope_config_auto() - noof Production Methods :'||ln_distinct_cnt);

       If  ln_distinct_cnt = 1 Then
			open c_get_combo(p_batch_number);
			fetch c_get_combo into lv_typesetting_method,lv_prod_method,lv_planner_code,lv_inv_org;
			close c_get_combo;

				if lv_planner_code is not null then
                    pr_log_msg_auto('***Condition 1 	if lv_planner_code is not null then   ***');

					open c_get_copies_dt_pc(lv_typesetting_method,lv_prod_method,lv_planner_code,lv_inv_org);
					fetch c_get_copies_dt_pc into l_bs_copy,l_djd_copy,l_apf_copy,l_printer;
					close c_get_copies_dt_pc;

                    --If no Print Data found for the Planner Code. Check for record where Planner Code is Null
                    if l_bs_copy is null and l_djd_copy is null and l_apf_copy is null and l_printer is null then
                       pr_log_msg_auto('***Condition 1.1  Planner Code Not Null - But no Value Found , Serach for record where Planner Code is Null *******');
                       open c_get_copies_dt(lv_typesetting_method,lv_prod_method,lv_inv_org);
					   fetch c_get_copies_dt into l_bs_copy,l_djd_copy,l_apf_copy,l_printer;
					   close c_get_copies_dt;

                       -- If no Data found for the Planner Code Null , Go For Default
                       if l_bs_copy is null and l_djd_copy is null and l_apf_copy is null and l_printer is null then
                          pr_log_msg_auto('**Condition 1.2  If no Data found, Then Get Default Value*** ');
						  lv_Get_default :='Y';
					   end if;

                    end if;
				else
                     pr_log_msg_auto('**Condition 2  If Planner Code is Null *** ');
					open c_get_copies_dt(lv_typesetting_method,lv_prod_method,lv_inv_org);
					fetch c_get_copies_dt into l_bs_copy,l_djd_copy,l_apf_copy,l_printer;
					close c_get_copies_dt;

                      -- If no Data found for the Planner Code Null , Go For Default
                       if l_bs_copy is null and l_djd_copy is null and l_apf_copy is null and l_printer is null then
						  lv_Get_default :='Y';
					   end if;
				end if;

				if l_bs_copy is null and l_djd_copy is null and l_apf_copy is null and l_printer is null and lv_Get_default = 'N' then
					open c_get_copies_2(lv_typesetting_method,lv_prod_method,lv_inv_org);
					fetch c_get_copies_2 into l_bs_copy,l_djd_copy,l_apf_copy,l_printer;
					close c_get_copies_2;

					if l_bs_copy is null and l_djd_copy is null and l_apf_copy is null and l_printer is null then
						lv_Get_default :='Y';
					end if;
				end if;
       End If;

       If lv_Get_default = 'Y'   Then
              For rec in (SELECT HEADER_ID ,PROGRAM_NAME ,NO_OF_COPIES,PRINTER_DETAILS
                                                                        FROM PAXAR.PAXAR_OE_AUTO_BATCH_TRA_T Order By HEADER_ID )
              Loop
                    If   rec.PROGRAM_NAME = 'Batch Summary/Sub-batch Summary' Then
                           p_default_bs_printer     := rec.PRINTER_DETAILS;
                           p_bs_copy                      := rec.NO_OF_COPIES;
                    ElsIf  rec.PROGRAM_NAME = 'Discrete Job Detail' Then
                             p_default_djd_printer  := rec.PRINTER_DETAILS;
                             p_djd_copy                    := rec.NO_OF_COPIES;
                    ElsIf  rec.PROGRAM_NAME = 'Avery Packing Form' Then
                            p_default_apf_printer   := rec.PRINTER_DETAILS;
                            p_apf_copy                     := rec.NO_OF_COPIES;
                    End If;
                    p_default_setup := 'Y';
              End Loop;
			  p_printer := p_default_bs_printer; --- Added by Sarfaraz // NS-PROD-84 // 18-01-2023
		else
			p_bs_copy :=   l_bs_copy;
			p_djd_copy :=  l_djd_copy;
			p_apf_copy :=  l_apf_copy;
			p_printer  :=  l_printer;
           If       p_default_setup = 'N'  Then
                     p_msg := p_msg  || 'No Default Printer Setup Available.';
           End If;
       End If;

	  fnd_file.put_line(fnd_file.log,p_batch_number||' '||p_bs_copy||' '||p_djd_copy||' '||p_apf_copy||' '||p_printer);
     pr_log_msg_auto('get_printer_scope_config_auto > Message >'||p_msg);

End get_printer_scope_config_auto;

procedure pr_log_msg_auto(p_msg         in varchar2,
                     p_destination in number default fnd_file.log)
  AS
  --l_msg varchar2(4000):=  FND_PROFILE.VALUE('USERNAME') || '-->'||p_msg;

  begin
  fnd_file.put_line(p_destination ,TO_CHAR(SYSDATE,'DD-MON-RRRR HH24:MI:SS')|| '  '||p_msg);

 --   track_my_flow(l_msg);
End pr_log_msg_auto;

PROCEDURE send_error_report(P_REQUEST_ID number) AS

	CURSOR C_GET_ERROR_STATUS(P_REQUEST_ID NUMBER) IS
	SELECT COUNT(*) FROM PAXAR.PX_BATCH_AUTO_ERR WHERE REQUEST_ID=P_REQUEST_ID;

	v_request_id NUMBER;
	v_status     BOOLEAN;
	L_BOL_DELIVERY BOOLEAN;
	l_layout BOOLEAN;
	L_ERROR_STATUS NUMBER;

BEGIN
	OPEN C_GET_ERROR_STATUS(P_REQUEST_ID);
	FETCH C_GET_ERROR_STATUS INTO L_ERROR_STATUS;
	CLOSE C_GET_ERROR_STATUS;

	IF L_ERROR_STATUS != 0 THEN
		/*fnd_global.apps_initialize (user_id=>FND_PROFILE.VALUE('USER_ID')
                              ,resp_id=>FND_PROFILE.VALUE('RESP_ID')
                              ,resp_appl_id=>FND_PROFILE.VALUE('RESP_APPL_ID')); -- to be changed later*/    -- Commented by Lingaraj
			-- ASSIGNING LAYOUT
			l_layout :=  apps.fnd_request.add_layout (template_appl_name   => 'PAX',
									   template_code        => 'PX_AUTOBATCH_ERROR_REPORT',
									   template_language    => 'en',
									   template_territory   => '00',
									   output_format        => 'EXCEL');

			/*L_BOL_DELIVERY := FND_REQUEST.ADD_DELIVERY_OPTION(TYPE => 'E',
										P_ARGUMENT1 => 'AUTOBATCH SALES ORDER ERROR REPORT',
										P_ARGUMENT2 => 'OracleNotification@averydennison.com',
										P_ARGUMENT3 => 'ibms.nan.batchmant1@ap.averydennison.com,RBIS.NAN.Digital.Batchman@ap.averydennison.com,rbis.nan.rfid.oh@ap.averydennison.com,rfid.sboh@averydennison.com,rbis.nan.ppc.oh.roll@averydennison.com,rbis.nan.ppc.flexo.oh@ap.averydennison.com',
										P_ARGUMENT4 => 'billy.wang@ap.averydennison.com,sarfaraz.ahmed@averydennison.com'
								);*/

			v_request_id := fnd_request.submit_request ( application => 'PAX'
															, program     => 'PX_AUTOBATCH_ERROR_REPORT'
															, start_time  => null
															, sub_request => FALSE
															,ARGUMENT1=> P_REQUEST_ID);

			COMMIT;
			IF v_request_id = 0 THEN
				fnd_file.put_line(fnd_file.log,'PX_AUTOBATCH_ERROR_REPORT error: '|| fnd_message.get);
			ELSE
				fnd_file.put_line(fnd_file.log,'PX_AUTOBATCH_ERROR_REPORT successfully. Request id: ' || v_request_id);
				v_request_id := fnd_request.submit_request ( application => 'PAX'
															, program     => 'PX_AUTOBATCH_SEND_REPORT_EMAIL'
															, start_time  => null
															, sub_request => FALSE
															,ARGUMENT1=> v_request_id);
				COMMIT;
				IF v_request_id = 0 THEN
					fnd_file.put_line(fnd_file.log,'PX_AUTOBATCH_SEND_REPORT_EMAIL : '|| fnd_message.get);
				ELSE
					fnd_file.put_line(fnd_file.log,'PX_AUTOBATCH_SEND_REPORT_EMAIL successfully. Request id: ' || v_request_id);
				END IF;
			END IF;
	END IF;

END SEND_ERROR_REPORT;

PROCEDURE send_email_error_report(P_ERRBUFF OUT VARCHAR2 , P_RETCODE OUT NUMBER,P_REQUEST_ID NUMBER) AS

	CURSOR C_GET_EMAIL_LIST IS
	SELECT distinct tag
	FROM FND_LOOKUP_VALUES
	WHERE lookup_type='PX_NANSHA_ERR_REPORT_EMAIL_LIS'
	AND language     ='US'
	AND ENABLED_FLAG='Y'
	AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE) )
	AND lookup_code!='EMAIL_ID_CC';

	CURSOR C_GET_CC IS
	SELECT tag
	FROM FND_LOOKUP_VALUES
	WHERE lookup_type='PX_NANSHA_ERR_REPORT_EMAIL_LIS'
	AND language     ='US'
	AND ENABLED_FLAG='Y'
	AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE) )
	and lookup_code='EMAIL_ID_CC';

	l_mail_request_Id    NUMBER;
    L_ATTACHED_FILE_NAME VARCHAR2(240);
    P_MAIL_SUBJECT         VARCHAR2(200);
    P_MAIL_BODY VARCHAR2(3999);
    P_MAIL_FROM     VARCHAR2(200);
    p_mail_cc   VARCHAR2(2000);
    P_ATTACHED_FILE_NAME VARCHAR2(1000) ;
	P_MAIL_TO varchar2(4000);
	LV_MAIL_TO varchar2(4000);
	LV_MAIL_CC VARCHAR2(4000) := NULL;

	l_req_return_status BOOLEAN;
	lc_phase            VARCHAR2(50);
	lc_status           VARCHAR2(50);
	lc_dev_phase        VARCHAR2(50);
	lc_dev_status       VARCHAR2(50);
	lc_message          VARCHAR2(50);
BEGIN
	LOOP
		l_req_return_status :=
			fnd_concurrent.wait_for_request (request_id      => P_REQUEST_ID
										,INTERVAL        => 5 --interval Number of seconds to wait between checks
										,max_wait        => 0 --Maximum number of seconds to wait for the request completion
										 -- out arguments
										,phase           => lc_phase
										,STATUS          => lc_status
										,dev_phase       => lc_dev_phase
										,dev_status      => lc_dev_status
										,message         => lc_message
										);

	EXIT WHEN UPPER (lc_phase) = 'COMPLETED' OR UPPER (lc_status) IN ('CANCELLED', 'ERROR', 'TERMINATED');
	END LOOP;
	IF UPPER (lc_phase) = 'COMPLETED' AND UPPER (lc_status) = 'NORMAL' THEN
		fnd_global.apps_initialize (user_id=>FND_PROFILE.VALUE('USER_ID')
                              ,resp_id=>FND_PROFILE.VALUE('RESP_ID')
                              ,resp_appl_id=>FND_PROFILE.VALUE('RESP_APPL_ID'));

		FOR c_email IN C_GET_EMAIL_LIST
		LOOP
			IF LV_MAIL_TO IS NULL THEN
				LV_MAIL_TO := c_email.tag;
			ELSE
				LV_MAIL_TO := LV_MAIL_TO ||','||c_email.tag;
			END IF;
		END LOOP;

		OPEN C_GET_CC;
		FETCH C_GET_CC INTO LV_MAIL_CC;
		CLOSE C_GET_CC;

		fnd_file.put_line(fnd_file.log,'EMAIL LIST : '|| LV_MAIL_TO);
		fnd_file.put_line(fnd_file.log,'EMAIL CC : '|| LV_MAIL_CC);

		l_attached_file_name := 'PX_AUTOBATCH_ERROR_REPORT_' ||P_REQUEST_ID ||'_1.xls';--./PX_AUTOBATCH_ERROR_REPORT_570794654_1.xls
		p_attached_file_name := 'PX_AUTOBATCH_ERROR_REPORT_' ||P_REQUEST_ID ||'_1.xls'; --./PX_AUTOBATCH_ERROR_REPORT_570794654_1.xls
		--P_MAIL_TO := 'ibms.nan.batchmant1@ap.averydennison.com,RBIS.NAN.Digital.Batchman@ap.averydennison.com,rbis.nan.rfid.oh@ap.averydennison.com,rfid.sboh@averydennison.com,rbis.nan.ppc.oh.roll@averydennison.com,rbis.nan.ppc.flexo.oh@ap.averydennison.com';
		P_MAIL_TO := LV_MAIL_TO;
		--p_mail_cc :='billy.wang@ap.averydennison.com';
		p_mail_cc := LV_MAIL_CC;
		p_mail_subject := 'AUTOBATCH_SALES_ORDER_ERROR_REPORT';
		p_mail_body :='Please check the attachment';
		l_mail_request_Id    := apps.FND_REQUEST.
				  SUBMIT_REQUEST(application => 'PAX', --    Application
								 program => 'PXONTQ11292EM', --    Program
								 description => NULL, --    Description
								 start_time =>NULL, --    Start Time
								 sub_request => FALSE, --    Sub Request
								 --
								 --    Arguments
								 --
								 argument1 => '~'||'OracleNotification@averydennison.com',
								 argument2 => '~' ||'OracleNotification@averydennison.com', --FROM
								 argument3 => '~' || p_mail_to, --TO
								 argument4 => '~' || p_mail_cc, --CC
								 argument5 => '~' || p_mail_subject, --Subject
								 argument6 => '~' || 'Error', --Body
								 argument7 => '~' || 'Report', --Body2
								 argument8 => '~' || 'Path', --path of the  File name to be attached
								 argument9 => '~' || L_ATTACHED_FILE_NAME, --File name to be attached
								 argument10 => '~'|| p_attached_file_name,
								 argument11 => '~', -- Arhiving YES/NO
								 argument12 => CHR(0));
		commit;
		IF l_mail_request_Id = 0 THEN
			fnd_file.put_line(fnd_file.log,'EMAIL PROGRAM REQUEST Error : '|| fnd_message.get);
		ELSE
			fnd_file.put_line(fnd_file.log,'EMAIL PROGRAM REQUEST ID successfully. Request id: ' || l_mail_request_Id);
		END IF;
	END IF;
END SEND_EMAIL_ERROR_REPORT;

PROCEDURE delete_staging_orders(P_BATCH_NUMBERS APPS.JTF_VARCHAR2_TABLE_200) AS
	CURSOR C_GET_ORDERS(P_BATCH_NUMBER VARCHAR2) IS
	SELECT * FROM PX_BATCH_DETAILS_TAB WHERE BATCH_NUMBER=P_BATCH_NUMBER AND BATCH_STATUS='Released';
BEGIN
	FOR i IN 1..P_BATCH_NUMBERS.COUNT
	LOOP
		FOR get_order IN C_GET_ORDERS(P_BATCH_NUMBERS(i))
		LOOP
			IF get_order.ORDER_NO IS NULL THEN
				DELETE FROM PAXAR.PX_BATCH_AUTO_STG_TBL WHERE JOBNO=get_order.JOBNO and ORDER_NO is null;
			ELSE
				DELETE FROM PAXAR.PX_BATCH_AUTO_STG_TBL WHERE ORDER_NO=get_order.ORDER_NO and LINE_NO=get_order.LINE_NO AND JOBNO=get_order.JOBNO;
			END IF;
		END LOOP;
	END LOOP;
	commit;
END DELETE_STAGING_ORDERS;

PROCEDURE delete_unbatched_orders(P_BATCH_NUMBERS APPS.JTF_VARCHAR2_TABLE_200) AS
	CURSOR C_GET_ORDERS(P_BATCH_NUMBER VARCHAR2) IS
	SELECT * FROM PX_BATCH_DETAILS_TAB WHERE BATCH_NUMBER=P_BATCH_NUMBER AND BATCH_STATUS='Released';
BEGIN
	FOR i IN 1..P_BATCH_NUMBERS.COUNT
	LOOP
		FOR get_order IN C_GET_ORDERS(P_BATCH_NUMBERS(i))
		LOOP
			IF get_order.ORDER_NO IS NULL THEN
				DELETE FROM PX_BATCH_DETAILS_TAB WHERE JOBNO=get_order.JOBNO AND BATCH_STATUS='Unbatched';
			ELSE
				DELETE FROM PX_BATCH_DETAILS_TAB WHERE ORDER_NO=get_order.ORDER_NO and LINE_NO=get_order.LINE_NO AND JOBNO=get_order.JOBNO AND BATCH_STATUS='Unbatched';
			END IF;
		END LOOP;
	END LOOP;
	DELETE FROM PX_BATCH_DETAILS_TAB WHERE JOBSTATUS='Cancelled' AND BATCH_STATUS='Unbatched';
	commit;
END DELETE_UNBATCHED_ORDERS;

PROCEDURE generate_batch_colour_by_size(P_HEADER_ID NUMBER) AS
	CURSOR C_GET_SETUP(P_SETUP_ID NUMBER) IS
	SELECT * FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T WHERE HEADER_ID=P_SETUP_ID;

	CURSOR C_GET_SEQ_HDR(P_SEQ_NO NUMBER) IS
	select HEADER_ID from PAXAR.PAXAR_OE_AUTO_BATCH_SEQ_HDR_T where cf_seqno=P_SEQ_NO;

	CURSOR C_GET_GROUP_ID(P_SEQ_HEADER_ID NUMBER) IS
	select group_id,count(*) g_count from PAXAR.PAXAR_OE_AUTO_BATCH_SEQ_LINE_T
    WHERE HEADER_ID=P_SEQ_HEADER_ID group by group_id;

	CURSOR C_GET_SEQ_LINE(P_SEQ_HEADER_ID NUMBER,P_GROUP_ID NUMBER) IS
	select operator_logic,parameter_details,operator_details,VALUE_FROM,VALUE_TO
    from PAXAR.PAXAR_OE_AUTO_BATCH_SEQ_LINE_T
	WHERE HEADER_ID=P_SEQ_HEADER_ID AND nvl(GROUP_ID,1)=nvl(P_GROUP_ID,1) order by TO_NUMBER(ATTRIBUTE1) /*operator_logicdesc*/;

	CURSOR C_GET_PARAM_DET(P_PARAM_DESC VARCHAR2) IS
	  SELECT meaning
	  FROM FND_LOOKUP_VALUES
	  WHERE lookup_type='PAXAR_ONT_AUTO_SEQUENCE'
	  AND language     ='US'
	  AND ENABLED_FLAG='Y'
	  AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE) )
	  AND TAG='SQL' AND DESCRIPTION=P_PARAM_DESC;

	  CURSOR C_GET_OPERATOR_DET(P_OPERATOR_DESC VARCHAR2) IS
	  SELECT meaning
	  FROM FND_LOOKUP_VALUES
	  WHERE lookup_type='PAXAR_ONT_AUTO_SEQUENCE'
	  AND language     ='US'
	  AND ENABLED_FLAG='Y'
	  AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE) )
	  AND TAG='SEQ' AND DESCRIPTION=P_OPERATOR_DESC;

	CURSOR C_GET_PREFIX(P_IIID NUMBER,P_ORG_ID NUMBER) IS
	select ITEM_SCHEDULE_GROUP,ITEM_SUFFIX from PX_SPECSHEETS_ITEM where inventory_item_id=P_IIID AND organization_iD='3699';

	CURSOR C_GET_SKU_DT(P_ORDER_NO VARCHAR2,P_LINE_NO NUMBER) IS
	SELECT pcwh.ORDER_NUMBER,pcwh.ORDER_LINE,pcwdl.SEQUENCE,nvl(pcwdl.REVISED_QTY,pcwdl.QTY) QTY,pcwdl.value
	FROM PAXAR.PX_CARE_WOV_HEADERS pcwh,PAXAR.PX_CARE_WOV_DETAIL_LINES pcwdl
	WHERE pcwh.CARE_WOV_ID=pcwdl.CARE_WOV_ID AND pcwh.ORDER_NUMBER=P_ORDER_NO
	AND pcwh.ORDER_LINE=P_LINE_NO AND pcwdl.SEQUENCE!=0;

	CURSOR C_GET_SKU_HEADER_DT(P_ORDER_NO VARCHAR2,P_LINE_NO NUMBER) IS
	SELECT pcwdl.value
	FROM PAXAR.PX_CARE_WOV_HEADERS pcwh,PAXAR.PX_CARE_WOV_DETAIL_LINES pcwdl
	WHERE pcwh.CARE_WOV_ID=pcwdl.CARE_WOV_ID AND pcwh.ORDER_NUMBER=P_ORDER_NO AND pcwh.ORDER_LINE=P_LINE_NO AND pcwdl.SEQUENCE=0;

	CURSOR C_GET_VF_COUNT(P_IIID NUMBER,P_ORG_ID NUMBER) IS
	select count(variable_field) v_count from (select variable_field from px_color_by_sizes_v where glid_inventory_item_id=P_IIID and organization_id=P_ORG_ID group by variable_field);

	CURSOR C_GET_VF(P_IIID NUMBER,P_ORG_ID NUMBER) IS
	select variable_field from px_color_by_sizes_v WHERE glid_inventory_item_id=P_IIID AND organization_id=P_ORG_ID GROUP BY variable_field;

	CURSOR C_GET_BASE_ITEM(P_IIID NUMBER,P_ORG_ID NUMBER,P_VAR_VALUE VARCHAR2) IS
	select base_item_number from px_color_by_sizes_v WHERE glid_inventory_item_id=P_IIID AND organization_id=P_ORG_ID and upper(variable_value)=upper(P_VAR_VALUE);

	CURSOR C_GLID
	IS
		SELECT INTERNAL_ITEM FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE upper(BATCH_LOGIC)=upper('By GLID') AND upper(BATCHING_TYPE)=upper('Color by Size')
		AND REQUEST_ID=g_conc_request_id GROUP BY INTERNAL_ITEM;

	CURSOR CUR_BAT_GLID(pin_item VARCHAR2)
	IS
		SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE upper(BATCH_LOGIC)=upper('By GLID') and INTERNAL_ITEM=PIN_ITEM
		AND REQUEST_ID=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Color by Size')
		AND ORDER_NO IS NOT NULL -- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
		ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR C_PREFIX
	IS
		SELECT ITEM_PREFIX FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE upper(BATCH_LOGIC)=upper('By Prefix') AND REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Color by Size') GROUP BY ITEM_PREFIX;

	CURSOR CUR_BAT_PREFIX(P_ITEM_PREFIX VARCHAR2)
	IS
		SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE ITEM_PREFIX=P_ITEM_PREFIX AND upper(BATCH_LOGIC)=upper('By Prefix')
		AND REQUEST_ID=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Color by Size')
		AND ORDER_NO IS NOT NULL  -- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
		ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR C_PREFIX_RB_FN
	IS
		SELECT ITEM_PREFIX,CUSTOMER_NUMBER,FORMATNAME FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE upper(trim(BATCH_LOGIC))=upper('By Prefix, RB & Format')
		AND REQUEST_ID=g_conc_request_id
		AND upper(trim(BATCHING_TYPE))=upper('Color by Size')
		GROUP BY ITEM_PREFIX,CUSTOMER_NUMBER,FORMATNAME;

	CURSOR CUR_BAT_PREFIX_RB_FN(P_ITEM_PREFIX VARCHAR2,P_CUSTOMER_NO NUMBER,P_FORMATNAME VARCHAR2)
	IS
		SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE ITEM_PREFIX=P_ITEM_PREFIX AND CUSTOMER_NUMBER=P_CUSTOMER_NO AND FORMATNAME=P_FORMATNAME
		AND upper(BATCH_LOGIC)=upper('By Prefix, RB & Format') AND REQUEST_ID=g_conc_request_id
		AND ORDER_NO IS NOT NULL -- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
		AND upper(BATCHING_TYPE)=upper('Color by Size') ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;  --- Added by Sarfaraz 04.08.2022
		--AND BATCHING_TYPE='Color by Size'; --- Commented by Sarfaraz 04.08.2022

	CURSOR cur_glid_ship
	IS
		SELECT pbd.INTERNAL_ITEM,SHIP_TO
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP PBD
		WHERE PBD.REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Color by Size') AND upper(BATCH_LOGIC)=upper('By GLID and Ship To')
		GROUP BY pbd.INTERNAL_ITEM,PBD.SHIP_TO;

	CURSOR CUR_BAT_glship(pin_item VARCHAR2,P_SHIP_TO VARCHAR2)
	IS
		SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=PIN_ITEM AND SHIP_TO=P_SHIP_TO
		AND upper(BATCHING_TYPE)=upper('Color by Size') AND upper(BATCH_LOGIC)=upper('By GLID and Ship To')
		AND REQUEST_ID=g_conc_request_id
		AND ORDER_NO IS NOT NULL -- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
		ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR cur_glid_bill
	IS
		SELECT PBD.INTERNAL_ITEM,PBD.BILL_TO
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP PBD
		WHERE PBD.REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Color by Size') AND upper(BATCH_LOGIC)=upper('By GLID and Bill To')
		GROUP BY PBD.INTERNAL_ITEM,PBD.BILL_TO;

	CURSOR CUR_BAT_glbill(pin_item VARCHAR2,P_BILL_TO VARCHAR2)
	IS
		SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=PIN_ITEM AND BILL_TO=P_BILL_TO
		AND upper(BATCHING_TYPE)=upper('Color by Size') AND upper(BATCH_LOGIC)=upper('By GLID and Bill To')
		AND ORDER_NO IS NOT NULL -- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
		AND REQUEST_ID=g_conc_request_id ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR cur_glid_po
	IS
		SELECT PBD.INTERNAL_ITEM,PBD.cust_po
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP PBD
		WHERE PBD.REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Color by Size') AND upper(BATCH_LOGIC)=upper('By GLID and Customer PO')
		GROUP BY PBD.INTERNAL_ITEM,PBD.cust_po;

	CURSOR CUR_BAT_glpo(pin_item VARCHAR2,P_CUST_PO VARCHAR2)
	IS
		SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=PIN_ITEM AND CUST_PO=P_CUST_PO
		AND upper(BATCHING_TYPE)=upper('Color by Size') AND upper(BATCH_LOGIC)=upper('By GLID and Customer PO')
		AND ORDER_NO IS NOT NULL -- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
		AND REQUEST_ID=g_conc_request_id ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR CUR_GLLIN
	IS
		SELECT INTERNAL_ITEM,ORDER_NO,LINE_NO,jobno
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP WHERE REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Color by Size') AND upper(BATCH_LOGIC)=upper('By GLID and Order Line')
		GROUP BY INTERNAL_ITEM, ORDER_NO,LINE_NO,jobno;

	  CURSOR CUR_BAT_GLLIN(pin_item VARCHAR2,P_ORDER_NO NUMBER,pin_line NUMBER,p_jobno VARCHAR2)
	  IS
		SELECT *
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=PIN_ITEM
		AND NVL(ORDER_NO,999)=NVL(P_ORDER_NO,999)
		AND NVL(line_no,999)=NVL(PIN_line,999)
		AND to_char(jobno)=to_char(p_jobno)
		AND upper(BATCHING_TYPE)=upper('Color by Size') AND upper(BATCH_LOGIC)=upper('By GLID and Order Line')
		AND ORDER_NO IS NOT NULL -- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
		and REQUEST_ID=g_conc_request_id ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR CUR_GLOR
	IS
		SELECT INTERNAL_ITEM,TE
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP WHERE REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Color by Size') AND upper(BATCH_LOGIC)=upper('By GLID and OM Order ID')
		GROUP BY INTERNAL_ITEM, TE;

	CURSOR CUR_BAT_GLOR(pin_item VARCHAR2,pin_te VARCHAR2)
	IS
		SELECT *
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=PIN_ITEM AND REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Color by Size') AND upper(BATCH_LOGIC)=upper('By GLID and OM Order ID')
		AND TE       =pin_te
		AND ORDER_NO IS NOT NULL -- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
		ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR CUR_Stk
	IS
		SELECT Stocktype
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		where stocktype is not null AND REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Color by Size') AND upper(BATCH_LOGIC)=upper('By Stock Type')
		GROUP BY Stocktype;

	CURSOR CUR_BAT_Stk(pin_stk VARCHAR2)
	IS
		SELECT *
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE stocktype=pin_stk AND REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Color by Size') AND upper(BATCH_LOGIC)=upper('By Stock Type')
		ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR CUR_Stk_frm
	IS
		SELECT Stocktype,formatname
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP WHERE REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Color by Size') AND upper(BATCH_LOGIC)=upper('By Stock Type and Format')
		GROUP BY Stocktype,formatname;

	CURSOR CUR_BAT_Stkfrm(pin_stk VARCHAR2,pin_formatname VARCHAR2)
	IS
		SELECT *
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE STOCKTYPE=PIN_STK and formatname=pin_formatname
		AND upper(BATCHING_TYPE)=upper('Color by Size') AND upper(BATCH_LOGIC)=upper('By Stock Type and Format')
		AND REQUEST_ID=g_conc_request_id ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023
	CURSOR CUR_GL_ON
	IS
		SELECT INTERNAL_ITEM,ORDER_NO
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP WHERE REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Color by Size')
		AND upper(BATCH_LOGIC)=upper('By GLID and Order Number')
		GROUP BY INTERNAL_ITEM, ORDER_NO;

	CURSOR CUR_BAT_GL_ON(P_INTERNAL_ITEM VARCHAR2,P_ORDER_NO NUMBER)
	IS
		SELECT *
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=P_INTERNAL_ITEM AND REQUEST_ID=g_conc_request_id
		AND ORDER_NO       =P_ORDER_NO AND ORDER_NO IS NOT NULL
		AND upper(BATCHING_TYPE)=upper('Color by Size')
		AND upper(BATCH_LOGIC)=upper('By GLID and Order Number')
		ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;
	--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023

	CURSOR C_SUB_BASEITEM(P_BATCH_NO VARCHAR2)
	IS
		SELECT BASE_ITEM_NUMBER FROM paxar.PX_SUB_BATCH_AUTO_TMP WHERE upper(BATCH_PROGRAM)=upper('Color by Size')
		AND BATCH_NUMBER = P_BATCH_NO
		AND upper(SUBBATCH_LOGIC) = upper('By Base Item')                  ---AND SUBBATCH_LOGIC IN ('By Base Item')  changed by Sarfaraz 04.08.2022
		AND REQUEST_ID=g_conc_request_id
		AND BASE_ITEM_NUMBER IS NOT NULL GROUP BY BASE_ITEM_NUMBER;

	CURSOR CUR_SUB_BAT_BASEITEM(P_BASEITEM VARCHAR2,P_BATCH_NO VARCHAR2)
	IS
		SELECT * FROM paxar.PX_SUB_BATCH_AUTO_TMP
		WHERE BASE_ITEM_NUMBER=P_BASEITEM AND BATCH_NUMBER=P_BATCH_NO
		AND upper(BATCH_PROGRAM)=upper('Color by Size') AND upper(SUBBATCH_LOGIC) = upper('By Base Item')
		AND REQUEST_ID=g_conc_request_id;

	cursor c_split_header(header_data varchar2) is
	SELECT regexp_substr(header_data, '[^|]+', 1, LEVEL) header
	FROM DUAL
	CONNECT BY REGEXP_SUBSTR(header_data, '[^|]+', 1, LEVEL) IS NOT NULL;
/*	SELECT REGEXP_SUBSTR( replace(header_data,'|',','), '([^,]*)(,|$)', 1, LEVEL, NULL, 1 ) header
	FROM   DUAL
	CONNECT BY LEVEL < REGEXP_COUNT( replace(header_data,'|',','), '[^,]*(,|$)' );*/

	cursor c_split_vd(variable_data varchar2) is
	SELECT REGEXP_SUBSTR( replace(variable_data,'|',','), '([^,]*)(,|$)', 1, LEVEL, NULL, 1 ) var_data
	FROM   DUAL
	CONNECT BY LEVEL < REGEXP_COUNT( replace(variable_data,'|',','), '[^,]*(,|$)' );

	cursor c_vf_count(p_order_id varchar2,p_line_id varchar2) is
	select VARIABLE_FIELD_COUNT from px_oe_variable_headers where header_id=p_order_id and line_id=p_line_id and ENTRY_TYPE='I';

	cursor c_get_vf_name(p_iiid varchar2) is
	SELECT FIELD_NAME FROM PX_SPECSHEETS_FMT_TEX_DTLS
	WHERE SPECSHEETS_ID IN (SELECT SPECSHEETS_ID FROM PX_SPECSHEETS_ITEM_V WHERE INVENTORY_ITEM_ID = p_iiid)
	AND LEVEL_TYPE='LINE';

	CURSOR C_CHECK_CBS_SKU(P_HEADER_ID VARCHAR2,P_LINE_ID VARCHAR2) IS
	select count(*) from (select POVD.VARIABLE_DATA1,(select BASE_ITEM_NUMBER from PX_COLOR_BY_SIZES_V where GLID_INVENTORY_ITEM_ID=POVH.INVENTORY_ITEM_ID
	AND organization_id=POVH.SHIP_FROM_ORG_ID and upper(variable_value)=UPPER(POVD.VARIABLE_DATA1)) BASE_ITEM_NUMBER
	from PX_OE_VARIABLE_HEADERS POVH,PX_OE_VARIABLE_DETAILS POVD
	where POVH.HEADER_SEQUENCE_ID = POVD.HEADER_SEQUENCE_ID
	AND POVH.HEADER_ID=P_HEADER_ID and POVH.LINE_ID=P_LINE_ID and POVH.ENTRY_TYPE='I');

	CURSOR C_CHECK_CBS_SKU_Z(P_LINE_ID VARCHAR2,P_IIID VARCHAR2,P_ORG_ID VARCHAR2,P_POS NUMBER) IS
	select count(*) from (select a.VAR_DATA,(select BASE_ITEM_NUMBER from PX_COLOR_BY_SIZES_V where GLID_INVENTORY_ITEM_ID=P_IIID
	and ORGANIZATION_ID=P_ORG_ID and UPPER(VARIABLE_VALUE) = UPPER(a.VAR_DATA)) base_item_number
	from (select PX_AUTO_BATCHING_PKG.GET_VF_VALUE(PCWDL.value,P_POS) VAR_DATA
	from PAXAR.PX_CARE_WOV_HEADERS PCWH,PAXAR.PX_CARE_WOV_DETAIL_LINES PCWDL
	where PCWH.CARE_WOV_ID=PCWDL.CARE_WOV_ID and PCWH.ORDER_LINE_ID=P_LINE_ID
	and PCWDL.sequence!=0) a)
	where base_item_number is null;

	CURSOR C_GET_BT IS
	SELECT DISTINCT BATCH_NUMBER FROM paxar.PX_BATCH_AUTO_SPL_TMP
	WHERE upper(BATCHING_TYPE)=upper('Color by Size') AND SUBBATCH_LOGIC !='NA'
	and REQUEST_ID=g_conc_request_id;	-- Added by Sarfaraz 04.08.2022 get batch_numbers generated by the current request.

	CURSOR CHECK_CBS_BATCH_LOGIC(P_BATCH_LOGIC VARCHAR2) IS
	select count(1)
	from fnd_lookup_values
	where lookup_type='PX_NANSHA_BATCH_SUBBATCH_LOGIC'
	AND language='US'
	AND ENABLED_FLAG='Y'
	AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE))
	AND MEANING LIKE 'CBS%'
	AND DESCRIPTION=P_BATCH_LOGIC;

	CURSOR CHECK_CBS_SUBBATCH_LOGIC(P_SUBBATCH_LOGIC VARCHAR2) IS
	select count(1)
	from fnd_lookup_values
	where lookup_type='PX_NANSHA_BATCH_SUBBATCH_LOGIC'
	AND language='US'
	AND ENABLED_FLAG='Y'
	AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE))
	AND MEANING LIKE 'CBS%'
	AND TAG=P_SUBBATCH_LOGIC;

	L_BL_STATUS NUMBER;
	L_SBL_STATUS NUMBER;

	TYPE C_GET_DATA IS REF CURSOR;
	C_GET_DATA_V C_GET_DATA;

	TYPE px_auto_batch_sols is record
	(
		CUSTOMER_NUMBER         NUMBER ,
		CUSTOMER_NAME           VARCHAR2(1000),
		ORDER_NO                NUMBER         ,
		ORGANIZATION_ID         NUMBER         ,
		LINE_NO                 NUMBER         ,
		INTERNAL_ITEM           VARCHAR2(100)  ,
		INVENTORY_ITEM_ID       NUMBER         ,
		QUANTITY                NUMBER         ,
		UOM                     VARCHAR2(50)   ,
		JOBNO                   VARCHAR2(100)  ,
		ASSEMBLY                VARCHAR2(100)  ,
		JOB_TYPE                VARCHAR2(1000) ,
		JOB_QTY                 NUMBER         ,
		JOBUOM                  VARCHAR2(50)   ,
		JOBSTATUS               VARCHAR2(50)   ,
		TE                      VARCHAR2(100)  ,
		STOCKTYPE               VARCHAR2(100)  ,
		INVENTORYCODE           VARCHAR2(100)  ,
		SYSTEMID                VARCHAR2(100)  ,
		FORMATNAME              VARCHAR2(100)  ,
		REQUESTDATE             DATE           ,
		PROMISEDATE             DATE           ,
		SCHEDULESHIPDATE        DATE           ,
		PLANNERCODE             VARCHAR2(100)  ,
		INVENTORYORG            VARCHAR2(100)  ,
		PRODUCTIONMETHOD        VARCHAR2(100)  ,
		BATCH_STATUS            VARCHAR2(20)   ,
		BATCH_NUMBER            VARCHAR2(100)  ,
		BATCHTYPE               VARCHAR2(100)  ,
		BATCH_CREATED_DATE      DATE           ,
		CREATEDBY               VARCHAR2(1000) ,
		LAST_UPDATED_DATE       DATE           ,
		LAST_UPDATED_BY         VARCHAR2(1000) ,
		RELEASED_DATE           DATE           ,
		TYPESETTING_METHOD      VARCHAR2(1000) ,
		PRESSTYPE               VARCHAR2(1000) ,
		ORDER_HEADER_ID         NUMBER         ,
		ORDER_LINE_ID           NUMBER         ,
		BATCH_LOGIC             VARCHAR2(4000) ,
		SUBBATCH_LOGIC          VARCHAR2(4000) ,
		BILL_TO                 VARCHAR2(4000) ,
		SHIP_TO                 VARCHAR2(4000) ,
		CUST_PO                 VARCHAR2(4000),
		WIP_ENTITY_ID			VARCHAR2(4000),
		OPERATING_UNIT			VARCHAR2(4000),
		ORDER_TYPE				VARCHAR2(4000),
		FSC_CONTENT				VARCHAR2(4000),
		SHIPPING_METHOD			VARCHAR2(4000)	-- Added by Sarfaraz // NS-MOCK2-180 // 10-11-2022
	);

	get_data px_auto_batch_sols;

	--TYPE header_array IS VARRAY(20) of varchar2(4000); -- Commented by Sarfaraz // 18-11-2022
	TYPE header_array IS VARRAY(100) of varchar2(4000);	-- Added by Sarfaraz // 18-11-2022
	ha header_array := header_array();

	--TYPE value_array IS VARRAY(20) of varchar2(4000);	 -- Commented by Sarfaraz // 18-11-2022
	TYPE value_array IS VARRAY(100) of varchar2(4000);  -- Added by Sarfaraz // 18-11-2022
	va value_array := value_array();

	start_of_query long;
	end_of_query long;
	main_query long;
	order_by long;

	object_details_query long;
	L_OPERATOR_LOGIC VARCHAR2(1000);
	L_OBJECT_DETAILS VARCHAR2(1000);
	L_PARAMETER_DETAILS VARCHAR2(1000);
	L_OPERATOR_DETAILS VARCHAR2(1000);
	L_VALUE_FROM_DETAILS VARCHAR2(1000);
	L_VALUE_TO_DETAILS VARCHAR2(1000);
	L_PARAM_COLUMN VARCHAR2(1000);
	L_OPERATOR_VALUE VARCHAR2(1000);

	L_OPERATOR_DETAILS_QUERY LONG;
	L_CF_QUERY LONG;

	final_query long;

	L_VALUE VARCHAR2(1000);
	L_HEADER_ID NUMBER;
	L_HEADER_VALUE VARCHAR2(4000);
	L_VF VARCHAR2(4000);
	L_BATCH_LOGIC VARCHAR2(4000);
	L_SUBBATCH_LOGIC VARCHAR2(4000);
	L_PREFIX VARCHAR2(4000);
	L_SUFFIX VARCHAR2(4000);
	V_BATCH_NUMBER VARCHAR2(10000);
	V_SUB_BATCH_NUMBER VARCHAR2(10000);
	L_VF_POSITION NUMBER;
	L_BASE_ITEM VARCHAR2(4000);
	l_count NUMBER;
	L_SKU_VF_VALUE VARCHAR2(4000) := NULL;
	l_error varchar2(10):='N';
	L_VF_COUNT NUMBER;
	LN_SUBBATCH_COUNTER NUMBER:=0;
	i number;
	j number;
	L_ROWCOUNT NUMBER:=0;
	L_COUNTER NUMBER;
	LV_CC VARCHAR2(4000);
	LV_COMBO VARCHAR2(4000);
	ln_vf_count number;
	ln_vf_counter number;
	lv_sku_form varchar2(1000);
	LN_SKU_COUNT number;

	vf varchar2(100);
	ln_vf_seq number;
	ln_vf_ordered_qty number;

	sql_query varchar2(4000);

	TYPE C_GET_SKU_DATA IS REF CURSOR;
	C_GET_DATA_SKU_V C_GET_SKU_DATA;

    ln_autobatch_header_id Number;            -- Added By Lingaraj
    lv_autobatch_Config      XmlType  ; -- Added By Lingaraj
    ln_rule_cnt                       Number ;   -- Added By Lingaraj
    lv_err_batching_msg      Varchar2(1000);

	-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
	L_SOL_COUNT NUMBER;
	L_MAX_ORDER_QTY NUMBER;
	L_MAX_SKU_QTY NUMBER;
	L_REQUEST_DATE varchar2(2000);
	L_REQUEST_DATE_COUNT NUMBER;
	-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250

	LN_DUP_SKU_CN NUMBER; -- Added by Sarfaraz // 01.03.2023 // NS-PROD-117
	LN_DUPLICATE_COUNT NUMBER; -- Added by Sarfaraz // 01.03.2023 // NS-PROD-117
BEGIN
    pr_log_msg_auto('+----------------------generate_batch_colour_by_size() Called----------------------+');
    -- Get Auto Batch Header ID and Config info
     pr_get_autobatch_config_info(p_request_id => g_conc_request_id,
                                                          p_autobatch_header_id  => ln_autobatch_header_id ,
                                                          p_autobatch_config        => lv_autobatch_Config
                                                          );


	FOR setup_data in C_GET_SETUP(P_HEADER_ID)
	LOOP
		L_HEADER_ID := setup_data.header_id;

		main_query:= 'SELECT customer_number,
						customer_name,
						order_no,
						organization_id,
						line_no,
						internal_item,
						inventory_item_id,
						quantity,
						uom,
						jobno,
						assembly,
						job_type,
						job_qty,
						jobuom,
						jobstatus,
						te,
						stocktype,
						inventorycode,
						systemid,
						formatname,
						requestdate,
						promisedate,
						scheduleshipdate,
						plannercode,
						inventoryorg,
						productionmethod,
						batch_status,
						batch_number,
						batchtype,
						BATCH_CREATED_DATE,
						CREATEDBY,
						LAST_UPDATED_DATE,
						LAST_UPDATED_BY,
						RELEASED_DATE,
						TYPESETTING_METHOD,
						PRESSTYPE,
						ORDER_HEADER_ID,
						ORDER_LINE_ID,
						batch_logic,
						subbatch_logic,
						bill_to,
						ship_to,
						cust_po,
						WIP_ENTITY_ID,
						OPERATING_UNIT,
						ORDER_TYPE,
						FSC_CONTENT,
						SHIPPING_METHOD	-- Added by Sarfaraz // NS-MOCK2-180 // 10-11-2022
						FROM
					  (SELECT null customer_number,
							null customer_name,
							null ORDER_NO,
							ood.organization_id ORGANIZATION_ID,
							null LINE_NO,
							msib.segment1 INTERNAL_ITEM,
							MSIB.INVENTORY_ITEM_ID INVENTORY_ITEM_ID,
							to_number('''') QUANTITY,
							null UOM,
							wdjv.wip_entity_name JOBNO,
							msib.segment1 ASSEMBLY,
							wdjv.job_type_meaning JOB_TYPE,
							wdjv.start_quantity JOB_QTY,
							msib.PRIMARY_UOM_CODE JOBUOM,
							Decode ((SELECT PBD.BATCH_STATUS
								FROM PX_BATCH_DETAILS_TAB PBD
								WHERE 1=1
								AND pbd.jobno     =wdjv.wip_entity_name and rownum=1) ,''Released'',''Released'',wdjv.status_type_disp) JOBSTATUS,
							null TE,
							null STOCKTYPE,
							null INVENTORYCODE,
							null SYSTEMID,
							null FORMATNAME,
							null REQUESTDATE,
							null PROMISEDATE,
							null SCHEDULESHIPDATE,
							msib.planner_code PLANNERCODE,
							ood.organization_code INVENTORYORG,
							mic.category_concat_segs PRODUCTIONMETHOD,
							(SELECT PBD.BATCH_STATUS
							FROM PX_BATCH_DETAILS_TAB PBD
							WHERE 1=1
							AND pbd.jobno     =wdjv.wip_entity_name
							and rownum=1
							UNION
							SELECT ''Open''
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE 1=1
							  AND jobno     =wdjv.wip_entity_name
							  )
							) BATCH_STATUS,
							(SELECT batch_number
							FROM px_batch_details_tab
							WHERE 1=1
							AND jobno     =wdjv.wip_entity_name
							and rownum=1
							UNION
							SELECT '' ''
							FROM dual
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE 1=1
							  AND jobno     =wdjv.wip_entity_name
							  )
							) BATCH_NUMBER,
							(SELECT batchtype
							FROM px_batch_details_tab
							WHERE 1=1
							AND jobno     =wdjv.wip_entity_name
							and rownum=1
							UNION
							SELECT '' ''
							FROM dual
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) BATCHTYPE,
							(SELECT BATCH_CREATED_DATE
							FROM px_batch_details_tab
							WHERE  1=1
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) BATCH_CREATED_DATE,
							(SELECT CReated_By
							FROM px_batch_details_tab
							WHERE  1=1
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) CREATEDBY,
							(SELECT last_updated_date
							FROM px_batch_details_tab
							WHERE  1=1
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) LAST_UPDATED_DATE ,
							(SELECT last_updated_by
							FROM px_batch_details_tab
							WHERE  1=1
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) LAST_UPDATED_BY ,
							(SELECT released_date
							FROM px_batch_details_tab
							WHERE  1=1
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) RELEASED_DATE ,
							(SELECT distinct ELEMENT_VALUE
							FROM px_descr_element_values
							WHERE INVENTORY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
							AND ORGANIZATION_ID    =msib.ORGANIZATION_ID
							AND ELEMENT_NAME        =''Typesetting Method''
							and rownum=1
							) TYPESETTING_METHOD,
							(SELECT distinct ELEMENT_VALUE
							FROM px_descr_element_values
							WHERE INVENTORY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
							AND ORGANIZATION_ID    =msib.ORGANIZATION_ID
							AND ELEMENT_NAME        =''Factory Spec Press Type''
							and rownum=1
							) PRESSTYPE,
							null ORDER_HEADER_ID,
							null ORDER_LINE_ID,
							(select element_value from px_descr_element_values
								where inventory_item_id=MSIB.INVENTORY_ITEM_ID and element_name=''Batch Logic'' and organization_id=msib.ORGANIZATION_ID
								and rownum=1
							) batch_logic,
							(select element_value from px_descr_element_values
								where inventory_item_id=MSIB.INVENTORY_ITEM_ID and element_name=''Subbatch Logic'' and organization_id=msib.ORGANIZATION_ID
								and rownum=1
							) subbatch_logic,
							null bill_to,
							null ship_to,
							null cust_po,
							Wdjv.WIP_ENTITY_ID WIP_ENTITY_ID,
							null OPERATING_UNIT,
							null ORDER_TYPE,
							(select mcb.CONCATENATED_SEGMENTS from
								MTL_ITEM_CATEGORIES mtc,
								MTL_CATEGORIES_B_KFV mcb
								where mcb.category_id=mtc.category_id
								and mtc.category_set_id=''1100000261''
								and mtc.INVENTORY_ITEM_ID=MSIB.inventory_item_id
								and mtc.ORGANIZATION_ID=ood.organization_id) FSC_CONTENT,
							null SHIPPING_METHOD	-- Added by Sarfaraz // NS-MOCK2-180 // 10-11-2022
							FROM
								WIP_DISCRETE_JOBS_V WDJV,MTL_SYSTEM_ITEMS_B MSIB,ORG_ORGANIZATION_DEFINITIONS OOD,MTL_ITEM_CATEGORIES_V MIC
							 WHERE ood.ORGANIZATION_ID IN (SELECT INVENTORY_ORG_ID FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||L_HEADER_ID||')
							AND WDJV.STATUS_TYPE_DISP IN (''Released'',''Unreleased'')
							AND WDJV.PRIMARY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
							AND WDJV.ORGANIZATION_ID=MSIB.ORGANIZATION_ID
							AND WDJV.ORGANIZATION_ID=OOD.ORGANIZATION_ID
							AND MIC.INVENTORY_ITEM_ID     =MSIB.INVENTORY_ITEM_ID
							AND MIC.CATEGORY_SET_NAME     =''Production Methods''
							AND MIC.ORGANIZATION_ID=OOD.ORGANIZATION_ID
							AND nvl(msib.replenish_to_order_flag,''N'') = ''N''
							  and wdjv.wip_entity_name not in (SELECT jobno from PAXAR.PX_BATCH_AUTO_SPL_TMP where jobno=wdjv.wip_entity_name and order_no is null)
				union
					SELECT (SELECT ar.account_number
							FROM hz_cust_accounts ar,
								hz_parties hp,
							oe_order_headers_all ooha
						WHERE ar.cust_account_id      =ooha.sold_to_org_id
						AND ar.party_id               =hp.party_id
						AND OOHA.HEADER_ID=OOLA.HEADER_ID) customer_number,
						(SELECT hp.party_name
						FROM hz_cust_accounts ar,
							hz_parties hp,
							oe_order_headers_all ooha
						WHERE ar.cust_account_id      =ooha.sold_to_org_id
						AND ar.party_id               =hp.party_id
						AND OOHA.HEADER_ID=OOLA.HEADER_ID) customer_name,
						(select order_number from oe_order_headers_all where header_id=oola.header_id) ORDER_NO,
						ood.organization_id ORGANIZATION_ID,
						oola.line_number LINE_NO,
						msib.segment1 INTERNAL_ITEM,
						oola.inventory_item_id INVENTORY_ITEM_ID,
						oola.ordered_quantity QUANTITY,
						oola.order_quantity_uom UOM,
						wdjv.wip_entity_name JOBNO,
						msib.segment1 ASSEMBLY,
						wdjv.job_type_meaning JOB_TYPE,
						wdjv.start_quantity JOB_QTY,
						oola.order_quantity_uom JOBUOM,
						wdjv.status_type_disp JOBSTATUS,
						oola.attribute16 TE,
						oola.attribute2 STOCKTYPE,
						oola.attribute3 INVENTORYCODE,
						oola.attribute4 SYSTEMID,
						oola.attribute5 FORMATNAME,
						oola.request_date REQUESTDATE,
						oola.promise_date PROMISEDATE,
						oola.schedule_ship_date SCHEDULESHIPDATE,
						msib.planner_code PLANNERCODE,
						ood.organization_code INVENTORYORG,
						mic.category_concat_segs PRODUCTIONMETHOD,
						(SELECT PBD.BATCH_STATUS
						FROM PX_BATCH_DETAILS_TAB PBD
						WHERE PBD.ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
						AND PBD.LINE_NO   =OOLA.LINE_NUMBER
						AND pbd.jobno     =wdjv.wip_entity_name
						and rownum=1
						UNION
						SELECT ''Open''
						FROM DUAL
						WHERE NOT EXISTS
						  (SELECT *
						  FROM PX_BATCH_DETAILS_TAB
						  WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
						  AND line_no   =oola.line_number
						  AND jobno     =wdjv.wip_entity_name
						  )
						) BATCH_STATUS,
						(SELECT batch_number
						FROM px_batch_details_tab
						WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
						AND line_no   =oola.line_number
						AND jobno     =wdjv.wip_entity_name
						and rownum=1
						UNION
						SELECT NULL
						FROM dual
						WHERE NOT EXISTS
						  (SELECT *
						  FROM PX_BATCH_DETAILS_TAB
						  WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
						  AND line_no   =oola.line_number
						  AND jobno     =wdjv.wip_entity_name
						  )
						) BATCH_NUMBER,
						(SELECT batchtype
						FROM px_batch_details_tab
						WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
						AND line_no   =oola.line_number
						AND jobno     =wdjv.wip_entity_name
						and rownum=1
						UNION
						SELECT NULL
						FROM dual
						WHERE NOT EXISTS
						  (SELECT *
						  FROM PX_BATCH_DETAILS_TAB
						  WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
						  AND LINE_NO   =OOLA.LINE_NUMBER
						  AND JOBNO     =WDJV.WIP_ENTITY_NAME
						  )
						) BATCHTYPE,
						(SELECT BATCH_CREATED_DATE
						FROM px_batch_details_tab
						WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
						AND LINE_NO   =OOLA.LINE_NUMBER
						AND JOBNO     =WDJV.WIP_ENTITY_NAME
						and rownum=1
						UNION
						SELECT NULL
						FROM DUAL
						WHERE NOT EXISTS
						  (SELECT *
						  FROM PX_BATCH_DETAILS_TAB
						  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
						  AND LINE_NO   =OOLA.LINE_NUMBER
						  AND JOBNO     =WDJV.WIP_ENTITY_NAME
						  )
						) BATCH_CREATED_DATE,
						(SELECT CReated_By
						FROM px_batch_details_tab
						WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
						AND LINE_NO   =OOLA.LINE_NUMBER
						AND JOBNO     =WDJV.WIP_ENTITY_NAME
						and rownum=1
						UNION
						SELECT NULL
						FROM DUAL
						WHERE NOT EXISTS
						  (SELECT *
						  FROM PX_BATCH_DETAILS_TAB
						  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
						  AND LINE_NO   =OOLA.LINE_NUMBER
						  AND JOBNO     =WDJV.WIP_ENTITY_NAME
						  )
						) CREATEDBY,
						(SELECT last_updated_date
						FROM px_batch_details_tab
						WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
						AND LINE_NO   =OOLA.LINE_NUMBER
						AND JOBNO     =WDJV.WIP_ENTITY_NAME
						and rownum=1
						UNION
						SELECT NULL
						FROM DUAL
						WHERE NOT EXISTS
						  (SELECT *
						  FROM PX_BATCH_DETAILS_TAB
						  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
						  AND LINE_NO   =OOLA.LINE_NUMBER
						  AND JOBNO     =WDJV.WIP_ENTITY_NAME
						  )
						) LAST_UPDATED_DATE ,
						(SELECT last_updated_by
						FROM px_batch_details_tab
						WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
						AND LINE_NO   =OOLA.LINE_NUMBER
						AND JOBNO     =WDJV.WIP_ENTITY_NAME
						and rownum=1
						UNION
						SELECT NULL
						FROM DUAL
						WHERE NOT EXISTS
						  (SELECT *
						  FROM PX_BATCH_DETAILS_TAB
						  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
						  AND LINE_NO   =OOLA.LINE_NUMBER
						  AND JOBNO     =WDJV.WIP_ENTITY_NAME
						  )
						) LAST_UPDATED_BY ,
						(SELECT released_date
						FROM px_batch_details_tab
						WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
						AND LINE_NO   =OOLA.LINE_NUMBER
						AND JOBNO     =WDJV.WIP_ENTITY_NAME
						and rownum=1
						UNION
						SELECT NULL
						FROM DUAL
						WHERE NOT EXISTS
						  (SELECT *
						  FROM PX_BATCH_DETAILS_TAB
						  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
						  AND LINE_NO   =OOLA.LINE_NUMBER
						  AND JOBNO     =WDJV.WIP_ENTITY_NAME
						  )
						) RELEASED_DATE ,
						(SELECT ELEMENT_VALUE
						FROM px_descr_element_values
						WHERE INVENTORY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
						AND ORGANIZATION_ID    =msib.ORGANIZATION_ID
						AND ELEMENT_NAME        =''Typesetting Method''
						and rownum=1
						) TYPESETTING_METHOD,
						(SELECT ELEMENT_VALUE
						FROM px_descr_element_values
						WHERE INVENTORY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
						AND ORGANIZATION_ID    =msib.ORGANIZATION_ID
						AND ELEMENT_NAME        =''Factory Spec Press Type''
						and rownum=1
						) PRESSTYPE,
						oola.header_id ORDER_HEADER_ID,
						oola.line_id ORDER_LINE_ID,
						(select element_value from px_descr_element_values
							where inventory_item_id=oola.inventory_item_id and element_name=''Batch Logic'' and organization_id=msib.ORGANIZATION_ID
							and rownum=1
						) batch_logic,
						(select element_value from px_descr_element_values
							where inventory_item_id=oola.inventory_item_id and element_name=''Subbatch Logic'' and organization_id=msib.ORGANIZATION_ID
							and rownum=1
						) subbatch_logic,
						OOLA.INVOICE_TO_ORG_ID bill_to,
						OOLA.SHIP_TO_ORG_ID ship_to,
						OOLA.cust_po_number cust_po,
						Wdjv.WIP_ENTITY_ID WIP_ENTITY_ID,
						(select name from hr_operating_units where organization_id=oola.org_id) OPERATING_UNIT,
								(select otl.NAME from oe_transaction_types_tl otl,oe_order_headers_all ooha
								where otl.TRANSACTION_TYPE_ID=ooha.ORDER_TYPE_ID
								and otl.language= userenv(''LANG'')
								and ooha.header_id=oola.header_id) ORDER_TYPE,
								(select mcb.CONCATENATED_SEGMENTS from
								MTL_ITEM_CATEGORIES mtc,
								MTL_CATEGORIES_B_KFV mcb
								where mcb.category_id=mtc.category_id
								and mtc.category_set_id=''1100000261''
								and mtc.INVENTORY_ITEM_ID=oola.inventory_item_id
								and mtc.ORGANIZATION_ID=ood.organization_id) FSC_CONTENT,
						(SELECT meaning
								FROM FND_LOOKUP_VALUES
								WHERE lookup_type=''SHIP_METHOD''
								AND language     =''US''
								and ENABLED_FLAG=''Y''
								and (END_DATE_ACTIVE is null or TRUNC(END_DATE_ACTIVE)>TRUNC(sysdate) )
								AND LOOKUP_CODE= oola.SHIPPING_METHOD_CODE
								) SHIPPING_METHOD	-- Added by Sarfaraz // NS-MOCK2-180 // 10-11-2022
					  FROM oe_order_lines_all oola,
							mtl_system_items_b msib,
							org_organization_definitions ood,
							WIP_DISCRETE_JOBS_V wdjv,
							mtl_item_categories_v mic,
							MTL_RESERVATIONS MR
					  WHERE oola.inventory_item_id    =msib.inventory_item_id
						and msib.organization_id      =ood.organization_id
						AND oola.FLOW_STATUS_CODE    IN (''PRODUCTION_OPEN'', ''PRODUCTION_PARTIAL'',''SUPPLY_ELIGIBLE'')
						AND OOLA.SHIP_FROM_ORG_ID     =ood.organization_id
						and ood.ORGANIZATION_ID IN (SELECT INVENTORY_ORG_ID FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||L_HEADER_ID||')
						and mic.organization_id       =ood.organization_id
						AND MIC.INVENTORY_ITEM_ID     =MSIB.INVENTORY_ITEM_ID
						AND mic.category_set_name     =''Production Methods''
						AND OOLA.LINE_ID              =MR.DEMAND_SOURCE_LINE_ID
						AND MR.SUPPLY_SOURCE_TYPE_ID  =5
						AND MR.ORGANIZATION_ID=OOD.ORGANIZATION_ID
						AND MR.SUPPLY_SOURCE_HEADER_ID=Wdjv.WIP_ENTITY_ID
						and OOD.ORGANIZATION_ID=WDJV.ORGANIZATION_ID
						AND wdjv.status_type_disp    IN (''Released'',''Unreleased'')
					  AND (SELECT count(*)
                FROM oe_hold_sources_all hs,
                     oe_hold_definitions hd,
                     oe_order_holds_all oh,
                     oe_order_headers_all oha,
                     oe_order_lines_all ola
               WHERE 1 = 1
                 AND hs.hold_id = hd.hold_id
                 AND oh.hold_source_id = hs.hold_source_id
                 AND oh.header_id = oha.header_id
                 AND oha.header_id = ola.header_id
                 AND OH.LINE_ID = OLA.LINE_ID
                 AND OH.ORG_ID = OHA.ORG_ID
				 AND OH.RELEASED_FLAG = ''N''
                 AND HD.TYPE_CODE IN (SELECT meaning
			  FROM FND_LOOKUP_VALUES
			  WHERE lookup_type=''PX_ONT_AUTO_HOLD_EXCEPTION''
			  AND language     =''US''
			  AND ENABLED_FLAG=''Y''
			  AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE) ))
                 AND OLA.HEADER_ID = OOLA.HEADER_ID
                 AND ola.line_id = OOLA.LINE_ID) = 0
					  AND OOLA.HEADER_ID NOT IN (select ORDER_HEADER_ID from PAXAR.PX_BATCH_AUTO_SPL_TMP where order_header_id=OOLA.HEADER_ID and order_line_id=OOLA.LINE_ID AND BATCHING_TYPE=''Color by Size'')';

		end_of_query:='
			)
			  where BATCH_STATUS IN (''Open'',''Unbatched'')
			  --AND ORGANIZATION_ID = (SELECT INVENTORY_ORG_ID FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||L_HEADER_ID||')
			  AND PRESSTYPE  = (SELECT PRESS_TYPE FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||L_HEADER_ID||')
			  AND PX_AUTO_BATCHING_PKG.GET_COLOUR_BY_SIZE_STATUS(INVENTORY_ITEM_ID,ORGANIZATION_ID) = ''Y''';

		order_by := 'ORDER BY REQUESTDATE DESC';

		IF setup_data.CF_SEQ IS NULL THEN
			final_query:=main_query||' '||end_of_query||chr(10)||order_by;
		ELSE
			L_CF_QUERY:= fn_get_autobatch_cf_query(setup_data.CF_SEQ,AUTO_BATCH);
            final_query:=main_query||' '||end_of_query||chr(10)||'  AND  ( '||L_CF_QUERY||' ) '||chr(10)||order_by;
		END IF;

        pr_log_msg_auto('*****************************************************************************************');
        pr_log_msg_auto('Final Query  =======================>' );
         pr_log_msg_auto(final_query );
        pr_log_msg_auto('*****************************************************************************************');



		--fnd_file.put_line(fnd_file.log,final_query);
		L_ROWCOUNT:=0;
        pr_log_msg_auto('Final Query Execution Started.');

        OPEN C_GET_DATA_V FOR final_query;
		LOOP
			l_error := 'N';

			FETCH C_GET_DATA_V INTO get_data;
			EXIT WHEN C_GET_DATA_V%NOTFOUND;
			pr_log_msg_auto('- Records -'||' Order Number: '||get_data.ORDER_NO||' Line Number: '||get_data.LINE_NO||' Item Name: '||get_data.ASSEMBLY);

			L_BATCH_LOGIC := get_data.BATCH_LOGIC;
			L_SUBBATCH_LOGIC := get_data.SUBBATCH_LOGIC;

			-- CHECKING BATCH_LOGIC AND SUBBATCH_LOGIC IS NULL
			IF L_BATCH_LOGIC IS NULL OR L_SUBBATCH_LOGIC IS NULL
            THEN
                 lv_err_batching_msg :=  'Batch Logic Or Subbatch Logic is Null';
				fnd_file.put_line(fnd_file.log,'ERROR');
				fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
				fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
				fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
				fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
				fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
                pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>         get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   => 'Color by Size'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );

				l_error := 'Y';
			ELSE
				-- CHECKING BATCH_LOGIC AND SUBBATCH_LOGIC IS VALID FOR CBS
				OPEN CHECK_CBS_BATCH_LOGIC(L_BATCH_LOGIC);
				FETCH CHECK_CBS_BATCH_LOGIC INTO L_BL_STATUS;
				CLOSE CHECK_CBS_BATCH_LOGIC;

				OPEN CHECK_CBS_SUBBATCH_LOGIC(L_SUBBATCH_LOGIC);
				FETCH CHECK_CBS_SUBBATCH_LOGIC INTO L_SBL_STATUS;
				CLOSE CHECK_CBS_SUBBATCH_LOGIC;

				--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023
				IF upper(L_BATCH_LOGIC)=upper('By GLID and Order Number') AND get_data.ORDER_NO IS NULL
				THEN
					lv_err_batching_msg :=  'We cannot execute ''By GLID and Order Number'' batch logic for these NON-ATO DJ''s';
					fnd_file.put_line(fnd_file.log,'ERROR');
					fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
					fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
					fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
					fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
					fnd_file.put_line(fnd_file.log,'Error Message:  '|| lv_err_batching_msg);

					pr_insert_Batch_error_record
                                            ( p_order_number     => get_data.ORDER_NO
												,p_line_no                 =>  get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   => 'Color by Size'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                ,p_productionmethod =>get_data.productionmethod
                                            );
					l_error := 'Y';
				--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023
				--- Added by Sarfaraz // NS-MOCK2-117 // 01.03.2023
				ELSIF upper(L_BATCH_LOGIC) IN (upper('By Prefix, RB & Format'),upper('By Stock Type and Format'))
						AND get_data.ORDER_NO IS NOT NULL
						AND get_data.FORMATNAME IS NULL
				THEN
					lv_err_batching_msg :=  'The Format Name is null, cannot execute Auto Batching ';
					fnd_file.put_line(fnd_file.log,'ERROR');
					fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
					fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
					fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
					fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
					fnd_file.put_line(fnd_file.log,'Error Message:  '|| lv_err_batching_msg);

					pr_insert_Batch_error_record
											( p_order_number     => get_data.ORDER_NO
												,p_line_no                 =>  get_data.LINE_NO
												,p_error_msg            =>   lv_err_batching_msg
												,p_batch_program   => 'Color by Size'
												,p_customer_name  =>  get_data.customer_name
												,p_assembly             =>    get_data.assembly
												,p_quantity               =>     get_data.quantity
												,p_presstype             =>   get_data.presstype
												,p_jobno                    =>   get_data.jobno
												,p_organization_code   =>      get_data.inventoryorg
												,p_productionmethod =>get_data.productionmethod
											);
					l_error := 'Y';
				--- Added by Sarfaraz // NS-MOCK2-117 // 01.03.2023
				ELSIF L_BL_STATUS = 0  OR L_SBL_STATUS = 0 THEN
					-- CHECK FOR COPY CHANGE AND COMBO FLAG
					LV_CC := GET_COPY_CHANGE_STATUS(get_data.INVENTORY_ITEM_ID,get_data.ORGANIZATION_ID);
					LV_COMBO := GET_COMBO_STATUS(get_data.INVENTORY_ITEM_ID,get_data.ORGANIZATION_ID);

					IF LV_CC = 'Y' THEN
						l_error := 'Y';
					END IF;

					IF LV_COMBO IN (UPPER('COMBO'),UPPER('VIPS AUTOBATCH')) THEN
						l_error := 'Y';
					END IF;

					IF l_error = 'N'
                    THEN
                        lv_err_batching_msg :=  'Batch Logic Or Subbatch Logic is not in the Colour By Size Scenario';
						fnd_file.put_line(fnd_file.log,'ERROR');
						fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
						fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
						fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
						fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
						fnd_file.put_line(fnd_file.log,'Error Message:  '|| lv_err_batching_msg);

						pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>  get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   => 'Color by Size'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );
						l_error := 'Y';
					END IF; -- IF l_error = 'N' THEN
				ELSE
					IF L_SUBBATCH_LOGIC != UPPER('NA')  AND get_data.ORDER_NO IS NOT NULL THEN
						OPEN C_GET_VF_COUNT(get_data.INVENTORY_ITEM_ID,setup_data.INVENTORY_ORG_ID);
						FETCH C_GET_VF_COUNT INTO L_VF_COUNT;
						CLOSE C_GET_VF_COUNT;

						fnd_file.put_line(fnd_file.log,L_VF_COUNT);

						-- CHECHING AD COLOUR BY SIZE FORM,VARIABLE FIELD CONTAINS UNIQUE VALUE.
						IF L_VF_COUNT > 1 OR L_VF_COUNT = 0
                        THEN
                            lv_err_batching_msg := 'The Variable Field Value in the AD Colour By Size Form does not contain unique value or is empty';
							fnd_file.put_line(fnd_file.log,'ERROR');
							fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
							fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
							fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
							fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
							fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
							pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>  get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   => 'Color by Size'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );
							l_error := 'Y';
						ELSE
							OPEN C_GET_VF(get_data.INVENTORY_ITEM_ID,setup_data.INVENTORY_ORG_ID);
							FETCH C_GET_VF INTO L_VF;
							CLOSE C_GET_VF;

							fnd_file.put_line(fnd_file.log,'CBS:'||L_VF);

							L_HEADER_VALUE:=NULL;
							OPEN C_GET_SKU_HEADER_DT(get_data.ORDER_NO,get_data.LINE_NO);
							FETCH C_GET_SKU_HEADER_DT INTO L_HEADER_VALUE;
							CLOSE C_GET_SKU_HEADER_DT;

							IF L_HEADER_VALUE IS NULL THEN
								-- Get Variable Field Count.
								OPEN c_vf_count(get_data.ORDER_HEADER_ID,get_data.ORDER_LINE_ID);
								FETCH c_vf_count into ln_vf_count;
								CLOSE c_vf_count;

								IF ln_vf_count = 0 or ln_vf_count IS NULL THEN
									L_VF_POSITION := NULL;
								ELSE
									-- Get Variable Field Name.
									ln_vf_counter := 0;
									FOR get_fv IN c_get_vf_name(get_data.INVENTORY_ITEM_ID)
									LOOP
										ln_vf_counter := ln_vf_counter + 1;
										IF upper(get_fv.FIELD_NAME) = upper(L_VF) THEN  -- -- Added upper for NS-PROD-183
											L_VF_POSITION := ln_vf_counter;
											lv_sku_form := 'Capture Form';
										END IF;
									END LOOP;
								END IF; -- IF ln_vf_count = 0 or ln_vf_count IS NULL THEN
								fnd_file.put_line(fnd_file.log,'L_VF_POSITION: '||L_VF_POSITION);
							ELSE
								fnd_file.put_line(fnd_file.log,L_HEADER_VALUE);

								ha.DELETE();
								/*l_count:=0;
								select NVL(REGEXP_COUNT(L_HEADER_VALUE,'[^~]+'),0) into l_count from dual;
								for i in 1..l_count
								loop
									ha.extend();
									select substr(L_HEADER_VALUE,
										decode(i,1,1,Instr(L_HEADER_VALUE, '~', 1, i-1)+1),
										decode(i,l_count,length(L_HEADER_VALUE)+1,Instr(L_HEADER_VALUE, '~', 1, i))-(decode(i,1,1,Instr(L_HEADER_VALUE, '~', 1, i-1)+1)))
										into ha(i)	 from dual;
								end loop;*/

								for c1 in c_split_header(L_HEADER_VALUE)
								loop
									ha.extend();
									ha(ha.last) := c1.header;
								end loop;

								L_VF_POSITION := NULL;
								IF ha.count > 0 THEN
									for j in 1..ha.count
									loop
										IF upper(ha(j))= upper(L_VF) THEN -- Added upper for NS-PROD-183
											L_VF_POSITION := j;
											lv_sku_form := 'Zoom Form';
										END IF;
									end loop;
								END IF; -- IF ha.count > 0 THEN

								fnd_file.put_line(fnd_file.log,'L_VF_POSITION: '||L_VF_POSITION);
							END IF; -- IF L_HEADER_VALUE IS NULL THEN

							-- CHECHING IF VARIABLE FIELD VALUE IS PRESENT IN SKU HEADER VALUE.
							IF L_VF_POSITION IS NULL THEN
                                lv_err_batching_msg :=    'Variable Data Header Value does not contain the Variable Field Value From the AD Colour By Size Form.' ;
								fnd_file.put_line(fnd_file.log,'ERROR');
								fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
								fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
								fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
								fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
								fnd_file.put_line(fnd_file.log,'Error Message:  '|| lv_err_batching_msg );
								pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>  get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   => 'Color by Size'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );

								l_error := 'Y';
							ELSE
								-- Added by Sarfaraz // 01.03.2023 // NS-PROD-117
								LN_DUP_SKU_CN := 0;
								FOR REC IN (select PX_AUTO_BATCHING_PKG.GET_VF_VALUE(PCWDL.value,L_VF_POSITION) VAR_DATA
											from PAXAR.PX_CARE_WOV_HEADERS PCWH,PAXAR.PX_CARE_WOV_DETAIL_LINES PCWDL
											where PCWH.CARE_WOV_ID=PCWDL.CARE_WOV_ID and PCWH.ORDER_LINE_ID=get_data.ORDER_LINE_ID
											and PCWDL.sequence!=0)
								LOOP
									LN_DUPLICATE_COUNT := 0;
									BEGIN
										select count(BASE_ITEM_NUMBER) INTO LN_DUPLICATE_COUNT from apps.PX_COLOR_BY_SIZES_V
										where GLID_INVENTORY_ITEM_ID=get_data.INVENTORY_ITEM_ID
										and ORGANIZATION_ID=setup_data.INVENTORY_ORG_ID and UPPER(VARIABLE_VALUE)=UPPER(REC.VAR_DATA); -- Added by Sarfaraz // 17-04-2023
									EXCEPTION
										WHEN OTHERS THEN
											LN_DUPLICATE_COUNT := 1;
									END;

									IF LN_DUPLICATE_COUNT > 1 THEN
										LN_DUP_SKU_CN := LN_DUP_SKU_CN + 1;
									END IF;
								END LOOP;

								IF LN_DUP_SKU_CN !=0 THEN
									lv_err_batching_msg := 'Duplicated Base Items of the same Variable Field Value' ;
									fnd_file.put_line(fnd_file.log,'ERROR');
									fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
									fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
									fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
									fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
									fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
									pr_insert_Batch_error_record
												( p_order_number     => get_data.ORDER_NO
													,p_line_no                 =>  get_data.LINE_NO
													,p_error_msg            =>   lv_err_batching_msg
													,p_batch_program   => 'Color by Size'
													,p_customer_name  =>  get_data.customer_name
													,p_assembly             =>    get_data.assembly
													,p_quantity               =>     get_data.quantity
													,p_presstype             =>   get_data.presstype
													,p_jobno                    =>   get_data.jobno
													,p_organization_code   =>      get_data.inventoryorg
													 ,p_productionmethod =>get_data.productionmethod
												);
									l_error := 'Y';
								ELSE
									-- Added by Sarfaraz // 01.03.2023 // NS-PROD-117
									fnd_file.put_line(fnd_file.log,'SKU Form:'||lv_sku_form);

									IF upper(lv_sku_form) = upper('Zoom Form') Then
										OPEN C_CHECK_CBS_SKU_Z(get_data.ORDER_LINE_ID,get_data.INVENTORY_ITEM_ID,setup_data.INVENTORY_ORG_ID,L_VF_POSITION);
										FETCH C_CHECK_CBS_SKU_Z INTO LN_SKU_COUNT;
										CLOSE C_CHECK_CBS_SKU_Z;
									END IF;

									IF upper(lv_sku_form) = upper('Capture Form') THEN
									-- Commented by Sarfaraz // NS-MOCK2-157 // 02-11-2022
									/*	OPEN C_CHECK_CBS_SKU(get_data.ORDER_HEADER_ID,get_data.ORDER_LINE_ID);
										FETCH C_CHECK_CBS_SKU INTO LN_SKU_COUNT;
										CLOSE C_CHECK_CBS_SKU;*/
									-- Commented by Sarfaraz // NS-MOCK2-157 // 02-11-2022
										LN_SKU_COUNT := PX_AUTO_BATCHING_PKG.CHECK_CBS_SKU(L_VF_POSITION,get_data.INVENTORY_ITEM_ID,setup_data.INVENTORY_ORG_ID,get_data.ORDER_HEADER_ID,get_data.ORDER_LINE_ID);	-- Added by Sarfaraz // NS-MOCK2-157 // 02-11-2022
									END IF;

									IF LN_SKU_COUNT != 0 THEN
										lv_err_batching_msg := 'SKU Information does not match with CBS Form Information' ;
										fnd_file.put_line(fnd_file.log,'ERROR');
										fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
										fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
										fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
										fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
										fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
										pr_insert_Batch_error_record
												  ( p_order_number     => get_data.ORDER_NO
													,p_line_no                 =>  get_data.LINE_NO
													,p_error_msg            =>   lv_err_batching_msg
													,p_batch_program   => 'Color by Size'
													,p_customer_name  =>  get_data.customer_name
													,p_assembly             =>    get_data.assembly
													,p_quantity               =>     get_data.quantity
													,p_presstype             =>   get_data.presstype
													,p_jobno                    =>   get_data.jobno
													,p_organization_code   =>      get_data.inventoryorg
													 ,p_productionmethod =>get_data.productionmethod
												  );
										l_error := 'Y';
									END IF; -- IF LN_SKU_COUNT != 0 THEN
								END IF; -- IF LN_DUPLICATE_CN !=0 THEN
							END IF; -- IF L_VF_POSITION IS NULL THEN
						END IF; -- IF L_VF_COUNT > 1 OR L_VF_COUNT = 0 THEN
					END IF; -- IF L_SUBBATCH_LOGIC != UPPER('NA') AND get_date.ORDER_NO IS NOT NULL THEN
				END IF; -- Check Batch and Sub-batch Logic check.
			END IF; --IF L_BATCH_LOGIC IS NULL OR L_SUBBATCH_LOGIC IS NULL THEN

			IF  get_data.quantity > setup_data.MAX_QTY_PER_BATCH OR get_data.JOB_QTY > setup_data.MAX_QTY_PER_BATCH
			THEN
                lv_err_batching_msg :=  'The order quantity is over the ''Max Qty Per Batch'' in auto batching rule';
				fnd_file.put_line(fnd_file.log,'ERROR');
				fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
				fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
				fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
				fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
				fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
                pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>         get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   => 'Color by Size'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );
				l_error := 'Y';
			ELSIF GET_SKU_QTY(get_data.ORDER_LINE_ID) > setup_data.MAX_SKU_PER_BATCH and get_data.ORDER_NO IS NOT NULL
			THEN
                 lv_err_batching_msg :=  'The order SKU# is over the ''Max SKU Per Batch'' in auto batching rule';
				fnd_file.put_line(fnd_file.log,'ERROR');
				fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
				fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
				fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
				fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
				fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
                pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>         get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   => 'Color by Size'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );
				l_error := 'Y';
			END IF;

			fnd_file.put_line(fnd_file.log,'Error Status: '||l_error);
			IF l_error = 'N' THEN
				OPEN C_GET_PREFIX(get_data.INVENTORY_ITEM_ID,setup_data.INVENTORY_ORG_ID);
				FETCH C_GET_PREFIX INTO L_PREFIX,L_SUFFIX;
				CLOSE C_GET_PREFIX;

				INSERT INTO PAXAR.PX_BATCH_AUTO_SPL_TMP(
					CUSTOMER_NUMBER,
					CUSTOMER_NAME,
					ORDER_NO,
					LINE_NO,
					INTERNAL_ITEM,
					QUANTITY,
					UOM,
					JOBNO,
					ASSEMBLY,
					JOB_QTY,
					JOBUOM,
					JOBSTATUS,
					TE,
					STOCKTYPE,
					INVENTORYCODE,
					SYSTEMID,
					FORMATNAME,
					REQUESTDATE,
					PROMISEDATE,
					SCHEDULESHIPDATE,
					PLANNERCODE,
					INVENTORYORG,
					PRODUCTIONMETHOD,
					BATCH_STATUS,
					BATCH_NUMBER,
					BATCHTYPE,
					BATCH_CREATED_DATE,
					CREATEDBY,
					LAST_UPDATED_DATE,
					LAST_UPDATED_BY,
					RELEASED_DATE,
					TYPESETTING_METHOD,
					PRESSTYPE,
					ORDER_HEADER_ID,
					ORDER_LINE_ID,
					REQUEST_ID,
					INVENTORY_ITEM_ID,
					ITEM_PREFIX,
					BATCH_LOGIC,
					SUBBATCH_LOGIC,
					BATCHING_TYPE,
					WIP_ENTITY_ID,
					BILL_TO,
					SHIP_TO,
					CUST_PO,
					OPERATING_UNIT,
					ORDER_TYPE,
					FSC_CONTENT
				)
				VALUES(
					get_data.CUSTOMER_NUMBER,
					get_data.CUSTOMER_NAME,
					get_data.ORDER_NO,
					get_data.LINE_NO,
					get_data.INTERNAL_ITEM,
					get_data.QUANTITY,
					get_data.UOM,
					get_data.JOBNO,
					get_data.ASSEMBLY,
					get_data.JOB_QTY,
					get_data.JOBUOM,
					get_data.JOBSTATUS,
					get_data.TE,
					get_data.STOCKTYPE,
					get_data.INVENTORYCODE,
					get_data.SYSTEMID,
					get_data.FORMATNAME,
					get_data.REQUESTDATE,
					get_data.PROMISEDATE,
					get_data.SCHEDULESHIPDATE,
					get_data.PLANNERCODE,
					get_data.INVENTORYORG,
					get_data.PRODUCTIONMETHOD,
					get_data.BATCH_STATUS,
					get_data.BATCH_NUMBER,
					'Auto',
					get_data.BATCH_CREATED_DATE,
					get_data.CREATEDBY,
					get_data.LAST_UPDATED_DATE,
					get_data.LAST_UPDATED_BY,
					get_data.RELEASED_DATE,
					get_data.TYPESETTING_METHOD,
					get_data.PRESSTYPE,
					get_data.ORDER_HEADER_ID,
					get_data.ORDER_LINE_ID,
					g_conc_request_id,
					get_data.INVENTORY_ITEM_ID,
					L_PREFIX,
					L_BATCH_LOGIC,
					L_SUBBATCH_LOGIC,
					'Color by Size',
					get_data.WIP_ENTITY_ID,
					get_data.BILL_TO,
					get_data.SHIP_TO,
					get_data.CUST_PO,
					get_data.OPERATING_UNIT,
					get_data.ORDER_TYPE,
					get_data.FSC_CONTENT
				);

				INSERT INTO PAXAR.PX_BATCH_AUTO_SPL_TMP_NEW(
					CUSTOMER_NUMBER,
					CUSTOMER_NAME,
					ORDER_NO,
					LINE_NO,
					INTERNAL_ITEM,
					QUANTITY,
					UOM,
					JOBNO,
					ASSEMBLY,
					JOB_QTY,
					JOBUOM,
					JOBSTATUS,
					TE,
					STOCKTYPE,
					INVENTORYCODE,
					SYSTEMID,
					FORMATNAME,
					REQUESTDATE,
					PROMISEDATE,
					SCHEDULESHIPDATE,
					PLANNERCODE,
					INVENTORYORG,
					PRODUCTIONMETHOD,
					BATCH_STATUS,
					BATCH_NUMBER,
					BATCHTYPE,
					BATCH_CREATED_DATE,
					CREATEDBY,
					LAST_UPDATED_DATE,
					LAST_UPDATED_BY,
					RELEASED_DATE,
					TYPESETTING_METHOD,
					PRESSTYPE,
					ORDER_HEADER_ID,
					ORDER_LINE_ID,
					REQUEST_ID,
					INVENTORY_ITEM_ID,
					ITEM_PREFIX,
					BATCH_LOGIC,
					SUBBATCH_LOGIC,
					BATCHING_TYPE,
					WIP_ENTITY_ID,
					BILL_TO,
					SHIP_TO,
					CUST_PO,
					OPERATING_UNIT,
					ORDER_TYPE,
					FSC_CONTENT
				)
				VALUES(
					get_data.CUSTOMER_NUMBER,
					get_data.CUSTOMER_NAME,
					get_data.ORDER_NO,
					get_data.LINE_NO,
					get_data.INTERNAL_ITEM,
					get_data.QUANTITY,
					get_data.UOM,
					get_data.JOBNO,
					get_data.ASSEMBLY,
					get_data.JOB_QTY,
					get_data.JOBUOM,
					get_data.JOBSTATUS,
					get_data.TE,
					get_data.STOCKTYPE,
					get_data.INVENTORYCODE,
					get_data.SYSTEMID,
					get_data.FORMATNAME,
					get_data.REQUESTDATE,
					get_data.PROMISEDATE,
					get_data.SCHEDULESHIPDATE,
					get_data.PLANNERCODE,
					get_data.INVENTORYORG,
					get_data.PRODUCTIONMETHOD,
					get_data.BATCH_STATUS,
					get_data.BATCH_NUMBER,
					'Auto',
					get_data.BATCH_CREATED_DATE,
					get_data.CREATEDBY,
					get_data.LAST_UPDATED_DATE,
					get_data.LAST_UPDATED_BY,
					get_data.RELEASED_DATE,
					get_data.TYPESETTING_METHOD,
					get_data.PRESSTYPE,
					get_data.ORDER_HEADER_ID,
					get_data.ORDER_LINE_ID,
					g_conc_request_id,
					get_data.INVENTORY_ITEM_ID,
					L_PREFIX,
					L_BATCH_LOGIC,
					L_SUBBATCH_LOGIC,
					'Color by Size',
					get_data.WIP_ENTITY_ID,
					get_data.BILL_TO,
					get_data.SHIP_TO,
					get_data.CUST_PO,
					get_data.OPERATING_UNIT,
					get_data.ORDER_TYPE,
					get_data.FSC_CONTENT
				);

				L_ROWCOUNT:=L_ROWCOUNT+1;


				IF L_SUBBATCH_LOGIC != upper('NA') THEN
					fnd_file.put_line(fnd_file.log,get_data.ORDER_NO||' '||get_data.LINE_NO);
					IF upper(lv_sku_form) = upper('Zoom Form') Then
						FOR get_sku_data IN C_GET_SKU_DT(get_data.ORDER_NO,get_data.LINE_NO)
						LOOP
							va.DELETE();


							/*select NVL(REGEXP_COUNT(trim(get_sku_data.VALUE),'[^~]+'),0) into l_count from dual;
							for i in 1..l_count
							loop
								va.extend();
								select substr(get_sku_data.VALUE,
									decode(i,1,1,Instr(get_sku_data.VALUE, '~', 1, i-1)+1),
									decode(i,l_count,length(get_sku_data.VALUE)+1,Instr(get_sku_data.VALUE, '~', 1, i))-(decode(i,1,1,Instr(get_sku_data.VALUE, '~', 1, i-1)+1)))
									into va(i) from dual;
							end loop;*/
					-- Commented by Sarfaraz // NS-PROD-183 // 09-02-2023
							/*for c2 in c_split_vd(get_sku_data.VALUE)
							loop
								va.extend();
								va(va.last) := c2.var_data;
							end loop;

							fnd_file.put_line(fnd_file.log,va.count);*/
					-- Commented by Sarfaraz // NS-PROD-183 // 09-02-2023

					-- Added by Sarfaraz // NS-PROD-183 // 09-02-2023
							L_SKU_VF_VALUE := GET_VF_VALUE(get_sku_data.VALUE,L_VF_POSITION);
							fnd_file.put_line(fnd_file.log,L_SKU_VF_VALUE);
							--IF va.count != 0 THEN -- Commented by Sarfaraz // NS-PROD-183 // 09-02-2023
							IF L_SKU_VF_VALUE IS NOT NULL THEN
					-- Added by Sarfaraz // NS-PROD-183 // 09-02-2023
							--L_SKU_VF_VALUE := va(L_VF_POSITION); -- Commented by Sarfaraz // NS-PROD-183 // 09-02-2023

							OPEN C_GET_BASE_ITEM(get_data.INVENTORY_ITEM_ID,setup_data.INVENTORY_ORG_ID,L_SKU_VF_VALUE);
							FETCH C_GET_BASE_ITEM INTO L_BASE_ITEM;
							CLOSE C_GET_BASE_ITEM;

							INSERT INTO paxar.PX_SUB_BATCH_AUTO_TMP(
								CUSTOMER_NUMBER,
								CUSTOMER_NAME,
								ORDER_NO,
								LINE_NO,
								INTERNAL_ITEM,
								UOM,
								JOBNO,
								ASSEMBLY,
								JOBSTATUS,
								FORMATNAME,
								PRODUCTIONMETHOD,
								BATCH_CREATED_DATE,
								CREATEDBY,
								LAST_UPDATED_DATE,
								LAST_UPDATED_BY,
								TYPESETTING_METHOD,
								BATCH_LOGIC,
								SUBBATCH_LOGIC,
								SEQ,
								SKU_VALUE,
								SKU_QTY,
								BASE_ITEM_NUMBER,
								BATCH_PROGRAM,
								SKU_VF_VALUE,
								ITEM_PREFIX,
								REQUEST_ID,
								PRESSTYPE,
								QUANTITY,
								INVENTORYORG,
								TE,
								STOCKTYPE,
								INVENTORYCODE,
								SYSTEMID,
								REQUESTDATE,
								PROMISEDATE,
								SCHEDULESHIPDATE,
								PLANNERCODE,
								JOB_QTY,
								JOBUOM,
								ORDER_HEADER_ID,
								ORDER_LINE_ID,
								WIP_ENTITY_ID,
								VARIABLE_NAME,
								ITEM_SUFFIX,
								BATCHTYPE
							)
							VALUES
							(
								get_data.CUSTOMER_NUMBER,
								get_data.CUSTOMER_NAME,
								get_data.ORDER_NO,
								get_data.LINE_NO,
								get_data.INTERNAL_ITEM,
								get_data.UOM,
								get_data.JOBNO,
								get_data.ASSEMBLY,
								get_data.JOBSTATUS,
								get_data.FORMATNAME,
								get_data.PRODUCTIONMETHOD,
								get_data.BATCH_CREATED_DATE,
								get_data.CREATEDBY,
								get_data.LAST_UPDATED_DATE,
								get_data.LAST_UPDATED_BY,
								get_data.TYPESETTING_METHOD,
								L_BATCH_LOGIC,
								L_SUBBATCH_LOGIC,
								get_sku_data.SEQUENCE,
								get_sku_data.value,
								get_sku_data.QTY,
								L_BASE_ITEM,
								'Color by Size',
								L_SKU_VF_VALUE,
								L_PREFIX,
								g_conc_request_id,
								get_data.PRESSTYPE,
								get_data.QUANTITY,
								get_data.INVENTORYORG,
								get_data.TE,
								get_data.STOCKTYPE,
								get_data.INVENTORYCODE,
								get_data.SYSTEMID,
								get_data.REQUESTDATE,
								get_data.PROMISEDATE,
								get_data.SCHEDULESHIPDATE,
								get_data.PLANNERCODE,
								get_data.JOB_QTY,
								get_data.JOBUOM,
								get_data.ORDER_HEADER_ID,
								get_data.ORDER_LINE_ID,
								get_data.WIP_ENTITY_ID,
								L_VF,
								L_SUFFIX,
								'Auto'
							);

							INSERT INTO paxar.PX_SUB_BATCH_AUTO_TMP_NEW(
								CUSTOMER_NUMBER,
								CUSTOMER_NAME,
								ORDER_NO,
								LINE_NO,
								INTERNAL_ITEM,
								UOM,
								JOBNO,
								ASSEMBLY,
								JOBSTATUS,
								FORMATNAME,
								PRODUCTIONMETHOD,
								BATCH_CREATED_DATE,
								CREATEDBY,
								LAST_UPDATED_DATE,
								LAST_UPDATED_BY,
								TYPESETTING_METHOD,
								BATCH_LOGIC,
								SUBBATCH_LOGIC,
								SEQ,
								SKU_VALUE,
								SKU_QTY,
								BASE_ITEM_NUMBER,
								BATCH_PROGRAM,
								SKU_VF_VALUE,
								ITEM_PREFIX,
								REQUEST_ID,
								PRESSTYPE,
								QUANTITY,
								INVENTORYORG,
								TE,
								STOCKTYPE,
								INVENTORYCODE,
								SYSTEMID,
								REQUESTDATE,
								PROMISEDATE,
								SCHEDULESHIPDATE,
								PLANNERCODE,
								JOB_QTY,
								JOBUOM,
								ORDER_HEADER_ID,
								ORDER_LINE_ID,
								WIP_ENTITY_ID,
								VARIABLE_NAME,
								ITEM_SUFFIX,
								BATCHTYPE
							)
							VALUES
							(
								get_data.CUSTOMER_NUMBER,
								get_data.CUSTOMER_NAME,
								get_data.ORDER_NO,
								get_data.LINE_NO,
								get_data.INTERNAL_ITEM,
								get_data.UOM,
								get_data.JOBNO,
								get_data.ASSEMBLY,
								get_data.JOBSTATUS,
								get_data.FORMATNAME,
								get_data.PRODUCTIONMETHOD,
								get_data.BATCH_CREATED_DATE,
								get_data.CREATEDBY,
								get_data.LAST_UPDATED_DATE,
								get_data.LAST_UPDATED_BY,
								get_data.TYPESETTING_METHOD,
								L_BATCH_LOGIC,
								L_SUBBATCH_LOGIC,
								get_sku_data.SEQUENCE,
								get_sku_data.value,
								get_sku_data.QTY,
								L_BASE_ITEM,
								'Color by Size',
								L_SKU_VF_VALUE,
								L_PREFIX,
								g_conc_request_id,
								get_data.PRESSTYPE,
								get_data.QUANTITY,
								get_data.INVENTORYORG,
								get_data.TE,
								get_data.STOCKTYPE,
								get_data.INVENTORYCODE,
								get_data.SYSTEMID,
								get_data.REQUESTDATE,
								get_data.PROMISEDATE,
								get_data.SCHEDULESHIPDATE,
								get_data.PLANNERCODE,
								get_data.JOB_QTY,
								get_data.JOBUOM,
								get_data.ORDER_HEADER_ID,
								get_data.ORDER_LINE_ID,
								get_data.WIP_ENTITY_ID,
								L_VF,
								L_SUFFIX,
								'Auto'
							);

							END IF;
						END LOOP;
					END IF;

					IF upper(lv_sku_form) = upper('Capture Form') THEN
						-- Get the SKU data and Base Item.
						vf := 'VARIABLE_DATA'||L_VF_POSITION;
						sql_query := 'select SEQUENCE_NUMBER,ORDERED_QUANTITY,'||vf||' from px_oe_variable_details
						where header_sequence_id=(select header_sequence_id from px_oe_variable_headers
						where header_id='||get_data.ORDER_HEADER_ID||' and line_id='||get_data.ORDER_LINE_ID||' and entry_type=''I'')';

						fnd_file.put_line(fnd_file.log,'vf value: '||vf);
						fnd_file.put_line(fnd_file.log,'sql_query value: '||sql_query);

						open C_GET_DATA_SKU_V for sql_query;
						loop
							fetch C_GET_DATA_SKU_V into ln_vf_seq,ln_vf_ordered_qty,L_SKU_VF_VALUE;
							exit when C_GET_DATA_SKU_V%notfound;

							L_BASE_ITEM := NULL;
							OPEN C_GET_BASE_ITEM(get_data.INVENTORY_ITEM_ID,setup_data.INVENTORY_ORG_ID,L_SKU_VF_VALUE);
							FETCH C_GET_BASE_ITEM INTO L_BASE_ITEM;
							CLOSE C_GET_BASE_ITEM;

							fnd_file.put_line(fnd_file.log,L_SKU_VF_VALUE||' '||L_BASE_ITEM);

							INSERT INTO paxar.PX_SUB_BATCH_AUTO_TMP(
								CUSTOMER_NUMBER,
								CUSTOMER_NAME,
								ORDER_NO,
								LINE_NO,
								INTERNAL_ITEM,
								UOM,
								JOBNO,
								ASSEMBLY,
								JOBSTATUS,
								FORMATNAME,
								PRODUCTIONMETHOD,
								BATCH_CREATED_DATE,
								CREATEDBY,
								LAST_UPDATED_DATE,
								LAST_UPDATED_BY,
								TYPESETTING_METHOD,
								BATCH_LOGIC,
								SUBBATCH_LOGIC,
								SEQ,
								SKU_VALUE,
								SKU_QTY,
								BASE_ITEM_NUMBER,
								BATCH_PROGRAM,
								SKU_VF_VALUE,
								ITEM_PREFIX,
								REQUEST_ID,
								PRESSTYPE,
								QUANTITY,
								INVENTORYORG,
								TE,
								STOCKTYPE,
								INVENTORYCODE,
								SYSTEMID,
								REQUESTDATE,
								PROMISEDATE,
								SCHEDULESHIPDATE,
								PLANNERCODE,
								JOB_QTY,
								JOBUOM,
								ORDER_HEADER_ID,
								ORDER_LINE_ID,
								WIP_ENTITY_ID,
								VARIABLE_NAME,
								ITEM_SUFFIX,
								BATCHTYPE
							)
							VALUES
							(
								get_data.CUSTOMER_NUMBER,
								get_data.CUSTOMER_NAME,
								get_data.ORDER_NO,
								get_data.LINE_NO,
								get_data.INTERNAL_ITEM,
								get_data.UOM,
								get_data.JOBNO,
								get_data.ASSEMBLY,
								get_data.JOBSTATUS,
								get_data.FORMATNAME,
								get_data.PRODUCTIONMETHOD,
								get_data.BATCH_CREATED_DATE,
								get_data.CREATEDBY,
								get_data.LAST_UPDATED_DATE,
								get_data.LAST_UPDATED_BY,
								get_data.TYPESETTING_METHOD,
								L_BATCH_LOGIC,
								L_SUBBATCH_LOGIC,
								ln_vf_seq,
								L_SKU_VF_VALUE,
								ln_vf_ordered_qty,
								L_BASE_ITEM,
								'Color by Size',
								L_SKU_VF_VALUE,
								L_PREFIX,
								g_conc_request_id,
								get_data.PRESSTYPE,
								get_data.QUANTITY,
								get_data.INVENTORYORG,
								get_data.TE,
								get_data.STOCKTYPE,
								get_data.INVENTORYCODE,
								get_data.SYSTEMID,
								get_data.REQUESTDATE,
								get_data.PROMISEDATE,
								get_data.SCHEDULESHIPDATE,
								get_data.PLANNERCODE,
								get_data.JOB_QTY,
								get_data.JOBUOM,
								get_data.ORDER_HEADER_ID,
								get_data.ORDER_LINE_ID,
								get_data.WIP_ENTITY_ID,
								L_VF,
								L_SUFFIX,
								'Auto'
							);

							INSERT INTO paxar.PX_SUB_BATCH_AUTO_TMP_NEW(
								CUSTOMER_NUMBER,
								CUSTOMER_NAME,
								ORDER_NO,
								LINE_NO,
								INTERNAL_ITEM,
								UOM,
								JOBNO,
								ASSEMBLY,
								JOBSTATUS,
								FORMATNAME,
								PRODUCTIONMETHOD,
								BATCH_CREATED_DATE,
								CREATEDBY,
								LAST_UPDATED_DATE,
								LAST_UPDATED_BY,
								TYPESETTING_METHOD,
								BATCH_LOGIC,
								SUBBATCH_LOGIC,
								SEQ,
								SKU_VALUE,
								SKU_QTY,
								BASE_ITEM_NUMBER,
								BATCH_PROGRAM,
								SKU_VF_VALUE,
								ITEM_PREFIX,
								REQUEST_ID,
								PRESSTYPE,
								QUANTITY,
								INVENTORYORG,
								TE,
								STOCKTYPE,
								INVENTORYCODE,
								SYSTEMID,
								REQUESTDATE,
								PROMISEDATE,
								SCHEDULESHIPDATE,
								PLANNERCODE,
								JOB_QTY,
								JOBUOM,
								ORDER_HEADER_ID,
								ORDER_LINE_ID,
								WIP_ENTITY_ID,
								VARIABLE_NAME,
								ITEM_SUFFIX,
								BATCHTYPE
							)
							VALUES
							(
								get_data.CUSTOMER_NUMBER,
								get_data.CUSTOMER_NAME,
								get_data.ORDER_NO,
								get_data.LINE_NO,
								get_data.INTERNAL_ITEM,
								get_data.UOM,
								get_data.JOBNO,
								get_data.ASSEMBLY,
								get_data.JOBSTATUS,
								get_data.FORMATNAME,
								get_data.PRODUCTIONMETHOD,
								get_data.BATCH_CREATED_DATE,
								get_data.CREATEDBY,
								get_data.LAST_UPDATED_DATE,
								get_data.LAST_UPDATED_BY,
								get_data.TYPESETTING_METHOD,
								L_BATCH_LOGIC,
								L_SUBBATCH_LOGIC,
								ln_vf_seq,
								L_SKU_VF_VALUE,
								ln_vf_ordered_qty,
								L_BASE_ITEM,
								'Color by Size',
								L_SKU_VF_VALUE,
								L_PREFIX,
								g_conc_request_id,
								get_data.PRESSTYPE,
								get_data.QUANTITY,
								get_data.INVENTORYORG,
								get_data.TE,
								get_data.STOCKTYPE,
								get_data.INVENTORYCODE,
								get_data.SYSTEMID,
								get_data.REQUESTDATE,
								get_data.PROMISEDATE,
								get_data.SCHEDULESHIPDATE,
								get_data.PLANNERCODE,
								get_data.JOB_QTY,
								get_data.JOBUOM,
								get_data.ORDER_HEADER_ID,
								get_data.ORDER_LINE_ID,
								get_data.WIP_ENTITY_ID,
								L_VF,
								L_SUFFIX,
								'Auto'
							);

						end loop;
					END IF;
				END IF;
			END IF;
		END LOOP; --OPEN C_GET_DATA_V FOR final_query;
		CLOSE C_GET_DATA_V;

        pr_log_msg_auto('Final Query Execution Completed.');

		fnd_file.put_line(fnd_file.log,'Concurrent Request ID  : '||g_conc_request_id);
		fnd_file.put_line(fnd_file.log,'Row Count :'||L_ROWCOUNT);
		IF L_ROWCOUNT > 0 THEN
		fnd_file.put_line(fnd_file.log,'Row Count inside if : '||L_ROWCOUNT);
			-- BATCH_LOGIC='By GLID'
			FOR rec_glid IN C_GLID
			LOOP
				fnd_file.put_line(fnd_file.log,'internal_item ' || rec_glid.internal_item);
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL; --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022

				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
				-- BATCH NON-ATO ORDERS
				L_SOL_COUNT := 0;
				L_MAX_ORDER_QTY := 0;
				FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
							WHERE INTERNAL_ITEM=rec_glid.internal_item AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
				LOOP
					L_SOL_COUNT := L_SOL_COUNT+ 1;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.JOB_QTY;
					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.JOB_QTY;
					END IF;

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid.internal_item AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
				END LOOP;
				-- BATCH NON-ATO ORDERS
				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117

				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250

				FOR C1 IN CUR_BAT_GLID(rec_glid.internal_item)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY > setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
						UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
						SET BATCH_NUMBER   =V_BATCH_NUMBER,
						BATCH_STATUS     ='Batched',
						BATCH_CREATED_DATE=sysdate,
						CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
						LAST_UPDATED_DATE=sysdate,
						last_updated_by=FND_PROFILE.VALUE('USERNAME')
						WHERE internal_item=rec_glid.internal_item AND ORDER_NO=C1.ORDER_NO
						and LINE_NO=C1.LINE_NO and upper(BATCH_LOGIC)=upper('By GLID')
						AND REQUEST_ID=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Color by Size');

						UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
						SET BATCH_NUMBER   =V_BATCH_NUMBER,
						BATCH_STATUS     ='Batched',
						BATCH_CREATED_DATE=sysdate,
						CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
						LAST_UPDATED_DATE=sysdate,
						last_updated_by=FND_PROFILE.VALUE('USERNAME')
						WHERE internal_item=rec_glid.internal_item
						AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
						AND upper(BATCH_LOGIC)=upper('By GLID')
						AND REQUEST_ID=g_conc_request_id AND upper(BATCH_PROGRAM)=upper('Color by Size');
				END LOOP;
			END LOOP;

			--- BATCH_LOGIC='By Prefix'
			FOR cur_pre IN C_PREFIX
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL; --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022

				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
				-- BATCH NON-ATO ORDERS
				L_SOL_COUNT := 0;
				L_MAX_ORDER_QTY := 0;
				FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
							WHERE item_prefix=cur_pre.ITEM_PREFIX AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
				LOOP
					L_SOL_COUNT := L_SOL_COUNT+ 1;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.JOB_QTY;
					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.JOB_QTY;
					END IF;

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE item_prefix=cur_pre.ITEM_PREFIX AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
				END LOOP;
				-- BATCH NON-ATO ORDERS
				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117

				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_PREFIX(cur_pre.ITEM_PREFIX)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY > setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE item_prefix=cur_pre.ITEM_PREFIX AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					AND upper(BATCH_LOGIC)=upper('By Prefix') AND REQUEST_ID=g_conc_request_id
					AND upper(BATCHING_TYPE)=upper('Color by Size');

					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE ITEM_PREFIX=cur_pre.ITEM_PREFIX AND ORDER_NO=C1.ORDER_NO
					AND LINE_NO=C1.LINE_NO AND upper(BATCH_LOGIC)=upper('By Prefix')
					AND REQUEST_ID=g_conc_request_id AND upper(BATCH_PROGRAM)=upper('Color by Size');
				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By Prefix, RB & Format'
			FOR cur_pre IN C_PREFIX_RB_FN
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;   --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022

				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
				-- BATCH NON-ATO ORDERS
				L_SOL_COUNT := 0;
				L_MAX_ORDER_QTY := 0;
				FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
							WHERE item_prefix=cur_pre.ITEM_PREFIX AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
				LOOP
					L_SOL_COUNT := L_SOL_COUNT+ 1;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.JOB_QTY;
					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.JOB_QTY;
					END IF;

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE item_prefix=cur_pre.ITEM_PREFIX AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
				END LOOP;
				-- BATCH NON-ATO ORDERS
				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117

				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
                FOR C1 IN CUR_BAT_PREFIX_RB_FN(cur_pre.ITEM_PREFIX,cur_pre.CUSTOMER_NUMBER,cur_pre.FORMATNAME)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE item_prefix=cur_pre.ITEM_PREFIX AND CUSTOMER_NUMBER=cur_pre.CUSTOMER_NUMBER AND FORMATNAME=cur_pre.FORMATNAME
					AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO AND upper(BATCH_LOGIC)=upper('By Prefix, RB & Format')
					AND REQUEST_ID=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Color by Size');

					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE item_prefix=cur_pre.ITEM_PREFIX AND CUSTOMER_NUMBER=cur_pre.CUSTOMER_NUMBER AND FORMATNAME=cur_pre.FORMATNAME
					AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO AND upper(BATCH_LOGIC)=upper('By Prefix, RB & Format')
					AND REQUEST_ID=g_conc_request_id AND upper(BATCH_PROGRAM)=upper('Color by Size');

				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By GLID and Ship To'
			FOR rec_glid_ship IN cur_glid_ship
			LOOP
				fnd_file.put_line(fnd_file.log,rec_glid_ship.SHIP_TO||' '||rec_glid_ship.internal_item);
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL; --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022

				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
				-- BATCH NON-ATO ORDERS
				L_SOL_COUNT := 0;
				L_MAX_ORDER_QTY := 0;
				FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
							WHERE INTERNAL_ITEM=rec_glid_ship.internal_item AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
				LOOP
					L_SOL_COUNT := L_SOL_COUNT+ 1;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.JOB_QTY;
					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.JOB_QTY;
					END IF;

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_ship.internal_item AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
				END LOOP;
				-- BATCH NON-ATO ORDERS
				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117

				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_glship(rec_glid_ship.internal_item,rec_glid_ship.SHIP_TO)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					fnd_file.put_line(fnd_file.log,C1.ORDER_NO);
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_ship.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Ship To')
					and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Color by Size');

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_ship.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Ship To') and request_id=g_conc_request_id
					and upper(BATCH_PROGRAM)=upper('Color by Size');
				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By GLID and Bill To'
			FOR rec_glid_bill IN cur_glid_bill
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL; --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022

				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
				-- BATCH NON-ATO ORDERS
				L_SOL_COUNT := 0;
				L_MAX_ORDER_QTY := 0;
				FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
							WHERE INTERNAL_ITEM=rec_glid_bill.internal_item AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
				LOOP
					L_SOL_COUNT := L_SOL_COUNT+ 1;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.JOB_QTY;
					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.JOB_QTY;
					END IF;

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_bill.internal_item AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
				END LOOP;
				-- BATCH NON-ATO ORDERS
				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117

				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				fnd_file.put_line(fnd_file.log,'By GLID and Bill To'||rec_glid_bill.BILL_TO);
				FOR C1 IN CUR_BAT_glbill(rec_glid_bill.internal_item,rec_glid_bill.BILL_TO)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					fnd_file.put_line(fnd_file.log,'By GLID and Bill To'||C1.ORDER_NO);
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_bill.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Bill To') AND BILL_TO=rec_glid_bill.BILL_TO
					and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Color by Size');

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_bill.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Bill To') and request_id=g_conc_request_id
					AND upper(BATCH_PROGRAM)=upper('Color by Size');
				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By GLID and Customer PO'
			FOR rec_glid_po IN cur_glid_po
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL; --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022

				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
				-- BATCH NON-ATO ORDERS
				L_SOL_COUNT := 0;
				L_MAX_ORDER_QTY := 0;
				FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
							WHERE INTERNAL_ITEM=rec_glid_po.internal_item AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
				LOOP
					L_SOL_COUNT := L_SOL_COUNT+ 1;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.JOB_QTY;
					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.JOB_QTY;
					END IF;

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_po.internal_item AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
				END LOOP;
				-- BATCH NON-ATO ORDERS
				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117

				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_glpo(rec_glid_po.internal_item,rec_glid_po.CUST_PO)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_po.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Customer PO') AND CUST_PO=rec_glid_po.CUST_PO
					and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Color by Size');

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_po.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Customer PO') and request_id=g_conc_request_id
					AND upper(BATCH_PROGRAM)=upper('Color by Size');
				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By GLID and Order Line'
			FOR rec_gllin IN CUR_GLLIN
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL; --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022

				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
				-- BATCH NON-ATO ORDERS
				L_SOL_COUNT := 0;
				L_MAX_ORDER_QTY := 0;
				FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
							WHERE INTERNAL_ITEM=rec_gllin.internal_item AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
				LOOP
					L_SOL_COUNT := L_SOL_COUNT+ 1;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.JOB_QTY;
					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.JOB_QTY;
					END IF;

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_gllin.internal_item AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
				END LOOP;
				-- BATCH NON-ATO ORDERS
				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117

				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_gllin(rec_gllin.internal_item,rec_gllin.order_no,rec_gllin.line_no,rec_gllin.jobno)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_gllin.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Order Line')
					and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Color by Size');

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_gllin.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Order Line') and request_id=g_conc_request_id
					AND upper(BATCH_PROGRAM)=upper('Color by Size');
				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By GLID and OM Order ID'
			FOR REC_GLOR IN CUR_GLOR
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL; --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022

				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
				-- BATCH NON-ATO ORDERS
				L_SOL_COUNT := 0;
				L_MAX_ORDER_QTY := 0;
				FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
							WHERE INTERNAL_ITEM=REC_GLOR.internal_item AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
				LOOP
					L_SOL_COUNT := L_SOL_COUNT+ 1;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.JOB_QTY;
					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.JOB_QTY;
					END IF;

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=REC_GLOR.internal_item AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
				END LOOP;
				-- BATCH NON-ATO ORDERS
				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117

				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_glor(rec_glor.internal_item,rec_glor.te)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glor.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and OM Order ID') and TE=rec_glor.te
					and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Color by Size');

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glor.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and OM Order ID') and request_id=g_conc_request_id
					AND upper(BATCH_PROGRAM)=upper('Color by Size');
				END LOOP;
			END LOOP;

			--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023
			-- BATCH_LOGIC='By GLID and Order Number'
			FOR REC IN CUR_GL_ON
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL; --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
                -- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_GL_ON(REC.internal_item,REC.ORDER_NO)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=C1.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Order Number')
					and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Color by Size');

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=C1.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Order Number') and request_id=g_conc_request_id
					AND upper(BATCH_PROGRAM)=upper('Color by Size');
				END LOOP;
			END LOOP;
			--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023

			-- BATCH_LOGIC='By Stock Type'
			FOR REC_Stk IN CUR_Stk
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;--Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
                -- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_stk(rec_stk.stocktype)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE stocktype=rec_stk.stocktype AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By Stock Type')
					and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Color by Size');

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE stocktype=rec_stk.stocktype AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By Stock Type') and request_id=g_conc_request_id
					AND upper(BATCH_PROGRAM)=upper('Color by Size');
				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By Stock Type and Format'
			FOR REC_Stkfrm IN CUR_Stk_frm
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;  --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
                -- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_stkfrm(rec_stkfrm.stocktype,rec_stkfrm.formatname)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE STOCKTYPE=rec_stkfrm.STOCKTYPE and formatname=rec_stkfrm.formatname
					AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By Stock Type and Format')
					and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Color by Size');

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE STOCKTYPE=rec_stkfrm.STOCKTYPE and formatname=rec_stkfrm.formatname
					AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By Stock Type and Format')
					and request_id=g_conc_request_id AND upper(BATCH_PROGRAM)=upper('Color by Size');
				END LOOP;
			END LOOP;

			--- SUB BATCH LOGIC BY BASEITEM
			FOR get_bt IN C_GET_BT
			LOOP
				LN_SUBBATCH_COUNTER:=0;
				FOR C2 IN C_SUB_BASEITEM(get_bt.BATCH_NUMBER)
				LOOP
					LN_SUBBATCH_COUNTER:=LN_SUBBATCH_COUNTER+1;
					V_SUB_BATCH_NUMBER := get_bt.BATCH_NUMBER||'-'||LPAD(LN_SUBBATCH_COUNTER,3,0);
					FOR C3 IN CUR_SUB_BAT_BASEITEM(C2.BASE_ITEM_NUMBER,get_bt.BATCH_NUMBER)
					LOOP
						UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
						SET SUB_BATCH = V_SUB_BATCH_NUMBER
						WHERE BASE_ITEM_NUMBER=C2.BASE_ITEM_NUMBER
						AND BATCH_NUMBER=get_bt.BATCH_NUMBER AND ORDER_NO=C3.ORDER_NO
						AND LINE_NO=C3.LINE_NO AND upper(SUBBATCH_LOGIC)=upper('By Base Item')					---SUBBATCH_LOGIC IN ('By Base Item') Changed by Sarfaraz 04.08.2022
						AND REQUEST_ID=g_conc_request_id AND upper(BATCH_PROGRAM)=upper('Color by Size');
					END LOOP;
				END LOOP;
			END LOOP;

			  INSERT INTO paxar.PX_BATCH_DETAILS_TAB
			  (
				BATCH_NUMBER
				,BATCH_STATUS
				,CUSTOMER_NUMBER
				,CUSTOMER_NAME
				,ORDER_NO
				,LINE_NO
				,INTERNAL_ITEM
				,QUANTITY
				,UOM
				,JOBNO
				,ASSEMBLY
				,JOB_QTY
				,JOBUOM
				,JOBSTATUS
				,TE
				,STOCKTYPE
				,INVENTORYCODE
				,SYSTEMID
				,FORMATNAME
				,REQUESTDATE
				,PROMISEDATE
				,SCHEDULESHIPDATE
				,PLANNERCODE
				,INVENTORYORG
				,PRODUCTIONMETHOD
				,BATCHTYPE
				,BATCH_CREATED_DATE
				,CREATED_BY
				,LAST_UPDATED_DATE
				,LAST_UPDATED_BY
				,RELEASED_DATE
				,TYPESETTING_METHOD
				,PRESSTYPE
				,SUB_BATCH
				,BATCH_LOGIC
				,BATCHING_TYPE
				,SUBBATCH_LOGIC
				,OE_HEADER_ID
				,OE_LINE_ID
				,WIP_ENTITY_ID
                ,REQUEST_ID,AUTO_BATCH_HEADER_ID,AUTO_BATCH_CONFIG_XML       -- Added By Lingaraj
			  )
				(SELECT PBT.BATCH_NUMBER,PBT.BATCH_STATUS,PBT.CUSTOMER_NUMBER,PBT.CUSTOMER_NAME,PBT.ORDER_NO,PBT.LINE_NO,PBT.INTERNAL_ITEM,PBT.QUANTITY,PBT.UOM,PBT.JOBNO,PBT.ASSEMBLY,PBT.JOB_QTY,PBT.JOBUOM,
					PBT.JOBSTATUS,PBT.TE,PBT.STOCKTYPE,PBT.INVENTORYCODE,PBT.SYSTEMID,PBT.FORMATNAME,PBT.REQUESTDATE,PBT.PROMISEDATE,PBT.SCHEDULESHIPDATE,PBT.PLANNERCODE,PBT.INVENTORYORG,PBT.PRODUCTIONMETHOD,PBT.BATCHTYPE,
					PBT.BATCH_CREATED_DATE,PBT.CREATEDBY,PBT.LAST_UPDATED_DATE,PBT.LAST_UPDATED_BY,PBT.RELEASED_DATE,PBT.TYPESETTING_METHOD,PBT.PRESSTYPE,PBT.SUB_BATCH,PBT.BATCH_LOGIC,PBT.BATCHING_TYPE,PBT.SUBBATCH_LOGIC,
					PBT.ORDER_HEADER_ID,PBT.ORDER_LINE_ID,PBT.WIP_ENTITY_ID
                    ,g_conc_request_id,ln_autobatch_header_id,lv_autobatch_Config
				FROM PAXAR.PX_BATCH_AUTO_SPL_TMP PBT where PBT.BATCH_STATUS  ='Batched' AND PBT.REQUEST_ID = g_conc_request_id AND PBT.BATCHING_TYPE='Color by Size'
				AND (SELECT COUNT(*) FROM APPS.PX_BATCH_DETAILS_TAB PT WHERE PT.JOBNO=PBT.JOBNO AND PT.SUB_BATCH IS NULL AND PT.BATCH_STATUS IN ('Batched','Released')) = 0);

			  INSERT INTO paxar.PX_BATCH_DETAILS_TAB
			  (
				BATCH_NUMBER
				,BATCH_STATUS
				,CUSTOMER_NUMBER
				,CUSTOMER_NAME
				,ORDER_NO
				,LINE_NO
				,INTERNAL_ITEM
				,QUANTITY
				,UOM
				,JOBNO
				,ASSEMBLY
				,JOB_QTY
				,JOBUOM
				,JOBSTATUS
				,TE
				,STOCKTYPE
				,INVENTORYCODE
				,SYSTEMID
				,FORMATNAME
				,REQUESTDATE
				,PROMISEDATE
				,SCHEDULESHIPDATE
				,PLANNERCODE
				,INVENTORYORG
				,PRODUCTIONMETHOD
				,BATCHTYPE
				,BATCH_CREATED_DATE
				,CREATED_BY
				,LAST_UPDATED_DATE
				,LAST_UPDATED_BY
				,RELEASED_DATE
				,TYPESETTING_METHOD
				,PRESSTYPE
				,SUB_BATCH
				,BATCH_LOGIC
				,BATCHING_TYPE
				,SUBBATCH_LOGIC
				,SEQ
				,SKU_QTY
				,OE_HEADER_ID
				,OE_LINE_ID
				,WIP_ENTITY_ID
				,BASE_ITEM_NUMBER
				,INT_ITEM_PREFIX
				,VARIABLE_VALUE
				,VARIABLE_NAME
				,INT_ITEM_SUFFIX
                ,REQUEST_ID,AUTO_BATCH_HEADER_ID,AUTO_BATCH_CONFIG_XML            -- Added By Lingaraj
			  )
				(SELECT PBT.BATCH_NUMBER,PBT.BATCH_STATUS,PBT.CUSTOMER_NUMBER,PBT.CUSTOMER_NAME,PBT.ORDER_NO,PBT.LINE_NO,PBT.INTERNAL_ITEM,PBT.QUANTITY,PBT.UOM,PBT.JOBNO,PBT.ASSEMBLY,PBT.JOB_QTY,PBT.JOBUOM,
					PBT.JOBSTATUS,PBT.TE,PBT.STOCKTYPE,PBT.INVENTORYCODE,PBT.SYSTEMID,PBT.FORMATNAME,PBT.REQUESTDATE,PBT.PROMISEDATE,PBT.SCHEDULESHIPDATE,PBT.PLANNERCODE,PBT.INVENTORYORG,PBT.PRODUCTIONMETHOD,PBT.BATCHTYPE,
					PBT.BATCH_CREATED_DATE,PBT.CREATEDBY,PBT.LAST_UPDATED_DATE,PBT.LAST_UPDATED_BY,PBT.RELEASED_DATE,PBT.TYPESETTING_METHOD,PBT.PRESSTYPE,PBT.SUB_BATCH,PBT.BATCH_LOGIC,PBT.BATCH_PROGRAM,PBT.SUBBATCH_LOGIC,PBT.SEQ,PBT.SKU_QTY,
					PBT.ORDER_HEADER_ID,PBT.ORDER_LINE_ID,PBT.WIP_ENTITY_ID,PBT.BASE_ITEM_NUMBER,PBT.ITEM_PREFIX,PBT.SKU_VF_VALUE,PBT.VARIABLE_NAME,PBT.ITEM_SUFFIX
                    ,g_conc_request_id   ,ln_autobatch_header_id,lv_autobatch_Config
				FROM PAXAR.PX_SUB_BATCH_AUTO_TMP PBT where PBT.BATCH_STATUS  ='Batched' AND PBT.REQUEST_ID = g_conc_request_id AND PBT.BATCH_PROGRAM='Color by Size'
				AND (SELECT COUNT(*) FROM APPS.PX_BATCH_DETAILS_TAB PT WHERE PT.JOBNO=PBT.JOBNO AND PT.SUB_BATCH IS NOT NULL AND PT.BATCH_STATUS IN ('Batched','Released')) = 0);

        END IF;

        commit;

    END LOOP; -- FOR setup_data in C_GET_SETUP(P_HEADER_ID)


  pr_log_msg_auto('+----------------------generate_batch_colour_by_size() Exit----------------------+');
END GENERATE_BATCH_COLOUR_BY_SIZE; -- GENERATE_BATCH_COLOUR_BY_SIZE

PROCEDURE generate_batch_copy_change(P_HEADER_ID NUMBER) AS
	CURSOR C_GET_SETUP(P_SETUP_ID NUMBER) IS
	SELECT * FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T WHERE HEADER_ID=P_SETUP_ID;

	CURSOR C_GET_SEQ_HDR(P_SEQ_NO NUMBER) IS
	select HEADER_ID from PAXAR.PAXAR_OE_AUTO_BATCH_SEQ_HDR_T where cf_seqno=P_SEQ_NO;

	CURSOR C_GET_GROUP_ID(P_SEQ_HEADER_ID NUMBER) IS
	select group_id,count(*) g_count from PAXAR.PAXAR_OE_AUTO_BATCH_SEQ_LINE_T
    WHERE HEADER_ID=P_SEQ_HEADER_ID group by group_id;

	CURSOR C_GET_PREFIX(P_IIID NUMBER,P_ORG_ID NUMBER) IS
	select ITEM_SCHEDULE_GROUP,ITEM_SUFFIX from PX_SPECSHEETS_ITEM where inventory_item_id=P_IIID AND organization_iD='3699';

	CURSOR C_GET_SEQ_LINE(P_SEQ_HEADER_ID NUMBER,P_GROUP_ID NUMBER) IS
	select operator_logic,parameter_details,operator_details,VALUE_FROM,VALUE_TO from PAXAR.PAXAR_OE_AUTO_BATCH_SEQ_LINE_T
	WHERE HEADER_ID=P_SEQ_HEADER_ID AND nvl(GROUP_ID,1)=nvl(P_GROUP_ID,1) order by TO_NUMBER(ATTRIBUTE1) /*operator_logic desc*/;

	CURSOR C_GET_PARAM_DET(P_PARAM_DESC VARCHAR2) IS
	  SELECT meaning
	  FROM FND_LOOKUP_VALUES
	  WHERE lookup_type='PAXAR_ONT_AUTO_SEQUENCE'
	  AND language     ='US'
	  AND ENABLED_FLAG='Y'
	  AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE) )
	  AND TAG='SQL' AND DESCRIPTION=P_PARAM_DESC;

	  CURSOR C_GET_OPERATOR_DET(P_OPERATOR_DESC VARCHAR2) IS
	  SELECT meaning
	  FROM FND_LOOKUP_VALUES
	  WHERE lookup_type='PAXAR_ONT_AUTO_SEQUENCE'
	  AND language     ='US'
	  AND ENABLED_FLAG='Y'
	  AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE) )
	  AND TAG='SEQ' AND DESCRIPTION=P_OPERATOR_DESC;

	CURSOR C_GET_VF_COUNT(P_ORDER_HID VARCHAR2,P_LINE_ID VARCHAR2) IS
	select variable_field_count from px_oe_variable_headers where header_id=P_ORDER_HID and line_id=P_LINE_ID;

	--Added by sarfaraz // NS-MOCK2-100 // 26-10-2022
	CURSOR C_GET_VF_DT_COUNT(P_ORDER_HID VARCHAR2,P_LINE_ID VARCHAR2) IS
	select COUNT(*) from px_oe_variable_details
	where header_sequence_id=(select header_sequence_id from px_oe_variable_headers where header_id=P_ORDER_HID and line_id=P_LINE_ID and entry_type='I');
	--Added by sarfaraz // NS-MOCK2-100 // 26-10-2022

	CURSOR C_GET_VF_DT(P_ORDER_HID VARCHAR2,P_LINE_ID VARCHAR2) IS
	select sequence_number,variable_data1,ordered_quantity from px_oe_variable_details
	where header_sequence_id=(select header_sequence_id from px_oe_variable_headers where header_id=P_ORDER_HID and line_id=P_LINE_ID and entry_type='I');

	CURSOR C_GET_VF_NAME(P_IID VARCHAR2) IS
	SELECT FIELD_NAME FROM PX_SPECSHEETS_FMT_TEX_DTLS_V
	WHERE SPECSHEETS_ID IN (SELECT SPECSHEETS_ID FROM PX_SPECSHEETS_ITEM_V WHERE INVENTORY_ITEM_ID = P_IID)
	AND LEVEL_TYPE='LINE';

	CURSOR C_GLID_VF
	IS
		SELECT INTERNAL_ITEM FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE upper(BATCH_LOGIC)=upper('By GLID') and request_id=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Copy Change') GROUP BY INTERNAL_ITEM;

	CURSOR CUR_BAT_GLID_VF(pin_item VARCHAR2)
	IS
		SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE upper(BATCH_LOGIC)=upper('By GLID') and request_id=g_conc_request_id
		and INTERNAL_ITEM=PIN_ITEM AND upper(BATCHING_TYPE)=upper('Copy Change')
		ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR cur_glid_ship
	IS
		SELECT pbd.INTERNAL_ITEM,SHIP_TO
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP PBD
		WHERE PBD.REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Copy Change') AND upper(BATCH_LOGIC)=upper('By GLID and Ship To')
		GROUP BY pbd.INTERNAL_ITEM,PBD.SHIP_TO;

	CURSOR CUR_BAT_glship(pin_item VARCHAR2,P_SHIP_TO VARCHAR2)
	IS
		SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=PIN_ITEM AND SHIP_TO=P_SHIP_TO
		AND upper(BATCHING_TYPE)=upper('Copy Change') AND upper(BATCH_LOGIC)=upper('By GLID and Ship To')
		AND REQUEST_ID=g_conc_request_id ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR cur_glid_bill
	IS
		SELECT PBD.INTERNAL_ITEM,PBD.BILL_TO
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP PBD
		WHERE PBD.REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Copy Change') AND upper(BATCH_LOGIC)=upper('By GLID and Bill To')
		GROUP BY PBD.INTERNAL_ITEM,PBD.BILL_TO;

	CURSOR CUR_BAT_glbill(pin_item VARCHAR2,P_BILL_TO VARCHAR2)
	IS
		SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=PIN_ITEM AND BILL_TO=P_BILL_TO
		AND upper(BATCHING_TYPE)=upper('Copy Change') AND upper(BATCH_LOGIC)=upper('By GLID and Bill To')
		AND REQUEST_ID=g_conc_request_id ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR cur_glid_po
	IS
		SELECT PBD.INTERNAL_ITEM,PBD.cust_po
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP PBD
		WHERE PBD.REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Copy Change') AND upper(BATCH_LOGIC)=upper('By GLID and Customer PO')
		GROUP BY PBD.INTERNAL_ITEM,PBD.cust_po;

	CURSOR CUR_BAT_glpo(pin_item VARCHAR2,P_CUST_PO VARCHAR2)
	IS
		SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=PIN_ITEM AND CUST_PO=P_CUST_PO
		AND upper(BATCHING_TYPE)=upper('Copy Change') AND upper(BATCH_LOGIC)=upper('By GLID and Customer PO')
		AND REQUEST_ID=g_conc_request_id ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR CUR_GLLIN
	IS
		SELECT INTERNAL_ITEM,ORDER_NO,LINE_NO,jobno
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP WHERE REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Copy Change') AND upper(BATCH_LOGIC)=upper('By GLID and Order Line')
		GROUP BY INTERNAL_ITEM, ORDER_NO,LINE_NO,jobno;

	  CURSOR CUR_BAT_GLLIN(pin_item VARCHAR2,P_ORDER_NO NUMBER,pin_line NUMBER,p_jobno VARCHAR2)
	  IS
		SELECT *
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=PIN_ITEM
		AND NVL(ORDER_NO,999)=NVL(P_ORDER_NO,999)
		AND NVL(line_no,999)=NVL(PIN_line,999)
		AND to_char(jobno)=to_char(p_jobno)
		AND upper(BATCHING_TYPE)=upper('Copy Change') AND upper(BATCH_LOGIC)=upper('By GLID and Order Line')
		and REQUEST_ID=g_conc_request_id ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR CUR_GLOR
	IS
		SELECT INTERNAL_ITEM,TE
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP WHERE REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Copy Change') AND upper(BATCH_LOGIC)=upper('By GLID and OM Order ID')
		GROUP BY INTERNAL_ITEM, TE;

	CURSOR CUR_BAT_GLOR(pin_item VARCHAR2,pin_te VARCHAR2)
	IS
		SELECT *
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=PIN_ITEM AND REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Copy Change') AND upper(BATCH_LOGIC)=upper('By GLID and OM Order ID')
		AND TE       =pin_te ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR CUR_Stk
	IS
		SELECT Stocktype
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		where stocktype is not null AND REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Copy Change') AND upper(BATCH_LOGIC)=upper('By Stock Type')
		GROUP BY Stocktype;

	CURSOR CUR_BAT_Stk(pin_stk VARCHAR2)
	IS
		SELECT *
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE stocktype=pin_stk AND REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Copy Change') AND upper(BATCH_LOGIC)=upper('By Stock Type')
		ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR CUR_Stk_frm
	IS
		SELECT Stocktype,formatname
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP WHERE REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Copy Change') AND upper(BATCH_LOGIC)=upper('By Stock Type and Format')
		GROUP BY Stocktype,formatname;

	CURSOR CUR_BAT_Stkfrm(pin_stk VARCHAR2,pin_formatname VARCHAR2)
	IS
		SELECT *
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE STOCKTYPE=PIN_STK and formatname=pin_formatname
		AND upper(BATCHING_TYPE)=upper('Copy Change') AND upper(BATCH_LOGIC)=upper('By Stock Type and Format')
		AND REQUEST_ID=g_conc_request_id ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023
	CURSOR CUR_GL_ON
	IS
		SELECT INTERNAL_ITEM,ORDER_NO
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP WHERE REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Copy Change')
		AND upper(BATCH_LOGIC)=upper('By GLID and Order Number')
		GROUP BY INTERNAL_ITEM, ORDER_NO;

	CURSOR CUR_BAT_GL_ON(P_INTERNAL_ITEM VARCHAR2,P_ORDER_NO NUMBER)
	IS
		SELECT *
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=P_INTERNAL_ITEM AND REQUEST_ID=g_conc_request_id
		AND ORDER_NO       =P_ORDER_NO AND ORDER_NO IS NOT NULL
		AND upper(BATCHING_TYPE)=upper('Copy Change')
		AND upper(BATCH_LOGIC)=upper('By GLID and Order Number')
		ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;
	--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023

	CURSOR C_SUB_BAT_VF(P_BATCH_NO VARCHAR2)
	IS
		SELECT SKU_VALUE FROM paxar.PX_SUB_BATCH_AUTO_TMP
		WHERE upper(BATCH_PROGRAM)=upper('Copy Change') AND BATCH_NUMBER= P_BATCH_NO
		and request_id=g_conc_request_id
		GROUP BY SKU_VALUE;

	CURSOR CUR_SUB_BAT_VF(P_SKU_VALUE VARCHAR2,P_BATCH_NO VARCHAR2)
	IS
		SELECT * FROM paxar.PX_SUB_BATCH_AUTO_TMP
		WHERE SKU_VALUE=P_SKU_VALUE AND BATCH_NUMBER=P_BATCH_NO
		AND upper(BATCH_PROGRAM)=upper('Copy Change') and request_id=g_conc_request_id;

	CURSOR C_GET_SKU_HEADER_DT(P_ORDER_NO VARCHAR2,P_LINE_NO NUMBER) IS
	SELECT pcwdl.value
	FROM PAXAR.PX_CARE_WOV_HEADERS pcwh,PAXAR.PX_CARE_WOV_DETAIL_LINES pcwdl
	WHERE pcwh.CARE_WOV_ID=pcwdl.CARE_WOV_ID AND pcwh.ORDER_NUMBER=P_ORDER_NO AND pcwh.ORDER_LINE=P_LINE_NO AND pcwdl.SEQUENCE=0;

	CURSOR C_GET_SKU_DT(P_ORDER_NO VARCHAR2,P_LINE_NO NUMBER) IS
	SELECT pcwh.ORDER_NUMBER,pcwh.ORDER_LINE,pcwdl.SEQUENCE,nvl(pcwdl.REVISED_QTY,pcwdl.QTY) QTY,pcwdl.value
	FROM PAXAR.PX_CARE_WOV_HEADERS pcwh,PAXAR.PX_CARE_WOV_DETAIL_LINES pcwdl
	WHERE pcwh.CARE_WOV_ID=pcwdl.CARE_WOV_ID AND pcwh.ORDER_NUMBER=P_ORDER_NO AND pcwh.ORDER_LINE=P_LINE_NO AND pcwdl.SEQUENCE!=0;

	cursor c_header_count(header_data varchar2) is
	select count(*) from(SELECT regexp_substr(header_data, '[^|]+', 1, LEVEL) VAR_DATA
	FROM DUAL
	CONNECT BY REGEXP_SUBSTR(header_data, '[^|]+', 1, LEVEL) IS NOT NULL);
	/*select count(*) from(SELECT REGEXP_SUBSTR( replace(header_data,'|',','), '([^,]*)(,|$)', 1, LEVEL, NULL, 1 ) header
	FROM   DUAL
	CONNECT BY LEVEL < REGEXP_COUNT( replace(header_data,'|',','), '[^,]*(,|$)' ));*/

	CURSOR C_GET_BT IS
	SELECT DISTINCT BATCH_NUMBER FROM paxar.PX_BATCH_AUTO_SPL_TMP
	WHERE upper(BATCHING_TYPE)=upper('Copy Change') AND SUBBATCH_LOGIC !='NA'
	and REQUEST_ID=g_conc_request_id;	-- Added by Sarfaraz 04.08.2022 get batch_numbers generated by the current request

	CURSOR CHECK_CC_BATCH_LOGIC(P_BATCH_LOGIC VARCHAR2) IS
	select count(1)
	from fnd_lookup_values
	where lookup_type='PX_NANSHA_BATCH_SUBBATCH_LOGIC'
	AND language='US'
	AND ENABLED_FLAG='Y'
	AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE))
	AND MEANING LIKE 'Copy_Change%'
	AND DESCRIPTION=P_BATCH_LOGIC;

	CURSOR CHECK_CC_SUBBATCH_LOGIC(P_SUBBATCH_LOGIC VARCHAR2) IS
	select count(1)
	from fnd_lookup_values
	where lookup_type='PX_NANSHA_BATCH_SUBBATCH_LOGIC'
	AND language='US'
	AND ENABLED_FLAG='Y'
	AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE))
	AND MEANING LIKE 'Copy_Change%'
	AND TAG=P_SUBBATCH_LOGIC;

	L_BL_STATUS NUMBER;
	L_SBL_STATUS NUMBER;
	L_VF_DT_COUNT number;  -- Added by sarfaraz // NS-MOCK2-100 // 26-10-2022


	TYPE C_GET_DATA IS REF CURSOR;
	C_GET_DATA_V C_GET_DATA;

	TYPE px_auto_batch_sols is record
	(
		CUSTOMER_NUMBER         NUMBER ,
		CUSTOMER_NAME           VARCHAR2(1000),
		ORDER_NO                NUMBER         ,
		ORGANIZATION_ID         NUMBER         ,
		LINE_NO                 NUMBER         ,
		INTERNAL_ITEM           VARCHAR2(100)  ,
		INVENTORY_ITEM_ID       NUMBER         ,
		QUANTITY                NUMBER         ,
		UOM                     VARCHAR2(50)   ,
		JOBNO                   VARCHAR2(100)  ,
		ASSEMBLY                VARCHAR2(100)  ,
		JOB_TYPE                VARCHAR2(1000) ,
		JOB_QTY                 NUMBER         ,
		JOBUOM                  VARCHAR2(50)   ,
		JOBSTATUS               VARCHAR2(50)   ,
		TE                      VARCHAR2(100)  ,
		STOCKTYPE               VARCHAR2(100)  ,
		INVENTORYCODE           VARCHAR2(100)  ,
		SYSTEMID                VARCHAR2(100)  ,
		FORMATNAME              VARCHAR2(100)  ,
		REQUESTDATE             DATE           ,
		PROMISEDATE             DATE           ,
		SCHEDULESHIPDATE        DATE           ,
		PLANNERCODE             VARCHAR2(100)  ,
		INVENTORYORG            VARCHAR2(100)  ,
		PRODUCTIONMETHOD        VARCHAR2(100)  ,
		BATCH_STATUS            VARCHAR2(20)   ,
		BATCH_NUMBER            VARCHAR2(100)  ,
		BATCHTYPE               VARCHAR2(100)  ,
		BATCH_CREATED_DATE      DATE           ,
		CREATEDBY               VARCHAR2(1000) ,
		LAST_UPDATED_DATE       DATE           ,
		LAST_UPDATED_BY         VARCHAR2(1000) ,
		RELEASED_DATE           DATE           ,
		TYPESETTING_METHOD      VARCHAR2(1000) ,
		PRESSTYPE               VARCHAR2(1000) ,
		ORDER_HEADER_ID         NUMBER         ,
		ORDER_LINE_ID           NUMBER         ,
		BATCH_LOGIC             VARCHAR2(4000) ,
		SUBBATCH_LOGIC          VARCHAR2(4000) ,
		BILL_TO                 VARCHAR2(4000) ,
		SHIP_TO                 VARCHAR2(4000) ,
		CUST_PO                 VARCHAR2(4000),
		WIP_ENTITY_ID			VARCHAR2(4000),
		OPERATING_UNIT			VARCHAR2(4000),
		ORDER_TYPE				VARCHAR2(4000),
		FSC_CONTENT				VARCHAR2(4000),
		SHIPPING_METHOD			VARCHAR2(4000)	-- Added by Sarfaraz // NS-MOCK2-180 // 10-11-2022
	);

	get_data px_auto_batch_sols;

	start_of_query long;
	end_of_query long;
	main_query long;
	order_by long;

	object_details_query long;
	L_OPERATOR_LOGIC VARCHAR2(1000);
	L_OBJECT_DETAILS VARCHAR2(1000);
	L_PARAMETER_DETAILS VARCHAR2(1000);
	L_OPERATOR_DETAILS VARCHAR2(1000);
	L_VALUE_FROM_DETAILS VARCHAR2(1000);
	L_VALUE_TO_DETAILS VARCHAR2(1000);
	L_PARAM_COLUMN VARCHAR2(1000);
	L_OPERATOR_VALUE VARCHAR2(1000);

	L_OPERATOR_DETAILS_QUERY LONG;
	L_CF_QUERY LONG;

	final_query long;

	L_VALUE VARCHAR2(1000);
	L_HEADER_ID NUMBER;
	L_BATCH_LOGIC VARCHAR2(4000);
	L_SUBBATCH_LOGIC VARCHAR2(4000);
	V_BATCH_NUMBER VARCHAR2(10000);
	V_SUB_BATCH_NUMBER VARCHAR2(10000);
	l_count NUMBER;
	L_VF_COUNT NUMBER;
	l_error varchar2(10):='N';
	LN_SUBBATCH_COUNTER NUMBER:=0;
	i number;
	j number;
	l_check_fmt_status number;
	L_ROWCOUNT NUMBER:=0;
	L_COUNTER NUMBER;
	L_PREFIX VARCHAR2(4000);
	L_SUFFIX VARCHAR2(4000);
	L_VF_NAME VARCHAR2(4000);
	LV_COMBO varchar2(4000);
	L_HEADER_VALUE varchar2(4000);
	lv_sku_form varchar2(1000);
	LN_HEADER_COUNT number;

    ln_autobatch_header_id Number;            -- Added By Lingaraj
    lv_autobatch_Config      XmlType  ; -- Added By Lingaraj
    ln_rule_cnt Number ; -- Added by Lingaraj
    lv_err_batching_msg  Varchar2(1000);

	-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
	L_SOL_COUNT NUMBER;
	L_MAX_ORDER_QTY NUMBER;
	L_MAX_SKU_QTY NUMBER;
	L_REQUEST_DATE varchar2(2000);
	L_REQUEST_DATE_COUNT NUMBER;
	-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
BEGIN
    pr_log_msg_auto('+----------------------generate_batch_copy_change()  Called----------------------+');
-- Get Auto Batch Header ID and Config info
     pr_get_autobatch_config_info(p_request_id => g_conc_request_id,
                                                          p_autobatch_header_id  => ln_autobatch_header_id ,
                                                          p_autobatch_config        => lv_autobatch_Config
                                                          );

	FOR setup_data in C_GET_SETUP(P_HEADER_ID)
	LOOP
		L_HEADER_ID := setup_data.header_id;

		main_query:= 'SELECT customer_number,
						customer_name,
						order_no,
						organization_id,
						line_no,
						internal_item,
						inventory_item_id,
						quantity,
						uom,
						jobno,
						assembly,
						job_type,
						job_qty,
						jobuom,
						jobstatus,
						te,
						stocktype,
						inventorycode,
						systemid,
						formatname,
						requestdate,
						promisedate,
						scheduleshipdate,
						plannercode,
						inventoryorg,
						productionmethod,
						batch_status,
						batch_number,
						batchtype,
						BATCH_CREATED_DATE,
						CREATEDBY,
						LAST_UPDATED_DATE,
						LAST_UPDATED_BY,
						RELEASED_DATE,
						TYPESETTING_METHOD,
						PRESSTYPE,
						ORDER_HEADER_ID,
						ORDER_LINE_ID,
						batch_logic,
						subbatch_logic,
						bill_to,
						ship_to,
						cust_po,
						WIP_ENTITY_ID,
						OPERATING_UNIT,
						ORDER_TYPE,
						FSC_CONTENT,
						SHIPPING_METHOD			-- Added by Sarfaraz // NS-MOCK2-180 // 10-11-2022
						FROM
					  (SELECT null customer_number,
							null customer_name,
							null ORDER_NO,
							ood.organization_id ORGANIZATION_ID,
							null LINE_NO,
							msib.segment1 INTERNAL_ITEM,
							MSIB.INVENTORY_ITEM_ID INVENTORY_ITEM_ID,
							to_number('''') QUANTITY,
							null UOM,
							wdjv.wip_entity_name JOBNO,
							msib.segment1 ASSEMBLY,
							wdjv.job_type_meaning JOB_TYPE,
							wdjv.start_quantity JOB_QTY,
							msib.PRIMARY_UOM_CODE JOBUOM,
							Decode ((SELECT PBD.BATCH_STATUS
								FROM PX_BATCH_DETAILS_TAB PBD
								WHERE 1=1
								AND pbd.jobno     =wdjv.wip_entity_name and rownum=1) ,''Released'',''Released'',wdjv.status_type_disp) JOBSTATUS,
							null TE,
							null STOCKTYPE,
							null INVENTORYCODE,
							null SYSTEMID,
							null FORMATNAME,
							null REQUESTDATE,
							null PROMISEDATE,
							null SCHEDULESHIPDATE,
							msib.planner_code PLANNERCODE,
							ood.organization_code INVENTORYORG,
							mic.category_concat_segs PRODUCTIONMETHOD,
							(SELECT PBD.BATCH_STATUS
							FROM PX_BATCH_DETAILS_TAB PBD
							WHERE 1=1
							AND pbd.jobno     =wdjv.wip_entity_name
							and rownum=1
							UNION
							SELECT ''Open''
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE 1=1
							  AND jobno     =wdjv.wip_entity_name
							  )
							) BATCH_STATUS,
							(SELECT batch_number
							FROM px_batch_details_tab
							WHERE 1=1
							AND jobno     =wdjv.wip_entity_name
							and rownum=1
							UNION
							SELECT '' ''
							FROM dual
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE 1=1
							  AND jobno     =wdjv.wip_entity_name
							  )
							) BATCH_NUMBER,
							(SELECT batchtype
							FROM px_batch_details_tab
							WHERE 1=1
							AND jobno     =wdjv.wip_entity_name
							and rownum=1
							UNION
							SELECT ''  ''
							FROM dual
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) BATCHTYPE,
							(SELECT BATCH_CREATED_DATE
							FROM px_batch_details_tab
							WHERE  1=1
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) BATCH_CREATED_DATE,
							(SELECT CReated_By
							FROM px_batch_details_tab
							WHERE  1=1
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) CREATEDBY,
							(SELECT last_updated_date
							FROM px_batch_details_tab
							WHERE  1=1
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) LAST_UPDATED_DATE ,
							(SELECT last_updated_by
							FROM px_batch_details_tab
							WHERE  1=1
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) LAST_UPDATED_BY ,
							(SELECT released_date
							FROM px_batch_details_tab
							WHERE  1=1
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) RELEASED_DATE ,
							(SELECT distinct ELEMENT_VALUE
							FROM px_descr_element_values
							WHERE INVENTORY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
							AND ORGANIZATION_ID    =msib.ORGANIZATION_ID
							AND ELEMENT_NAME        =''Typesetting Method''
							and rownum=1
							) TYPESETTING_METHOD,
							(SELECT distinct ELEMENT_VALUE
							FROM px_descr_element_values
							WHERE INVENTORY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
							AND ORGANIZATION_ID    =msib.ORGANIZATION_ID
							AND ELEMENT_NAME        =''Factory Spec Press Type''
							and rownum=1
							) PRESSTYPE,
							null ORDER_HEADER_ID,
							null ORDER_LINE_ID,
							(select element_value from px_descr_element_values
								where inventory_item_id=MSIB.INVENTORY_ITEM_ID and element_name=''Batch Logic'' and organization_id=msib.ORGANIZATION_ID
								and rownum=1
							) batch_logic,
							(select element_value from px_descr_element_values
								where inventory_item_id=MSIB.INVENTORY_ITEM_ID and element_name=''Subbatch Logic'' and organization_id=msib.ORGANIZATION_ID
								and rownum=1
							) subbatch_logic,
							null bill_to,
							null ship_to,
							null cust_po,
							Wdjv.WIP_ENTITY_ID WIP_ENTITY_ID,
							null OPERATING_UNIT,
							null ORDER_TYPE,
							(select mcb.CONCATENATED_SEGMENTS from
								MTL_ITEM_CATEGORIES mtc,
								MTL_CATEGORIES_B_KFV mcb
								where mcb.category_id=mtc.category_id
								and mtc.category_set_id=''1100000261''
								and mtc.INVENTORY_ITEM_ID=MSIB.inventory_item_id
								and mtc.ORGANIZATION_ID=ood.organization_id) FSC_CONTENT,
							null SHIPPING_METHOD	-- Added by Sarfaraz // NS-MOCK2-180 // 10-11-2022
							FROM
								WIP_DISCRETE_JOBS_V WDJV,MTL_SYSTEM_ITEMS_B MSIB,ORG_ORGANIZATION_DEFINITIONS OOD,MTL_ITEM_CATEGORIES_V MIC
							 WHERE ood.ORGANIZATION_ID IN (SELECT INVENTORY_ORG_ID FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||L_HEADER_ID||')
							AND WDJV.STATUS_TYPE_DISP IN (''Released'',''Unreleased'')
							AND WDJV.PRIMARY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
							AND WDJV.ORGANIZATION_ID=MSIB.ORGANIZATION_ID
							AND WDJV.ORGANIZATION_ID=OOD.ORGANIZATION_ID
							AND MIC.INVENTORY_ITEM_ID     =MSIB.INVENTORY_ITEM_ID
							AND MIC.CATEGORY_SET_NAME     =''Production Methods''
							AND MIC.ORGANIZATION_ID=OOD.ORGANIZATION_ID
							AND nvl(msib.replenish_to_order_flag,''N'') = ''N''
							  and wdjv.wip_entity_name not in (SELECT jobno from PAXAR.PX_BATCH_AUTO_SPL_TMP where jobno=wdjv.wip_entity_name and order_no is null)
					  UNION
						  SELECT (SELECT ar.account_number
							FROM hz_cust_accounts ar,
								hz_parties hp,
								oe_order_headers_all ooha
							WHERE ar.cust_account_id      =ooha.sold_to_org_id
							AND ar.party_id               =hp.party_id
							AND OOHA.HEADER_ID=OOLA.HEADER_ID) customer_number,
							(SELECT hp.party_name
								FROM hz_cust_accounts ar,
									hz_parties hp,
									oe_order_headers_all ooha
							WHERE ar.cust_account_id      =ooha.sold_to_org_id
							AND ar.party_id               =hp.party_id
							AND OOHA.HEADER_ID=OOLA.HEADER_ID) customer_name,
							(select order_number from oe_order_headers_all where header_id=oola.header_id) ORDER_NO,
							ood.organization_id ORGANIZATION_ID,
							oola.line_number LINE_NO,
							msib.segment1 INTERNAL_ITEM,
							oola.inventory_item_id INVENTORY_ITEM_ID,
							oola.ordered_quantity QUANTITY,
							oola.order_quantity_uom UOM,
							wdjv.wip_entity_name JOBNO,
							msib.segment1 ASSEMBLY,
							wdjv.job_type_meaning JOB_TYPE,
							wdjv.start_quantity JOB_QTY,
							oola.order_quantity_uom JOBUOM,
							wdjv.status_type_disp JOBSTATUS,
							oola.attribute16 TE,
							oola.attribute2 STOCKTYPE,
							oola.attribute3 INVENTORYCODE,
							oola.attribute4 SYSTEMID,
							oola.attribute5 FORMATNAME,
							oola.request_date REQUESTDATE,
							oola.promise_date PROMISEDATE,
							oola.schedule_ship_date SCHEDULESHIPDATE,
							msib.planner_code PLANNERCODE,
							ood.organization_code INVENTORYORG,
							mic.category_concat_segs PRODUCTIONMETHOD,
							(SELECT PBD.BATCH_STATUS
							FROM PX_BATCH_DETAILS_TAB PBD
							WHERE PBD.ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
							AND PBD.LINE_NO   =OOLA.LINE_NUMBER
							AND pbd.jobno     =wdjv.wip_entity_name
							and rownum=1
							UNION
							SELECT ''Open''
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
							  AND line_no   =oola.line_number
							  AND jobno     =wdjv.wip_entity_name
							  )
							) BATCH_STATUS,
							(SELECT batch_number
							FROM px_batch_details_tab
							WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
							AND line_no   =oola.line_number
							AND jobno     =wdjv.wip_entity_name
							and rownum=1
							UNION
							SELECT NULL
							FROM dual
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
							  AND line_no   =oola.line_number
							  AND jobno     =wdjv.wip_entity_name
							  )
							) BATCH_NUMBER,
							(SELECT batchtype
							FROM px_batch_details_tab
							WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
							AND line_no   =oola.line_number
							AND jobno     =wdjv.wip_entity_name
							and rownum=1
							UNION
							SELECT NULL
							FROM dual
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
							  AND LINE_NO   =OOLA.LINE_NUMBER
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) BATCHTYPE,
							(SELECT BATCH_CREATED_DATE
							FROM px_batch_details_tab
							WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
							AND LINE_NO   =OOLA.LINE_NUMBER
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
							  AND LINE_NO   =OOLA.LINE_NUMBER
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) BATCH_CREATED_DATE,
							(SELECT CReated_By
							FROM px_batch_details_tab
							WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
							AND LINE_NO   =OOLA.LINE_NUMBER
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
							  AND LINE_NO   =OOLA.LINE_NUMBER
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) CREATEDBY,
							(SELECT last_updated_date
							FROM px_batch_details_tab
							WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
							AND LINE_NO   =OOLA.LINE_NUMBER
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
							  AND LINE_NO   =OOLA.LINE_NUMBER
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) LAST_UPDATED_DATE ,
							(SELECT last_updated_by
							FROM px_batch_details_tab
							WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
							AND LINE_NO   =OOLA.LINE_NUMBER
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
							  AND LINE_NO   =OOLA.LINE_NUMBER
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) LAST_UPDATED_BY ,
							(SELECT released_date
							FROM px_batch_details_tab
							WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
							AND LINE_NO   =OOLA.LINE_NUMBER
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
							  AND LINE_NO   =OOLA.LINE_NUMBER
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) RELEASED_DATE ,
							(SELECT ELEMENT_VALUE
							FROM px_descr_element_values
							WHERE INVENTORY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
							AND ORGANIZATION_ID    =msib.ORGANIZATION_ID
							AND ELEMENT_NAME        =''Typesetting Method''
							and rownum=1
							) TYPESETTING_METHOD,
							(SELECT ELEMENT_VALUE
							FROM px_descr_element_values
							WHERE INVENTORY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
							AND ORGANIZATION_ID    =msib.ORGANIZATION_ID
							AND ELEMENT_NAME        =''Factory Spec Press Type''
							and rownum=1
							) PRESSTYPE,
							oola.header_id ORDER_HEADER_ID,
							oola.line_id ORDER_LINE_ID,
							(select element_value from px_descr_element_values
								where inventory_item_id=oola.inventory_item_id and element_name=''Batch Logic'' and organization_id=msib.ORGANIZATION_ID
								and rownum=1
							) batch_logic,
							(select element_value from px_descr_element_values
								where inventory_item_id=oola.inventory_item_id and element_name=''Subbatch Logic'' and organization_id=msib.ORGANIZATION_ID
								and rownum=1
							) subbatch_logic,
							OOLA.INVOICE_TO_ORG_ID bill_to,
							OOLA.SHIP_TO_ORG_ID ship_to,
							OOLA.cust_po_number cust_po,
							Wdjv.WIP_ENTITY_ID WIP_ENTITY_ID,
							(select name from hr_operating_units where organization_id=oola.org_id) OPERATING_UNIT,
								(select otl.NAME from oe_transaction_types_tl otl,oe_order_headers_all ooha
								where otl.TRANSACTION_TYPE_ID=ooha.ORDER_TYPE_ID
								and otl.language= userenv(''LANG'')
								and ooha.header_id=oola.header_id) ORDER_TYPE,
								(select mcb.CONCATENATED_SEGMENTS from
								MTL_ITEM_CATEGORIES mtc,
								MTL_CATEGORIES_B_KFV mcb
								where mcb.category_id=mtc.category_id
								and mtc.category_set_id=''1100000261''
								and mtc.INVENTORY_ITEM_ID=oola.inventory_item_id
								and mtc.ORGANIZATION_ID=ood.organization_id) FSC_CONTENT,
							(SELECT meaning
								FROM FND_LOOKUP_VALUES
								WHERE lookup_type=''SHIP_METHOD''
								AND language     =''US''
								and ENABLED_FLAG=''Y''
								and (END_DATE_ACTIVE is null or TRUNC(END_DATE_ACTIVE)>TRUNC(sysdate) )
								AND LOOKUP_CODE= oola.SHIPPING_METHOD_CODE
								) SHIPPING_METHOD	-- Added by Sarfaraz // NS-MOCK2-180 // 10-11-2022
						  FROM oe_order_lines_all oola,
							mtl_system_items_b msib,
							org_organization_definitions ood,
							WIP_DISCRETE_JOBS_V wdjv,
							mtl_item_categories_v mic,
							MTL_RESERVATIONS MR
						  WHERE oola.inventory_item_id    =msib.inventory_item_id
						and msib.organization_id      =ood.organization_id
						AND oola.FLOW_STATUS_CODE    IN (''PRODUCTION_OPEN'', ''PRODUCTION_PARTIAL'',''SUPPLY_ELIGIBLE'')
						AND OOLA.SHIP_FROM_ORG_ID     =ood.organization_id
						and ood.ORGANIZATION_ID IN (SELECT INVENTORY_ORG_ID FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||L_HEADER_ID||')
						and mic.organization_id       =ood.organization_id
						AND MIC.INVENTORY_ITEM_ID     =MSIB.INVENTORY_ITEM_ID
						AND mic.category_set_name     =''Production Methods''
						AND OOLA.LINE_ID              =MR.DEMAND_SOURCE_LINE_ID
						AND MR.SUPPLY_SOURCE_TYPE_ID  =5
						AND MR.ORGANIZATION_ID=OOD.ORGANIZATION_ID
						AND MR.SUPPLY_SOURCE_HEADER_ID=Wdjv.WIP_ENTITY_ID
						and OOD.ORGANIZATION_ID=WDJV.ORGANIZATION_ID
						AND wdjv.status_type_disp    IN (''Released'',''Unreleased'')
						  AND (SELECT count(*)
					FROM oe_hold_sources_all hs,
						 oe_hold_definitions hd,
						 oe_order_holds_all oh,
						 oe_order_headers_all oha,
						 oe_order_lines_all ola
				   WHERE 1 = 1
					 AND hs.hold_id = hd.hold_id
					 AND oh.hold_source_id = hs.hold_source_id
					 AND oh.header_id = oha.header_id
					 AND oha.header_id = ola.header_id
					 AND OH.LINE_ID = OLA.LINE_ID
					 AND OH.ORG_ID = OHA.ORG_ID
					 AND OH.RELEASED_FLAG = ''N''
					 AND HD.TYPE_CODE IN (SELECT meaning
				  FROM FND_LOOKUP_VALUES
				  WHERE lookup_type=''PX_ONT_AUTO_HOLD_EXCEPTION''
				  AND language     =''US''
				  AND ENABLED_FLAG=''Y''
				  AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE) ))
					 AND OLA.HEADER_ID = OOLA.HEADER_ID
					 AND ola.line_id = OOLA.LINE_ID) = 0
					  AND OOLA.HEADER_ID NOT IN (select ORDER_HEADER_ID from PAXAR.PX_BATCH_AUTO_SPL_TMP where order_header_id=OOLA.HEADER_ID and order_line_id=OOLA.LINE_ID AND BATCHING_TYPE=''Copy Change'')';

		end_of_query:='
			)
			  where BATCH_STATUS IN (''Open'',''Unbatched'')
			  --AND ORGANIZATION_ID = (SELECT INVENTORY_ORG_ID FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||L_HEADER_ID||')
			  AND PRESSTYPE  = (SELECT PRESS_TYPE FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||L_HEADER_ID||')
			  AND PX_AUTO_BATCHING_PKG.GET_COPY_CHANGE_STATUS(INVENTORY_ITEM_ID,ORGANIZATION_ID) = ''Y''';

		order_by := 'ORDER BY REQUESTDATE DESC';


		IF setup_data.CF_SEQ IS NULL THEN
			final_query:=main_query||' '||end_of_query||chr(10)||order_by;
		ELSE
			L_CF_QUERY:= fn_get_autobatch_cf_query(setup_data.CF_SEQ,AUTO_BATCH);
            final_query:=main_query||' '||end_of_query||chr(10)||' AND ( '||L_CF_QUERY||' ) '||chr(10)||order_by;
		END IF;

        pr_log_msg_auto('*****************************************************************************************');
        pr_log_msg_auto('Final Query  =======================>' );
        pr_log_msg_auto(final_query );
        pr_log_msg_auto('*****************************************************************************************');

		--fnd_file.put_line(fnd_file.log,final_query);

		L_ROWCOUNT:=0;
		OPEN C_GET_DATA_V FOR final_query;
		LOOP
			l_error := 'N';
			FETCH C_GET_DATA_V INTO get_data;
			EXIT WHEN C_GET_DATA_V%NOTFOUND;

			L_BATCH_LOGIC := get_data.BATCH_LOGIC;
			L_SUBBATCH_LOGIC := get_data.SUBBATCH_LOGIC;

			-- CHECKING BATCH_LOGIC AND SUBBATCH_LOGIC IS NULL
			IF L_BATCH_LOGIC IS NULL OR L_SUBBATCH_LOGIC IS NULL
            THEN
                lv_err_batching_msg := 'Batch Logic Or Subbatch Logic is Null';
				fnd_file.put_line(fnd_file.log,'ERROR');
				fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
				fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
				fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
				fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
				fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
				pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>  get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   =>'Copy Change'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );

				l_error := 'Y';
			ELSE
				-- CHECKING BATCH_LOGIC AND SUBBATCH_LOGIC IS VALID FOR COPY CHANGE
				OPEN CHECK_CC_BATCH_LOGIC(L_BATCH_LOGIC);
				FETCH CHECK_CC_BATCH_LOGIC INTO L_BL_STATUS;
				CLOSE CHECK_CC_BATCH_LOGIC;

				OPEN CHECK_CC_SUBBATCH_LOGIC(L_SUBBATCH_LOGIC);
				FETCH CHECK_CC_SUBBATCH_LOGIC INTO L_SBL_STATUS;
				CLOSE CHECK_CC_SUBBATCH_LOGIC;

				--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023S
				IF upper(L_BATCH_LOGIC)=upper('By GLID and Order Number') AND get_data.ORDER_NO IS NULL
				THEN
					lv_err_batching_msg :=  'We cannot execute ''By GLID and Order Number'' batch logic for these NON-ATO DJ''s';
					fnd_file.put_line(fnd_file.log,'ERROR');
					fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
					fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
					fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
					fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
					fnd_file.put_line(fnd_file.log,'Error Message:  '|| lv_err_batching_msg);

					pr_insert_Batch_error_record
                                            ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>  get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   => 'Color by Size'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                            );
					l_error := 'Y';
				--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023
				--- Added by Sarfaraz // NS-MOCK2-117 // 01.03.2023
				ELSIF upper(L_BATCH_LOGIC) IN (upper('By Stock Type and Format'))
						AND get_data.ORDER_NO IS NOT NULL
						AND get_data.FORMATNAME IS NULL
				THEN
					lv_err_batching_msg :=  'The Format Name is null, cannot execute Auto Batching ';
					fnd_file.put_line(fnd_file.log,'ERROR');
					fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
					fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
					fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
					fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
					fnd_file.put_line(fnd_file.log,'Error Message:  '|| lv_err_batching_msg);

					pr_insert_Batch_error_record
											( p_order_number     => get_data.ORDER_NO
												,p_line_no                 =>  get_data.LINE_NO
												,p_error_msg            =>   lv_err_batching_msg
												,p_batch_program   => 'Color by Size'
												,p_customer_name  =>  get_data.customer_name
												,p_assembly             =>    get_data.assembly
												,p_quantity               =>     get_data.quantity
												,p_presstype             =>   get_data.presstype
												,p_jobno                    =>   get_data.jobno
												,p_organization_code   =>      get_data.inventoryorg
												,p_productionmethod =>get_data.productionmethod
											);
					l_error := 'Y';
				--- Added by Sarfaraz // NS-MOCK2-117 // 01.03.2023
				ELSIF L_BL_STATUS = 0  OR L_SBL_STATUS = 0 THEN
					-- CHECK FOR COMBO FLAG
					LV_COMBO := GET_COMBO_STATUS(get_data.INVENTORY_ITEM_ID,get_data.ORGANIZATION_ID);

					IF LV_COMBO IN (UPPER('COMBO'),UPPER('VIPS AUTOBATCH')) THEN
						l_error := 'Y';
					END IF;

					IF l_error = 'N' THEN
                        lv_err_batching_msg := 'Batch Logic Or Subbatch Logic is not in the Copy Change Scenario';
						fnd_file.put_line(fnd_file.log,'ERROR');
						fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
						fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
						fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
						fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
						fnd_file.put_line(fnd_file.log,'Error Message: '||lv_err_batching_msg);
						pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>  get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   =>  'Copy Change'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );
						l_error := 'Y';
					END IF;
				ELSE
					L_HEADER_VALUE := NULL;
					OPEN C_GET_SKU_HEADER_DT(get_data.ORDER_NO,get_data.LINE_NO);
					FETCH C_GET_SKU_HEADER_DT INTO L_HEADER_VALUE;
					CLOSE C_GET_SKU_HEADER_DT;

					IF L_HEADER_VALUE IS NULL THEN
						L_VF_COUNT := NULL;
						OPEN C_GET_VF_COUNT(get_data.ORDER_HEADER_ID,get_data.ORDER_LINE_ID);
						FETCH C_GET_VF_COUNT INTO L_VF_COUNT;
						CLOSE C_GET_VF_COUNT;


					-- Added by sarfaraz // NS-MOCK2-100 // 26-10-2022
					L_VF_DT_COUNT := 0;
						OPEN C_GET_VF_DT_COUNT(get_data.ORDER_HEADER_ID,get_data.ORDER_LINE_ID);
						FETCH C_GET_VF_DT_COUNT INTO L_VF_DT_COUNT;
						CLOSE C_GET_VF_DT_COUNT;
					-- Added by sarfaraz // NS-MOCK2-100 // 26-10-2022


						--IF L_VF_COUNT IS NULL THEN     -- Commented by sarfaraz // NS-MOCK2-100 // 26-10-2022

						IF L_VF_DT_COUNT = 0 THEN   -- Added by sarfaraz // NS-MOCK2-100 // 26-10-2022
                            lv_err_batching_msg := 'Sales Order does not contain Variable Data';
							fnd_file.put_line(fnd_file.log,'ERROR');
							fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
							fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
							fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
							fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
							fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
							pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>  get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   =>  'Copy Change'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );
							l_error := 'Y';
						ELSE
							IF L_VF_COUNT > 1 THEN
                                lv_err_batching_msg := 'Copy Change item got multiple Variable data column defined in Sales Order';
								fnd_file.put_line(fnd_file.log,'ERROR');
								fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
								fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
								fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
								fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
								fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
								pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>  get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   =>'Copy Change'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );
								l_error := 'Y';
							ELSE
								lv_sku_form := 'Capture Form';
							END IF;
						END IF;
					ELSE
						OPEN c_header_count(L_HEADER_VALUE);
						FETCH c_header_count INTO LN_HEADER_COUNT;
						CLOSE c_header_count;

						IF LN_HEADER_COUNT > 1 THEN
                            lv_err_batching_msg := 'Copy Change item got multiple Variable data column defined in Sales Order';
							fnd_file.put_line(fnd_file.log,'ERROR');
							fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
							fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
							fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
							fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
							fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
							pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>  get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   =>'Copy Change'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );

							l_error := 'Y';
						ELSE
							lv_sku_form := 'Zoom Form';
						END IF;
					END IF;
				END IF;
			END IF;

			IF  get_data.quantity > setup_data.MAX_QTY_PER_BATCH OR get_data.JOB_QTY > setup_data.MAX_QTY_PER_BATCH
				THEN
                 lv_err_batching_msg :=  'The order quantity is over the ''Max Qty Per Batch'' in auto batching rule';
				fnd_file.put_line(fnd_file.log,'ERROR');
				fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
				fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
				fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
				fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
				fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
                pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>         get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   => 'Copy Change'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );
				l_error := 'Y';
				ELSIF GET_SKU_QTY(get_data.ORDER_LINE_ID) > setup_data.MAX_SKU_PER_BATCH and get_data.ORDER_NO IS NOT NULL
				THEN
                 lv_err_batching_msg :=  'The order SKU# is over the ''Max SKU Per Batch'' in auto batching rule';
				fnd_file.put_line(fnd_file.log,'ERROR');
				fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
				fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
				fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
				fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
				fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
                pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>         get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   => 'Copy Change'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );
				l_error := 'Y';
			END IF;

			fnd_file.put_line(fnd_file.log,l_error);
			IF l_error = 'N' THEN
				OPEN C_GET_PREFIX(get_data.INVENTORY_ITEM_ID,setup_data.INVENTORY_ORG_ID);
				FETCH C_GET_PREFIX INTO L_PREFIX,L_SUFFIX;
				CLOSE C_GET_PREFIX;


				INSERT INTO PAXAR.PX_BATCH_AUTO_SPL_TMP(
					CUSTOMER_NUMBER,
					CUSTOMER_NAME,
					ORDER_NO,
					LINE_NO,
					INTERNAL_ITEM,
					QUANTITY,
					UOM,
					JOBNO,
					ASSEMBLY,
					JOB_QTY,
					JOBUOM,
					JOBSTATUS,
					TE,
					STOCKTYPE,
					INVENTORYCODE,
					SYSTEMID,
					FORMATNAME,
					REQUESTDATE,
					PROMISEDATE,
					SCHEDULESHIPDATE,
					PLANNERCODE,
					INVENTORYORG,
					PRODUCTIONMETHOD,
					BATCH_STATUS,
					BATCH_NUMBER,
					BATCHTYPE,
					BATCH_CREATED_DATE,
					CREATEDBY,
					LAST_UPDATED_DATE,
					LAST_UPDATED_BY,
					RELEASED_DATE,
					TYPESETTING_METHOD,
					PRESSTYPE,
					ORDER_HEADER_ID,
					ORDER_LINE_ID,
					REQUEST_ID,
					INVENTORY_ITEM_ID,
					BATCH_LOGIC,
					SUBBATCH_LOGIC,
					BATCHING_TYPE,
					WIP_ENTITY_ID,
					BILL_TO,
					SHIP_TO,
					CUST_PO,
					OPERATING_UNIT,
					ORDER_TYPE,
					FSC_CONTENT
				)
				VALUES(
					get_data.CUSTOMER_NUMBER,
					get_data.CUSTOMER_NAME,
					get_data.ORDER_NO,
					get_data.LINE_NO,
					get_data.INTERNAL_ITEM,
					get_data.QUANTITY,
					get_data.UOM,
					get_data.JOBNO,
					get_data.ASSEMBLY,
					get_data.JOB_QTY,
					get_data.JOBUOM,
					get_data.JOBSTATUS,
					get_data.TE,
					get_data.STOCKTYPE,
					get_data.INVENTORYCODE,
					get_data.SYSTEMID,
					get_data.FORMATNAME,
					get_data.REQUESTDATE,
					get_data.PROMISEDATE,
					get_data.SCHEDULESHIPDATE,
					get_data.PLANNERCODE,
					get_data.INVENTORYORG,
					get_data.PRODUCTIONMETHOD,
					get_data.BATCH_STATUS,
					get_data.BATCH_NUMBER,
					'Auto',
					get_data.BATCH_CREATED_DATE,
					get_data.CREATEDBY,
					get_data.LAST_UPDATED_DATE,
					get_data.LAST_UPDATED_BY,
					get_data.RELEASED_DATE,
					get_data.TYPESETTING_METHOD,
					get_data.PRESSTYPE,
					get_data.ORDER_HEADER_ID,
					get_data.ORDER_LINE_ID,
					g_conc_request_id,
					get_data.INVENTORY_ITEM_ID,
					L_BATCH_LOGIC,
					L_SUBBATCH_LOGIC,
					'Copy Change',
					get_data.WIP_ENTITY_ID,
					get_data.BILL_TO,
					get_data.SHIP_TO,
					get_data.CUST_PO,
					get_data.OPERATING_UNIT,
					get_data.ORDER_TYPE,
					get_data.FSC_CONTENT
				);
				L_ROWCOUNT:=L_ROWCOUNT+1;

				fnd_file.put_line(fnd_file.log,get_data.ORDER_NO||' '||get_data.LINE_NO);
				IF lv_sku_form = 'Capture Form' THEN
					OPEN C_GET_VF_NAME(get_data.INVENTORY_ITEM_ID);
					FETCH C_GET_VF_NAME INTO L_VF_NAME;
					CLOSE C_GET_VF_NAME;

					FOR get_vf_data IN C_GET_VF_DT(get_data.ORDER_HEADER_ID,get_data.ORDER_LINE_ID)
					LOOP
						fnd_file.put_line(fnd_file.log,get_data.ORDER_NO);
						INSERT INTO paxar.PX_SUB_BATCH_AUTO_TMP(
							CUSTOMER_NUMBER,
							CUSTOMER_NAME,
							ORDER_NO,
							LINE_NO,
							INTERNAL_ITEM,
							UOM,
							JOBNO,
							ASSEMBLY,
							JOBSTATUS,
							FORMATNAME,
							PRODUCTIONMETHOD,
							BATCH_CREATED_DATE,
							CREATEDBY,
							LAST_UPDATED_DATE,
							LAST_UPDATED_BY,
							TYPESETTING_METHOD,
							BATCH_LOGIC,
							SUBBATCH_LOGIC,
							SEQ,
							SKU_VALUE,
							SKU_QTY,
							BATCH_PROGRAM,
							REQUEST_ID,
							INVENTORYORG,
							PRESSTYPE,
							QUANTITY,
							TE,
							STOCKTYPE,
							INVENTORYCODE,
							SYSTEMID,
							REQUESTDATE,
							PROMISEDATE,
							SCHEDULESHIPDATE,
							PLANNERCODE,
							JOB_QTY,
							JOBUOM,
							ORDER_HEADER_ID,
							ORDER_LINE_ID,
							WIP_ENTITY_ID,
							ITEM_PREFIX,
							ITEM_SUFFIX,
							VARIABLE_NAME,
							BATCHTYPE
						)
						VALUES
						(
							get_data.CUSTOMER_NUMBER,
							get_data.CUSTOMER_NAME,
							get_data.ORDER_NO,
							get_data.LINE_NO,
							get_data.INTERNAL_ITEM,
							get_data.UOM,
							get_data.JOBNO,
							get_data.ASSEMBLY,
							get_data.JOBSTATUS,
							get_data.FORMATNAME,
							get_data.PRODUCTIONMETHOD,
							get_data.BATCH_CREATED_DATE,
							get_data.CREATEDBY,
							get_data.LAST_UPDATED_DATE,
							get_data.LAST_UPDATED_BY,
							get_data.TYPESETTING_METHOD,
							L_BATCH_LOGIC,
							L_SUBBATCH_LOGIC,
							get_vf_data.SEQUENCE_NUMBER,
							get_vf_data.VARIABLE_DATA1,
							get_vf_data.ORDERED_QUANTITY,
							'Copy Change',
							g_conc_request_id,
							get_data.INVENTORYORG,
							get_data.PRESSTYPE,
							get_data.QUANTITY,
							get_data.TE,
							get_data.STOCKTYPE,
							get_data.INVENTORYCODE,
							get_data.SYSTEMID,
							get_data.REQUESTDATE,
							get_data.PROMISEDATE,
							get_data.SCHEDULESHIPDATE,
							get_data.PLANNERCODE,
							get_data.JOB_QTY,
							get_data.JOBUOM,
							get_data.ORDER_HEADER_ID,
							get_data.ORDER_LINE_ID,
							get_data.WIP_ENTITY_ID,
							L_PREFIX,
							L_SUFFIX,
							L_VF_NAME,
							'Auto'
						);
					END LOOP;
				END IF;

				IF lv_sku_form = 'Zoom Form' THEN
					OPEN C_GET_SKU_HEADER_DT(get_data.ORDER_NO,get_data.LINE_NO);
					FETCH C_GET_SKU_HEADER_DT INTO L_VF_NAME;
					CLOSE C_GET_SKU_HEADER_DT;

					FOR get_sku_data IN C_GET_SKU_DT(get_data.ORDER_NO,get_data.LINE_NO)
					LOOP
						INSERT INTO paxar.PX_SUB_BATCH_AUTO_TMP(
							CUSTOMER_NUMBER,
							CUSTOMER_NAME,
							ORDER_NO,
							LINE_NO,
							INTERNAL_ITEM,
							UOM,
							JOBNO,
							ASSEMBLY,
							JOBSTATUS,
							FORMATNAME,
							PRODUCTIONMETHOD,
							BATCH_CREATED_DATE,
							CREATEDBY,
							LAST_UPDATED_DATE,
							LAST_UPDATED_BY,
							TYPESETTING_METHOD,
							BATCH_LOGIC,
							SUBBATCH_LOGIC,
							SEQ,
							SKU_VALUE,
							SKU_QTY,
							BATCH_PROGRAM,
							ITEM_PREFIX,
							REQUEST_ID,
							PRESSTYPE,
							QUANTITY,
							INVENTORYORG,
							TE,
							STOCKTYPE,
							INVENTORYCODE,
							SYSTEMID,
							REQUESTDATE,
							PROMISEDATE,
							SCHEDULESHIPDATE,
							PLANNERCODE,
							JOB_QTY,
							JOBUOM,
							ORDER_HEADER_ID,
							ORDER_LINE_ID,
							WIP_ENTITY_ID,
							VARIABLE_NAME,
							ITEM_SUFFIX,
							BATCHTYPE
						)
						VALUES
						(
							get_data.CUSTOMER_NUMBER,
							get_data.CUSTOMER_NAME,
							get_data.ORDER_NO,
							get_data.LINE_NO,
							get_data.INTERNAL_ITEM,
							get_data.UOM,
							get_data.JOBNO,
							get_data.ASSEMBLY,
							get_data.JOBSTATUS,
							get_data.FORMATNAME,
							get_data.PRODUCTIONMETHOD,
							get_data.BATCH_CREATED_DATE,
							get_data.CREATEDBY,
							get_data.LAST_UPDATED_DATE,
							get_data.LAST_UPDATED_BY,
							get_data.TYPESETTING_METHOD,
							L_BATCH_LOGIC,
							L_SUBBATCH_LOGIC,
							get_sku_data.SEQUENCE,
							get_sku_data.value,
							get_sku_data.QTY,
							'Copy Change',
							L_PREFIX,
							g_conc_request_id,
							get_data.PRESSTYPE,
							get_data.QUANTITY,
							get_data.INVENTORYORG,
							get_data.TE,
							get_data.STOCKTYPE,
							get_data.INVENTORYCODE,
							get_data.SYSTEMID,
							get_data.REQUESTDATE,
							get_data.PROMISEDATE,
							get_data.SCHEDULESHIPDATE,
							get_data.PLANNERCODE,
							get_data.JOB_QTY,
							get_data.JOBUOM,
							get_data.ORDER_HEADER_ID,
							get_data.ORDER_LINE_ID,
							get_data.WIP_ENTITY_ID,
							L_VF_NAME,
							L_SUFFIX,
							'Auto'
						);
					END LOOP;
				END IF;
			END IF;
		END LOOP; --OPEN C_GET_DATA_V FOR final_query;
		CLOSE C_GET_DATA_V;

		IF L_ROWCOUNT > 0 THEN
			-- BATCH_LOGIC='By GLID'
			FOR rec_glid IN C_GLID_VF
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL; --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
                -- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_GLID_VF(rec_glid.internal_item)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					fnd_file.put_line(fnd_file.log,V_BATCH_NUMBER);
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID')     ---and upper(SUBBATCH_LOGIC)=upper('By Variable Field') commented by Sarfaraz 04.08.2022
					and request_id=g_conc_request_id
					AND upper(BATCHING_TYPE)=upper('Copy Change');

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID') and request_id=g_conc_request_id
					AND upper(BATCH_PROGRAM)=upper('Copy Change');
				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By GLID and Ship To'
			FOR rec_glid_ship IN cur_glid_ship
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;  --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
                -- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_glship(rec_glid_ship.internal_item,rec_glid_ship.SHIP_TO)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_ship.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Ship To')
					and request_id=g_conc_request_id
					AND upper(BATCHING_TYPE)=upper('Copy Change');    --BATCHING_TYPE='Copy Change'; Changed by Sarfaraz 04.08.2022

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_ship.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Ship To') and request_id=g_conc_request_id
					AND upper(BATCH_PROGRAM)=upper('Copy Change');
				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By GLID and Bill To'
			FOR rec_glid_bill IN cur_glid_bill
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL; --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
                -- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				fnd_file.put_line(fnd_file.log,'By GLID and Bill To'||rec_glid_bill.BILL_TO);
				FOR C1 IN CUR_BAT_glbill(rec_glid_bill.internal_item,rec_glid_bill.BILL_TO)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					fnd_file.put_line(fnd_file.log,'By GLID and Bill To'||C1.ORDER_NO);
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_bill.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Bill To') AND BILL_TO=rec_glid_bill.BILL_TO
					and request_id=g_conc_request_id
					AND upper(BATCHING_TYPE)=upper('Copy Change');     -- Added by Sarfaraz 04.08.2022
					--upper(BATCHING_TYPE)=('Copy Change');		 -- Commented by Sarfaraz 04.08.2022

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_bill.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Bill To') and request_id=g_conc_request_id
					AND upper(BATCH_PROGRAM)=upper('Copy Change');
				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By GLID and Customer PO'
			FOR rec_glid_po IN cur_glid_po
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;  --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
                -- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_glpo(rec_glid_po.internal_item,rec_glid_po.CUST_PO)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_po.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Customer PO') AND CUST_PO=rec_glid_po.CUST_PO
					and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Copy Change');

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_po.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Customer PO') and request_id=g_conc_request_id
					AND upper(BATCH_PROGRAM)=upper('Copy Change');
				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By GLID and Order Line'
			FOR rec_gllin IN CUR_GLLIN
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;  --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
                FOR C1 IN CUR_BAT_gllin(rec_gllin.internal_item,rec_gllin.order_no,rec_gllin.line_no,rec_gllin.jobno)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_gllin.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Order Line')
					and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Copy Change');

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_gllin.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Order Line') and request_id=g_conc_request_id
					AND upper(BATCH_PROGRAM)=upper('Copy Change');
				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By GLID and OM Order ID'
			FOR REC_GLOR IN CUR_GLOR
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;        --Commented By LINGARAJ 28JUL2022*/
               V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
               -- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_glor(rec_glor.internal_item,rec_glor.te)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glor.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and OM Order ID') and TE=rec_glor.te
					and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Copy Change');

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glor.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and OM Order ID') and request_id=g_conc_request_id
					AND upper(BATCH_PROGRAM)=upper('Copy Change');
				END LOOP;
			END LOOP;

			--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023
			-- BATCH_LOGIC='By GLID and Order Number'
			FOR REC IN CUR_GL_ON
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;        --Commented By LINGARAJ 28JUL2022*/
               V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
               -- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_GL_ON(rec.internal_item,rec.ORDER_NO)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=C1.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Order Number')
					and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Copy Change');

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=C1.internal_item AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By GLID and Order Number') and request_id=g_conc_request_id
					AND upper(BATCH_PROGRAM)=upper('Copy Change');
				END LOOP;
			END LOOP;
			--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023

			-- BATCH_LOGIC='By Stock Type'
			FOR REC_Stk IN CUR_Stk
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;  --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
                -- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_stk(rec_stk.stocktype)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE stocktype=rec_stk.stocktype AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By Stock Type')
					and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Copy Change');

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE stocktype=rec_stk.stocktype AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By Stock Type') and request_id=g_conc_request_id
					AND upper(BATCH_PROGRAM)=upper('Copy Change');
				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By Stock Type and Format'
			FOR REC_Stkfrm IN CUR_Stk_frm
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;   --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
                -- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_stkfrm(rec_stkfrm.stocktype,rec_stkfrm.formatname)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE STOCKTYPE=rec_stkfrm.STOCKTYPE and formatname=rec_stkfrm.formatname
					AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By Stock Type and Format')
					and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Copy Change');

					-- Update the Batch number in the SKU table for the sales order batch.
					UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE STOCKTYPE=rec_stkfrm.STOCKTYPE and formatname=rec_stkfrm.formatname
					AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By Stock Type and Format')
					and request_id=g_conc_request_id AND upper(BATCH_PROGRAM)=upper('Copy Change');
				END LOOP;
			END LOOP;

			-- SUBBATCH_LOGIC='By Variable Field'
			FOR get_bt IN C_GET_BT
			LOOP
				--fnd_file.put_line(fnd_file.log,'Sub-batching Loop: Batch Number:'||get_bt.BATCH_NUMBER);
				LN_SUBBATCH_COUNTER:=0;
				FOR C2 IN C_SUB_BAT_VF(get_bt.BATCH_NUMBER)
				LOOP
					LN_SUBBATCH_COUNTER:=LN_SUBBATCH_COUNTER+1;
					V_SUB_BATCH_NUMBER := get_bt.BATCH_NUMBER||'-'||LPAD(LN_SUBBATCH_COUNTER,3,0);
					--fnd_file.put_line(fnd_file.log,'Sub-batching Loop: Sub Batch Number:'||V_SUB_BATCH_NUMBER);
					FOR C3 IN CUR_SUB_BAT_VF(C2.SKU_VALUE,get_bt.BATCH_NUMBER)
					LOOP
						UPDATE PAXAR.PX_SUB_BATCH_AUTO_TMP
						SET	SUB_BATCH = V_SUB_BATCH_NUMBER
						WHERE SKU_VALUE=C2.SKU_VALUE AND BATCH_NUMBER=get_bt.BATCH_NUMBER
						AND ORDER_NO=C3.ORDER_NO and LINE_NO=C3.LINE_NO
						and request_id=g_conc_request_id AND upper(BATCH_PROGRAM)=upper('Copy Change');
					END LOOP;
				END LOOP;
			END LOOP;

			  INSERT INTO paxar.PX_BATCH_DETAILS_TAB
			  (
				BATCH_NUMBER
				,BATCH_STATUS
				,CUSTOMER_NUMBER
				,CUSTOMER_NAME
				,ORDER_NO
				,LINE_NO
				,INTERNAL_ITEM
				,QUANTITY
				,UOM
				,JOBNO
				,ASSEMBLY
				,JOB_QTY
				,JOBUOM
				,JOBSTATUS
				,TE
				,STOCKTYPE
				,INVENTORYCODE
				,SYSTEMID
				,FORMATNAME
				,REQUESTDATE
				,PROMISEDATE
				,SCHEDULESHIPDATE
				,PLANNERCODE
				,INVENTORYORG
				,PRODUCTIONMETHOD
				,BATCHTYPE
				,BATCH_CREATED_DATE
				,CREATED_BY
				,LAST_UPDATED_DATE
				,LAST_UPDATED_BY
				,RELEASED_DATE
				,TYPESETTING_METHOD
				,PRESSTYPE
				,SUB_BATCH
				,BATCH_LOGIC
				,BATCHING_TYPE
				,SUBBATCH_LOGIC
				,OE_HEADER_ID
				,OE_LINE_ID
				,WIP_ENTITY_ID
                ,REQUEST_ID,AUTO_BATCH_HEADER_ID,AUTO_BATCH_CONFIG_XML    -- Added By Lingaraj
			)
			(SELECT PBT.BATCH_NUMBER,PBT.BATCH_STATUS,PBT.CUSTOMER_NUMBER,PBT.CUSTOMER_NAME,PBT.ORDER_NO,PBT.LINE_NO,PBT.INTERNAL_ITEM,PBT.QUANTITY,PBT.UOM,PBT.JOBNO,PBT.ASSEMBLY,PBT.JOB_QTY,PBT.JOBUOM,
					PBT.JOBSTATUS,PBT.TE,PBT.STOCKTYPE,PBT.INVENTORYCODE,PBT.SYSTEMID,PBT.FORMATNAME,PBT.REQUESTDATE,PBT.PROMISEDATE,PBT.SCHEDULESHIPDATE,PBT.PLANNERCODE,PBT.INVENTORYORG,PBT.PRODUCTIONMETHOD,PBT.BATCHTYPE,
					PBT.BATCH_CREATED_DATE,PBT.CREATEDBY,PBT.LAST_UPDATED_DATE,PBT.LAST_UPDATED_BY,PBT.RELEASED_DATE,PBT.TYPESETTING_METHOD,PBT.PRESSTYPE,PBT.SUB_BATCH,PBT.BATCH_LOGIC,PBT.BATCHING_TYPE,PBT.SUBBATCH_LOGIC,
					PBT.ORDER_HEADER_ID,PBT.ORDER_LINE_ID,PBT.WIP_ENTITY_ID ,g_conc_request_id,ln_autobatch_header_id,lv_autobatch_Config
				FROM PAXAR.PX_BATCH_AUTO_SPL_TMP PBT where PBT.BATCH_STATUS  ='Batched' AND PBT.REQUEST_ID = g_conc_request_id AND PBT.BATCHING_TYPE='Copy Change'
				AND (SELECT COUNT(*) FROM APPS.PX_BATCH_DETAILS_TAB PT WHERE PT.JOBNO=PBT.JOBNO AND PT.SUB_BATCH IS NULL AND PT.BATCH_STATUS IN ('Batched','Released')) = 0);

			 INSERT INTO paxar.PX_BATCH_DETAILS_TAB
			 (
				BATCH_NUMBER
				,BATCH_STATUS
				,CUSTOMER_NUMBER
				,CUSTOMER_NAME
				,ORDER_NO
				,LINE_NO
				,INTERNAL_ITEM
				,QUANTITY
				,UOM
				,JOBNO
				,ASSEMBLY
				,JOB_QTY
				,JOBUOM
				,JOBSTATUS
				,TE
				,STOCKTYPE
				,INVENTORYCODE
				,SYSTEMID
				,FORMATNAME
				,REQUESTDATE
				,PROMISEDATE
				,SCHEDULESHIPDATE
				,PLANNERCODE
				,INVENTORYORG
				,PRODUCTIONMETHOD
				,BATCHTYPE
				,BATCH_CREATED_DATE
				,CREATED_BY
				,LAST_UPDATED_DATE
				,LAST_UPDATED_BY
				,RELEASED_DATE
				,TYPESETTING_METHOD
				,PRESSTYPE
				,SUB_BATCH
				,BATCH_LOGIC
				,BATCHING_TYPE
				,SUBBATCH_LOGIC
				,SEQ
				,SKU_QTY
				,OE_HEADER_ID
				,OE_LINE_ID
				,WIP_ENTITY_ID
				,INT_ITEM_PREFIX
				,INT_ITEM_SUFFIX
				,VARIABLE_VALUE
				,VARIABLE_NAME
                ,REQUEST_ID,AUTO_BATCH_HEADER_ID,AUTO_BATCH_CONFIG_XML        -- Added By Lingaraj
			 )
			 (SELECT PBT.BATCH_NUMBER,PBT.BATCH_STATUS,PBT.CUSTOMER_NUMBER,PBT.CUSTOMER_NAME,PBT.ORDER_NO,PBT.LINE_NO,PBT.INTERNAL_ITEM,PBT.QUANTITY,PBT.UOM,PBT.JOBNO,PBT.ASSEMBLY,PBT.JOB_QTY,PBT.JOBUOM,
					PBT.JOBSTATUS,PBT.TE,PBT.STOCKTYPE,PBT.INVENTORYCODE,PBT.SYSTEMID,PBT.FORMATNAME,PBT.REQUESTDATE,PBT.PROMISEDATE,PBT.SCHEDULESHIPDATE,PBT.PLANNERCODE,PBT.INVENTORYORG,PBT.PRODUCTIONMETHOD,PBT.BATCHTYPE,
					PBT.BATCH_CREATED_DATE,PBT.CREATEDBY,PBT.LAST_UPDATED_DATE,PBT.LAST_UPDATED_BY,PBT.RELEASED_DATE,PBT.TYPESETTING_METHOD,PBT.PRESSTYPE,PBT.SUB_BATCH,PBT.BATCH_LOGIC,PBT.BATCH_PROGRAM,PBT.SUBBATCH_LOGIC,PBT.SEQ,PBT.SKU_QTY,
					PBT.ORDER_HEADER_ID,PBT.ORDER_LINE_ID,PBT.WIP_ENTITY_ID,PBT.ITEM_PREFIX,PBT.ITEM_SUFFIX,PBT.SKU_VALUE,PBT.VARIABLE_NAME
                     ,g_conc_request_id,ln_autobatch_header_id,lv_autobatch_Config
				FROM PAXAR.PX_SUB_BATCH_AUTO_TMP PBT where PBT.BATCH_STATUS  ='Batched' AND PBT.REQUEST_ID = g_conc_request_id AND PBT.BATCH_PROGRAM='Copy Change'
				AND (SELECT COUNT(*) FROM APPS.PX_BATCH_DETAILS_TAB PT WHERE PT.JOBNO=PBT.JOBNO AND PT.SUB_BATCH IS NOT NULL AND PT.BATCH_STATUS IN ('Batched','Released')) = 0);
		commit;
		END IF;
	END LOOP; -- FOR setup_data in C_GET_SETUP(P_HEADER_ID)

  pr_log_msg_auto('+----------------------generate_batch_copy_change()  Exit----------------------+');

END GENERATE_BATCH_COPY_CHANGE; -- GENERATE_BATCH_COPY_CHANGE


PROCEDURE generate_batch_combo(P_HEADER_ID NUMBER) AS
	CURSOR C_GET_SETUP(P_SETUP_ID NUMBER) IS
	SELECT * FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T WHERE HEADER_ID=P_SETUP_ID;

	CURSOR C_GET_SEQ_HDR(P_SEQ_NO NUMBER) IS
	select HEADER_ID from PAXAR.PAXAR_OE_AUTO_BATCH_SEQ_HDR_T where cf_seqno=P_SEQ_NO;

	CURSOR C_GET_GROUP_ID(P_SEQ_HEADER_ID NUMBER) IS
	select group_id,count(*) g_count from PAXAR.PAXAR_OE_AUTO_BATCH_SEQ_LINE_T
    WHERE HEADER_ID=P_SEQ_HEADER_ID group by group_id;

	CURSOR C_GET_SEQ_LINE(P_SEQ_HEADER_ID NUMBER,P_GROUP_ID NUMBER) IS
	select operator_logic,parameter_details,operator_details,VALUE_FROM,VALUE_TO from PAXAR.PAXAR_OE_AUTO_BATCH_SEQ_LINE_T
	WHERE HEADER_ID=P_SEQ_HEADER_ID AND nvl(GROUP_ID,1)=nvl(P_GROUP_ID,1) order by TO_NUMBER(ATTRIBUTE1)/*operator_logic desc*/;

	CURSOR C_GET_PARAM_DET(P_PARAM_DESC VARCHAR2) IS
	  SELECT meaning
	  FROM FND_LOOKUP_VALUES
	  WHERE lookup_type='PAXAR_ONT_AUTO_SEQUENCE'
	  AND language     ='US'
	  AND ENABLED_FLAG='Y'
	  AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE) )
	  AND TAG='SQL' AND DESCRIPTION=P_PARAM_DESC;

	  CURSOR C_GET_OPERATOR_DET(P_OPERATOR_DESC VARCHAR2) IS
	  SELECT meaning
	  FROM FND_LOOKUP_VALUES
	  WHERE lookup_type='PAXAR_ONT_AUTO_SEQUENCE'
	  AND language     ='US'
	  AND ENABLED_FLAG='Y'
	  AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE) )
	  AND TAG='SEQ' AND DESCRIPTION=P_OPERATOR_DESC;

	CURSOR C_GET_PREFIX(P_IIID NUMBER,P_ORG_ID NUMBER) IS
	select ITEM_SCHEDULE_GROUP,ITEM_SUFFIX from PX_SPECSHEETS_ITEM where inventory_item_id=P_IIID AND organization_iD='3699';

	CURSOR C_GLID
	IS
		SELECT INTERNAL_ITEM FROM PAXAR.PX_BATCH_AUTO_SPL_TMP WHERE upper(BATCH_LOGIC)=upper('By GLID')
		and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Combo') GROUP BY INTERNAL_ITEM;

	CURSOR CUR_BAT_GLID(pin_item VARCHAR2)
	IS
		SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE upper(BATCH_LOGIC)=upper('By GLID') and INTERNAL_ITEM=PIN_ITEM
		and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Combo')
		ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR C_JOBID
	IS
		SELECT JOBID FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE upper(BATCH_LOGIC)=upper('By Job ID') and request_id=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Combo') GROUP BY JOBID;

	CURSOR CUR_BAT_JOBID(P_JOBID VARCHAR2)
	IS
		SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE upper(BATCH_LOGIC)=upper('By Job ID') and JOBID=P_JOBID
		and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Combo')
		ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR C_COMBO IS
	SELECT ASSEMBLY,QUANTITY FROM PAXAR.PX_BATCH_AUTO_SPL_TMP WHERE upper(BATCH_LOGIC)=upper('By Combo')
	and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Combo') GROUP BY ASSEMBLY,QUANTITY;

	CURSOR CUR_BAT_COMBO(P_ASSEMBLY VARCHAR2,P_QUANTITY NUMBER)
	IS
		SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP WHERE upper(BATCH_LOGIC)=upper('By Combo') and ASSEMBLY=P_ASSEMBLY AND QUANTITY=P_QUANTITY
		and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Combo') ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR C_SUB_GLID(P_BATCH_NO VARCHAR2) IS
	SELECT INTERNAL_ITEM FROM paxar.PX_BATCH_AUTO_SPL_TMP WHERE upper(SUBBATCH_LOGIC)=upper('By GLID')
	AND BATCH_NUMBER=P_BATCH_NO	and request_id=g_conc_request_id
	AND upper(BATCHING_TYPE)=upper('Combo') GROUP BY INTERNAL_ITEM;

	CURSOR CUR_SUB_BAT_GLID(P_INTERNAL_ITEM VARCHAR2,P_BATCH_NO VARCHAR2) IS
	SELECT * FROM paxar.PX_BATCH_AUTO_SPL_TMP
	WHERE INTERNAL_ITEM=P_INTERNAL_ITEM AND BATCH_NUMBER=P_BATCH_NO
	AND upper(SUBBATCH_LOGIC)=upper('By GLID') and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Combo');

	CURSOR cur_glid_ship
	IS
		SELECT pbd.INTERNAL_ITEM,SHIP_TO
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP PBD
		WHERE PBD.REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Combo') AND upper(BATCH_LOGIC)=upper('By GLID and Ship To')
		GROUP BY pbd.INTERNAL_ITEM,PBD.SHIP_TO;

	CURSOR CUR_BAT_glship(pin_item VARCHAR2,P_SHIP_TO VARCHAR2)
	IS
		SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=PIN_ITEM AND SHIP_TO=P_SHIP_TO
		AND upper(BATCHING_TYPE)=upper('Combo') AND upper(BATCH_LOGIC)=upper('By GLID and Ship To')
		AND REQUEST_ID=g_conc_request_id ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR cur_glid_bill
	IS
		SELECT PBD.INTERNAL_ITEM,PBD.BILL_TO
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP PBD
		WHERE PBD.REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Combo') AND upper(BATCH_LOGIC)=upper('By GLID and Bill To')
		GROUP BY PBD.INTERNAL_ITEM,PBD.BILL_TO;

	CURSOR CUR_BAT_glbill(pin_item VARCHAR2,P_BILL_TO VARCHAR2)
	IS
		SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=PIN_ITEM AND BILL_TO=P_BILL_TO
		AND upper(BATCHING_TYPE)=upper('Combo') AND upper(BATCH_LOGIC)=upper('By GLID and Bill To')
		AND REQUEST_ID=g_conc_request_id ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR cur_glid_po
	IS
		SELECT PBD.INTERNAL_ITEM,PBD.cust_po
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP PBD
		WHERE PBD.REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Combo') AND upper(BATCH_LOGIC)=upper('By GLID and Customer PO')
		GROUP BY PBD.INTERNAL_ITEM,PBD.cust_po;

	CURSOR CUR_BAT_glpo(pin_item VARCHAR2,P_CUST_PO VARCHAR2)
	IS
		SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=PIN_ITEM AND CUST_PO=P_CUST_PO
		AND upper(BATCHING_TYPE)=upper('Combo') AND upper(BATCH_LOGIC)=upper('By GLID and Customer PO')
		AND REQUEST_ID=g_conc_request_id ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR CUR_GLLIN
	IS
		SELECT INTERNAL_ITEM,ORDER_NO,LINE_NO,jobno
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP WHERE REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Combo') AND upper(BATCH_LOGIC)=upper('By GLID and Order Line')
		GROUP BY INTERNAL_ITEM, ORDER_NO,LINE_NO,jobno;

	  CURSOR CUR_BAT_GLLIN(pin_item VARCHAR2,P_ORDER_NO NUMBER,pin_line NUMBER,p_jobno VARCHAR2)
	  IS
		SELECT *
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=PIN_ITEM
		AND NVL(ORDER_NO,999)=NVL(P_ORDER_NO,999)
		AND NVL(line_no,999)=NVL(PIN_line,999)
		AND to_char(jobno)=to_char(p_jobno)
		AND upper(BATCHING_TYPE)=upper('Combo') AND upper(BATCH_LOGIC)=upper('By GLID and Order Line')
		and REQUEST_ID=g_conc_request_id ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR CUR_GLOR
	IS
		SELECT INTERNAL_ITEM,TE
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP WHERE REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Combo') AND upper(BATCH_LOGIC)=upper('By GLID and OM Order ID')
		GROUP BY INTERNAL_ITEM, TE;

	CURSOR CUR_BAT_GLOR(pin_item VARCHAR2,pin_te VARCHAR2)
	IS
		SELECT *
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=PIN_ITEM AND REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Combo') AND upper(BATCH_LOGIC)=upper('By GLID and OM Order ID')
		AND TE       =pin_te ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023
	CURSOR CUR_GL_ON
	IS
		SELECT INTERNAL_ITEM,ORDER_NO
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP WHERE REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Combo')
		AND upper(BATCH_LOGIC)=upper('By GLID and Order Number')
		GROUP BY INTERNAL_ITEM, ORDER_NO;

	CURSOR CUR_BAT_GL_ON(P_INTERNAL_ITEM VARCHAR2,P_ORDER_NO NUMBER)
	IS
		SELECT *
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE INTERNAL_ITEM=P_INTERNAL_ITEM AND REQUEST_ID=g_conc_request_id
		AND ORDER_NO       =P_ORDER_NO AND ORDER_NO IS NOT NULL
		AND upper(BATCHING_TYPE)=upper('Combo')
		AND upper(BATCH_LOGIC)=upper('By GLID and Order Number')
		ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;
	--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023

	CURSOR CUR_Stk
	IS
		SELECT Stocktype
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		where stocktype is not null AND REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Combo') AND upper(BATCH_LOGIC)=upper('By Stock Type')
		GROUP BY Stocktype;

	CURSOR CUR_BAT_Stk(pin_stk VARCHAR2)
	IS
		SELECT *
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE stocktype=pin_stk AND REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Combo') AND upper(BATCH_LOGIC)=upper('By Stock Type');

	CURSOR CUR_Stk_frm
	IS
		SELECT Stocktype,formatname
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP WHERE REQUEST_ID=g_conc_request_id
		AND upper(BATCHING_TYPE)=upper('Combo') AND upper(BATCH_LOGIC)=upper('By Stock Type and Format')
		GROUP BY Stocktype,formatname;

	CURSOR CUR_BAT_Stkfrm(pin_stk VARCHAR2,pin_formatname VARCHAR2)
	IS
		SELECT *
		FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
		WHERE STOCKTYPE=PIN_STK and formatname=pin_formatname
		AND upper(BATCHING_TYPE)=upper('Combo') AND upper(BATCH_LOGIC)=upper('By Stock Type and Format')
		AND REQUEST_ID=g_conc_request_id;

	CURSOR C_SUB_JOBID(P_BATCH_NO VARCHAR2) IS
	SELECT JOBID FROM paxar.PX_BATCH_AUTO_SPL_TMP WHERE upper(SUBBATCH_LOGIC)=upper('By Job ID')
	AND upper(BATCHING_TYPE)=upper('Combo') AND BATCH_NUMBER=P_BATCH_NO
	and request_id=g_conc_request_id GROUP BY JOBID;

	CURSOR CUR_SUB_BAT_JOBID(P_JOBID VARCHAR2,P_BATCH_NO VARCHAR2) IS
	SELECT * FROM paxar.PX_BATCH_AUTO_SPL_TMP
	WHERE JOBID=P_JOBID AND BATCH_NUMBER=P_BATCH_NO
	AND upper(SUBBATCH_LOGIC)=upper('By Job ID') and request_id=g_conc_request_id
	AND upper(BATCHING_TYPE)=upper('Combo');

	CURSOR C_GET_COMBO_REL(P_ITEM_NUMBER VARCHAR2,P_ORG_ID NUMBER) IS
	select psbiv.item_number
	from PX_SPECSHEETS_ITEM_V psiv,px_specsheets_base_items_v psbiv
	where psiv.specsheets_id=psbiv.specsheets_id
	and psiv.organization_id=psbiv.organization_id
	AND psbiv.SOURCE_FLAG='C' AND psbiv.INVENTORY_ITEM_STATUS_CODE='Active'
	and psiv.item_number=P_ITEM_NUMBER and psiv.organization_id='3699';

	CURSOR C_CHECK_COMBO_REL(P_COMBO_ITEM VARCHAR2) IS
	select psbiv.item_number
	from PX_SPECSHEETS_ITEM_V psiv,px_specsheets_base_items_v psbiv
	where psiv.specsheets_id=psbiv.specsheets_id
	and psiv.organization_id=psbiv.organization_id
	AND psbiv.SOURCE_FLAG='C' AND psbiv.INVENTORY_ITEM_STATUS_CODE='Active'
	and psiv.item_number=P_COMBO_ITEM and psiv.organization_id='3699';

	CURSOR C_GET_COMBO_REL_SOL(P_ASSEMBLY VARCHAR2,P_QUANTITY NUMBER) IS
	SELECT * FROM paxar.PX_BATCH_AUTO_SPL_TMP
	WHERE ASSEMBLY=P_ASSEMBLY AND QUANTITY=P_QUANTITY
	AND request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Combo') AND upper(BATCH_LOGIC)=upper('By Combo')
	ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	CURSOR C_GET_JOBID(P_ORDER_NO VARCHAR2,P_LINE_NO NUMBER) IS
	select DISCRETE_JOB
    from px_jobs_details_interface
    where ORACLE_ORDER=P_ORDER_NO
    and ORACLE_ORDER_LINE=P_LINE_NO;

	CURSOR C_GET_BT_GLID IS
	SELECT DISTINCT BATCH_NUMBER FROM paxar.PX_BATCH_AUTO_SPL_TMP
	WHERE upper(BATCHING_TYPE)=upper('Combo') AND upper(SUBBATCH_LOGIC) =upper('By GLID')
	and REQUEST_ID=g_conc_request_id;	-- Added by Sarfaraz 04.08.2022 get batch_number generated by current request

	CURSOR C_GET_BT_JOBID IS
	SELECT DISTINCT BATCH_NUMBER FROM paxar.PX_BATCH_AUTO_SPL_TMP
	WHERE upper(BATCHING_TYPE)=upper('Combo') AND upper(SUBBATCH_LOGIC) =upper('By JOB ID')
	and REQUEST_ID=g_conc_request_id;	-- Added by Sarfaraz 04.08.2022 get batch_number generated by current request

	CURSOR CHECK_COMBO_BATCH_LOGIC(P_BATCH_LOGIC VARCHAR2) IS
	SELECT COUNT(1) FROM (select DESCRIPTION
	from fnd_lookup_values
	where lookup_type='PX_NANSHA_BATCH_SUBBATCH_LOGIC'
	AND language='US'
	AND ENABLED_FLAG='Y'
	AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE))
	AND MEANING LIKE 'Combo%'
	UNION
	select DESCRIPTION
	from fnd_lookup_values
	where lookup_type='PX_NANSHA_BATCH_SUBBATCH_LOGIC'
	AND language='US'
	AND ENABLED_FLAG='Y'
	AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE))
	AND MEANING LIKE 'GENERIC%')
	WHERE DESCRIPTION=P_BATCH_LOGIC;

	CURSOR CHECK_COMBO_SUBBATCH_LOGIC(P_SUBBATCH_LOGIC VARCHAR2) IS
	select count(1)
	from fnd_lookup_values
	where lookup_type='PX_NANSHA_BATCH_SUBBATCH_LOGIC'
	AND language='US'
	AND ENABLED_FLAG='Y'
	AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE))
	AND MEANING LIKE 'Combo%'
	AND TAG=P_SUBBATCH_LOGIC;

	L_BL_STATUS NUMBER;
	L_SBL_STATUS NUMBER;

	TYPE C_GET_DATA IS REF CURSOR;
	C_GET_DATA_V C_GET_DATA;

	TYPE px_auto_batch_sols is record
	(
		CUSTOMER_NUMBER         NUMBER ,
		CUSTOMER_NAME           VARCHAR2(1000),
		ORDER_NO                NUMBER         ,
		ORGANIZATION_ID         NUMBER         ,
		LINE_NO                 NUMBER         ,
		INTERNAL_ITEM           VARCHAR2(100)  ,
		INVENTORY_ITEM_ID       NUMBER         ,
		QUANTITY                NUMBER         ,
		UOM                     VARCHAR2(50)   ,
		JOBNO                   VARCHAR2(100)  ,
		ASSEMBLY                VARCHAR2(100)  ,
		JOB_TYPE                VARCHAR2(1000) ,
		JOB_QTY                 NUMBER         ,
		JOBUOM                  VARCHAR2(50)   ,
		JOBSTATUS               VARCHAR2(50)   ,
		TE                      VARCHAR2(100)  ,
		STOCKTYPE               VARCHAR2(100)  ,
		INVENTORYCODE           VARCHAR2(100)  ,
		SYSTEMID                VARCHAR2(100)  ,
		FORMATNAME              VARCHAR2(100)  ,
		REQUESTDATE             DATE           ,
		PROMISEDATE             DATE           ,
		SCHEDULESHIPDATE        DATE           ,
		PLANNERCODE             VARCHAR2(100)  ,
		INVENTORYORG            VARCHAR2(100)  ,
		PRODUCTIONMETHOD        VARCHAR2(100)  ,
		BATCH_STATUS            VARCHAR2(20)   ,
		BATCH_NUMBER            VARCHAR2(100)  ,
		BATCHTYPE               VARCHAR2(100)  ,
		BATCH_CREATED_DATE      DATE           ,
		CREATEDBY               VARCHAR2(1000) ,
		LAST_UPDATED_DATE       DATE           ,
		LAST_UPDATED_BY         VARCHAR2(1000) ,
		RELEASED_DATE           DATE           ,
		TYPESETTING_METHOD      VARCHAR2(1000) ,
		PRESSTYPE               VARCHAR2(1000) ,
		ORDER_HEADER_ID         NUMBER         ,
		ORDER_LINE_ID           NUMBER         ,
		BATCH_LOGIC             VARCHAR2(4000) ,
		SUBBATCH_LOGIC          VARCHAR2(4000) ,
		BILL_TO                 VARCHAR2(4000) ,
		SHIP_TO                 VARCHAR2(4000) ,
		CUST_PO                 VARCHAR2(4000),
		WIP_ENTITY_ID			VARCHAR2(4000),
		OPERATING_UNIT			VARCHAR2(4000),
		ORDER_TYPE				VARCHAR2(4000),
		FSC_CONTENT				VARCHAR2(4000),
		SHIPPING_METHOD			VARCHAR2(4000)	-- Added by Sarfaraz // NS-MOCK2-180 // 10-11-2022
	);

	get_data px_auto_batch_sols;

	start_of_query long;
	end_of_query long;
	main_query long;
	order_by long;

	object_details_query long;
	L_OPERATOR_LOGIC VARCHAR2(1000);
	L_OBJECT_DETAILS VARCHAR2(1000);
	L_PARAMETER_DETAILS VARCHAR2(1000);
	L_OPERATOR_DETAILS VARCHAR2(1000);
	L_VALUE_FROM_DETAILS VARCHAR2(1000);
	L_VALUE_TO_DETAILS VARCHAR2(1000);
	L_PARAM_COLUMN VARCHAR2(1000);
	L_OPERATOR_VALUE VARCHAR2(1000);

	L_OPERATOR_DETAILS_QUERY LONG;
	L_CF_QUERY LONG;

	final_query long;

	L_VALUE VARCHAR2(1000);
	L_HEADER_ID NUMBER;
	L_BATCH_LOGIC VARCHAR2(4000);
	L_SUBBATCH_LOGIC VARCHAR2(4000);
	V_BATCH_NUMBER VARCHAR2(10000);
	V_SUB_BATCH_NUMBER VARCHAR2(10000);
	l_count NUMBER;
	l_error varchar2(10):='N';
	LN_SUBBATCH_COUNTER NUMBER:=0;
	i number;
	j number;
	L_ROWCOUNT NUMBER:=0;
	L_COUNTER NUMBER;
	l_demo number;
	L_PREFIX VARCHAR2(4000);
	L_SUFFIX VARCHAR2(4000);
	LN_COMBO_COUNTER NUMBER;
	LV_JOBID VARCHAR2(4000);

    ln_autobatch_header_id Number;            -- Added By Lingaraj
    lv_autobatch_Config      XmlType  ; -- Added By Lingaraj
    ln_rule_cnt Number ; -- Lingaraj
    lv_err_batching_msg  Varchar2(1000);

	-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
	L_SOL_COUNT NUMBER;
	L_MAX_ORDER_QTY NUMBER;
	L_MAX_SKU_QTY NUMBER;
	L_REQUEST_DATE varchar2(2000);
	L_REQUEST_DATE_COUNT NUMBER;
	-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250

	LV_UNIQUE_ID number;
BEGIN
    pr_log_msg_auto('+----------------------generate_batch_combo()  Called----------------------+');
-- Get Auto Batch Header ID and Config info
     pr_get_autobatch_config_info(p_request_id => g_conc_request_id,
                                                          p_autobatch_header_id  => ln_autobatch_header_id ,
                                                          p_autobatch_config        => lv_autobatch_Config
                                                          );

	FOR setup_data in C_GET_SETUP(P_HEADER_ID)
	LOOP
		L_HEADER_ID := setup_data.header_id;

		main_query:= 'SELECT customer_number,
						customer_name,
						order_no,
						organization_id,
						line_no,
						internal_item,
						inventory_item_id,
						quantity,
						uom,
						jobno,
						assembly,
						job_type,
						job_qty,
						jobuom,
						jobstatus,
						te,
						stocktype,
						inventorycode,
						systemid,
						formatname,
						requestdate,
						promisedate,
						scheduleshipdate,
						plannercode,
						inventoryorg,
						productionmethod,
						batch_status,
						batch_number,
						batchtype,
						BATCH_CREATED_DATE,
						CREATEDBY,
						LAST_UPDATED_DATE,
						LAST_UPDATED_BY,
						RELEASED_DATE,
						TYPESETTING_METHOD,
						PRESSTYPE,
						ORDER_HEADER_ID,
						ORDER_LINE_ID,
						batch_logic,
						subbatch_logic,
						bill_to,
						ship_to,
						cust_po,
						WIP_ENTITY_ID,
						OPERATING_UNIT,
						ORDER_TYPE,
						FSC_CONTENT,
						SHIPPING_METHOD	-- Added by Sarfaraz // NS-MOCK2-180 // 10-11-2022
						FROM
					  (SELECT null customer_number,
							null customer_name,
							null ORDER_NO,
							ood.organization_id ORGANIZATION_ID,
							null LINE_NO,
							msib.segment1 INTERNAL_ITEM,
							MSIB.INVENTORY_ITEM_ID INVENTORY_ITEM_ID,
							to_number('''') QUANTITY,
							null UOM,
							wdjv.wip_entity_name JOBNO,
							msib.segment1 ASSEMBLY,
							wdjv.job_type_meaning JOB_TYPE,
							wdjv.start_quantity JOB_QTY,
							msib.PRIMARY_UOM_CODE JOBUOM,
							Decode ((SELECT PBD.BATCH_STATUS
								FROM PX_BATCH_DETAILS_TAB PBD
								WHERE 1=1
								AND pbd.jobno     =wdjv.wip_entity_name and rownum=1) ,''Released'',''Released'',wdjv.status_type_disp) JOBSTATUS,
							null TE,
							null STOCKTYPE,
							null INVENTORYCODE,
							null SYSTEMID,
							null FORMATNAME,
							null REQUESTDATE,
							null PROMISEDATE,
							null SCHEDULESHIPDATE,
							msib.planner_code PLANNERCODE,
							ood.organization_code INVENTORYORG,
							mic.category_concat_segs PRODUCTIONMETHOD,
							(SELECT PBD.BATCH_STATUS
							FROM PX_BATCH_DETAILS_TAB PBD
							WHERE 1=1
							AND pbd.jobno     =wdjv.wip_entity_name
							and rownum=1
							UNION
							SELECT ''Open''
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE 1=1
							  AND jobno     =wdjv.wip_entity_name
							  )
							) BATCH_STATUS,
							(SELECT batch_number
							FROM px_batch_details_tab
							WHERE 1=1
							AND jobno     =wdjv.wip_entity_name
							and rownum=1
							UNION
							SELECT '' ''
							FROM dual
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE 1=1
							  AND jobno     =wdjv.wip_entity_name
							  )
							) BATCH_NUMBER,
							(SELECT batchtype
							FROM px_batch_details_tab
							WHERE 1=1
							AND jobno     =wdjv.wip_entity_name
							and rownum=1
							UNION
							SELECT '' ''
							FROM dual
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) BATCHTYPE,
							(SELECT BATCH_CREATED_DATE
							FROM px_batch_details_tab
							WHERE  1=1
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) BATCH_CREATED_DATE,
							(SELECT CReated_By
							FROM px_batch_details_tab
							WHERE  1=1
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) CREATEDBY,
							(SELECT last_updated_date
							FROM px_batch_details_tab
							WHERE  1=1
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) LAST_UPDATED_DATE ,
							(SELECT last_updated_by
							FROM px_batch_details_tab
							WHERE  1=1
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) LAST_UPDATED_BY ,
							(SELECT released_date
							FROM px_batch_details_tab
							WHERE  1=1
							AND JOBNO     =WDJV.WIP_ENTITY_NAME
							and rownum=1
							UNION
							SELECT NULL
							FROM DUAL
							WHERE NOT EXISTS
							  (SELECT *
							  FROM PX_BATCH_DETAILS_TAB
							  WHERE  1=1
							  AND JOBNO     =WDJV.WIP_ENTITY_NAME
							  )
							) RELEASED_DATE ,
							(SELECT distinct ELEMENT_VALUE
							FROM px_descr_element_values
							WHERE INVENTORY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
							AND ORGANIZATION_ID    =msib.ORGANIZATION_ID
							AND ELEMENT_NAME        =''Typesetting Method''
							and rownum=1
							) TYPESETTING_METHOD,
							(SELECT distinct ELEMENT_VALUE
							FROM px_descr_element_values
							WHERE INVENTORY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
							AND ORGANIZATION_ID    =msib.ORGANIZATION_ID
							AND ELEMENT_NAME        =''Factory Spec Press Type''
							and rownum=1
							) PRESSTYPE,
							null ORDER_HEADER_ID,
							null ORDER_LINE_ID,
							(select element_value from px_descr_element_values
								where inventory_item_id=MSIB.INVENTORY_ITEM_ID and element_name=''Batch Logic'' and organization_id=msib.ORGANIZATION_ID
								and rownum=1
							) batch_logic,
							(select element_value from px_descr_element_values
								where inventory_item_id=MSIB.INVENTORY_ITEM_ID and element_name=''Subbatch Logic'' and organization_id=msib.ORGANIZATION_ID
								and rownum=1
							) subbatch_logic,
							null bill_to,
							null ship_to,
							null cust_po,
							WDJV.WIP_ENTITY_ID WIP_ENTITY_ID,
							null OPERATING_UNIT,
							null ORDER_TYPE,
							(select mcb.CONCATENATED_SEGMENTS from
								MTL_ITEM_CATEGORIES mtc,
								MTL_CATEGORIES_B_KFV mcb
								where mcb.category_id=mtc.category_id
								and mtc.category_set_id=''1100000261''
								and mtc.INVENTORY_ITEM_ID=MSIB.inventory_item_id
								and mtc.ORGANIZATION_ID=ood.organization_id) FSC_CONTENT,
							null SHIPPING_METHOD	-- Added by Sarfaraz // NS-MOCK2-180 // 10-11-2022
							FROM
								WIP_DISCRETE_JOBS_V WDJV,MTL_SYSTEM_ITEMS_B MSIB,ORG_ORGANIZATION_DEFINITIONS OOD,MTL_ITEM_CATEGORIES_V MIC
							 WHERE ood.ORGANIZATION_ID IN (SELECT INVENTORY_ORG_ID FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||L_HEADER_ID||')
							AND WDJV.STATUS_TYPE_DISP IN (''Released'',''Unreleased'')
							AND WDJV.PRIMARY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
							AND WDJV.ORGANIZATION_ID=MSIB.ORGANIZATION_ID
							AND WDJV.ORGANIZATION_ID=OOD.ORGANIZATION_ID
							AND MIC.INVENTORY_ITEM_ID     =MSIB.INVENTORY_ITEM_ID
							AND MIC.CATEGORY_SET_NAME     =''Production Methods''
							AND MIC.ORGANIZATION_ID=OOD.ORGANIZATION_ID
							AND nvl(msib.replenish_to_order_flag,''N'') = ''N''
							  and wdjv.wip_entity_name not in (SELECT jobno from PAXAR.PX_BATCH_AUTO_SPL_TMP where jobno=wdjv.wip_entity_name and order_no is null)
						UNION
							SELECT (SELECT ar.account_number
									FROM hz_cust_accounts ar,
										hz_parties hp,
									oe_order_headers_all ooha
								WHERE ar.cust_account_id      =ooha.sold_to_org_id
								AND ar.party_id               =hp.party_id
								AND OOHA.HEADER_ID=OOLA.HEADER_ID) customer_number,
										(SELECT hp.party_name
								FROM hz_cust_accounts ar,
														hz_parties hp,
											oe_order_headers_all ooha
								WHERE ar.cust_account_id      =ooha.sold_to_org_id
								AND ar.party_id               =hp.party_id
								AND OOHA.HEADER_ID=OOLA.HEADER_ID) customer_name,
								(select order_number from oe_order_headers_all where header_id=oola.header_id) ORDER_NO,
									ood.organization_id ORGANIZATION_ID,
									oola.line_number LINE_NO,
									msib.segment1 INTERNAL_ITEM,
									oola.inventory_item_id INVENTORY_ITEM_ID,
									oola.ordered_quantity QUANTITY,
									oola.order_quantity_uom UOM,
									wdjv.wip_entity_name JOBNO,
									msib.segment1 ASSEMBLY,
									wdjv.job_type_meaning JOB_TYPE,
									wdjv.start_quantity JOB_QTY,
									oola.order_quantity_uom JOBUOM,
									wdjv.status_type_disp JOBSTATUS,
									oola.attribute16 TE,
									oola.attribute2 STOCKTYPE,
									oola.attribute3 INVENTORYCODE,
									oola.attribute4 SYSTEMID,
									oola.attribute5 FORMATNAME,
									oola.request_date REQUESTDATE,
									oola.promise_date PROMISEDATE,
									oola.schedule_ship_date SCHEDULESHIPDATE,
									msib.planner_code PLANNERCODE,
									ood.organization_code INVENTORYORG,
									mic.category_concat_segs PRODUCTIONMETHOD,
									(SELECT PBD.BATCH_STATUS
									FROM PX_BATCH_DETAILS_TAB PBD
									WHERE PBD.ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
									AND PBD.LINE_NO   =OOLA.LINE_NUMBER
									AND nvl(pbd.jobno,''X'')     =nvl(wdjv.wip_entity_name,''X'')
									and rownum=1
									UNION
									SELECT ''Open''
									FROM DUAL
									WHERE NOT EXISTS
									  (SELECT *
									  FROM PX_BATCH_DETAILS_TAB
									  WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
									  AND line_no   =oola.line_number
									  AND nvl(jobno,''X'')     =nvl(wdjv.wip_entity_name,''X'')
									  )
									) BATCH_STATUS,
									(SELECT batch_number
									FROM px_batch_details_tab
									WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
									AND line_no   =oola.line_number
									AND nvl(jobno,''X'')     =nvl(wdjv.wip_entity_name,''X'')
									and rownum=1
									UNION
									SELECT NULL
									FROM dual
									WHERE NOT EXISTS
									  (SELECT *
									  FROM PX_BATCH_DETAILS_TAB
									  WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
									  AND line_no   =oola.line_number
									  AND nvl(jobno,''X'')     =nvl(wdjv.wip_entity_name,''X'')
									  )
									) BATCH_NUMBER,
									(SELECT batchtype
									FROM px_batch_details_tab
									WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
									AND line_no   =oola.line_number
									AND jobno     =wdjv.wip_entity_name
									and rownum=1
									UNION
									SELECT NULL
									FROM dual
									WHERE NOT EXISTS
									  (SELECT *
									  FROM PX_BATCH_DETAILS_TAB
									  WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
									  AND LINE_NO   =OOLA.LINE_NUMBER
									  AND JOBNO     =WDJV.WIP_ENTITY_NAME
									  )
									) BATCHTYPE,
									(SELECT BATCH_CREATED_DATE
									FROM px_batch_details_tab
									WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
									AND LINE_NO   =OOLA.LINE_NUMBER
									AND JOBNO     =WDJV.WIP_ENTITY_NAME
									and rownum=1
									UNION
									SELECT NULL
									FROM DUAL
									WHERE NOT EXISTS
									  (SELECT *
									  FROM PX_BATCH_DETAILS_TAB
									  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
									  AND LINE_NO   =OOLA.LINE_NUMBER
									  AND JOBNO     =WDJV.WIP_ENTITY_NAME
									  )
									) BATCH_CREATED_DATE,
									(SELECT CReated_By
									FROM px_batch_details_tab
									WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
									AND LINE_NO   =OOLA.LINE_NUMBER
									AND JOBNO     =WDJV.WIP_ENTITY_NAME
									and rownum=1
									UNION
									SELECT NULL
									FROM DUAL
									WHERE NOT EXISTS
									  (SELECT *
									  FROM PX_BATCH_DETAILS_TAB
									  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
									  AND LINE_NO   =OOLA.LINE_NUMBER
									  AND JOBNO     =WDJV.WIP_ENTITY_NAME
									  )
									) CREATEDBY,
									(SELECT last_updated_date
									FROM px_batch_details_tab
									WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
									AND LINE_NO   =OOLA.LINE_NUMBER
									AND JOBNO     =WDJV.WIP_ENTITY_NAME
									and rownum=1
									UNION
									SELECT NULL
									FROM DUAL
									WHERE NOT EXISTS
									  (SELECT *
									  FROM PX_BATCH_DETAILS_TAB
									  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
									  AND LINE_NO   =OOLA.LINE_NUMBER
									  AND JOBNO     =WDJV.WIP_ENTITY_NAME
									  )
									) LAST_UPDATED_DATE ,
									(SELECT last_updated_by
									FROM px_batch_details_tab
									WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
									AND LINE_NO   =OOLA.LINE_NUMBER
									AND JOBNO     =WDJV.WIP_ENTITY_NAME
									and rownum=1
									UNION
									SELECT NULL
									FROM DUAL
									WHERE NOT EXISTS
									  (SELECT *
									  FROM PX_BATCH_DETAILS_TAB
									  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
									  AND LINE_NO   =OOLA.LINE_NUMBER
									  AND JOBNO     =WDJV.WIP_ENTITY_NAME
									  )
									) LAST_UPDATED_BY ,
									(SELECT released_date
									FROM px_batch_details_tab
									WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
									AND LINE_NO   =OOLA.LINE_NUMBER
									AND JOBNO     =WDJV.WIP_ENTITY_NAME
									and rownum=1
									UNION
									SELECT NULL
									FROM DUAL
									WHERE NOT EXISTS
									  (SELECT *
									  FROM PX_BATCH_DETAILS_TAB
									  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
									  AND LINE_NO   =OOLA.LINE_NUMBER
									  AND JOBNO     =WDJV.WIP_ENTITY_NAME
									  )
									) RELEASED_DATE ,
									(SELECT ELEMENT_VALUE
									FROM px_descr_element_values
									WHERE INVENTORY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
									AND ORGANIZATION_ID    =msib.ORGANIZATION_ID
									AND ELEMENT_NAME        =''Typesetting Method''
									and rownum=1
									) TYPESETTING_METHOD,
									(SELECT ELEMENT_VALUE
									FROM px_descr_element_values
									WHERE INVENTORY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
									AND ORGANIZATION_ID    =msib.ORGANIZATION_ID
									AND ELEMENT_NAME        =''Factory Spec Press Type''
									and rownum=1
									) PRESSTYPE,
									oola.header_id ORDER_HEADER_ID,
									oola.line_id ORDER_LINE_ID,
									(select element_value from px_descr_element_values
										where inventory_item_id=oola.inventory_item_id and element_name=''Batch Logic'' and organization_id=msib.ORGANIZATION_ID
										and rownum=1
									) batch_logic,
									(select element_value from px_descr_element_values
										where inventory_item_id=oola.inventory_item_id and element_name=''Subbatch Logic'' and organization_id=msib.ORGANIZATION_ID
										and rownum=1
									) subbatch_logic,
									OOLA.INVOICE_TO_ORG_ID bill_to,
									OOLA.SHIP_TO_ORG_ID ship_to,
									OOLA.cust_po_number cust_po,
									WDJV.WIP_ENTITY_ID WIP_ENTITY_ID,
									(select name from hr_operating_units where organization_id=oola.org_id) OPERATING_UNIT,
								(select otl.NAME from oe_transaction_types_tl otl,oe_order_headers_all ooha
								where otl.TRANSACTION_TYPE_ID=ooha.ORDER_TYPE_ID
								and otl.language= userenv(''LANG'')
								and ooha.header_id=oola.header_id) ORDER_TYPE,
								(select mcb.CONCATENATED_SEGMENTS from
								MTL_ITEM_CATEGORIES mtc,
								MTL_CATEGORIES_B_KFV mcb
								where mcb.category_id=mtc.category_id
								and mtc.category_set_id=''1100000261''
								and mtc.INVENTORY_ITEM_ID=oola.inventory_item_id
								and mtc.ORGANIZATION_ID=ood.organization_id) FSC_CONTENT,
								(SELECT meaning
								FROM FND_LOOKUP_VALUES
								WHERE lookup_type=''SHIP_METHOD''
								AND language     =''US''
								and ENABLED_FLAG=''Y''
								and (END_DATE_ACTIVE is null or TRUNC(END_DATE_ACTIVE)>TRUNC(sysdate) )
								AND LOOKUP_CODE= oola.SHIPPING_METHOD_CODE
								) SHIPPING_METHOD	-- Added by Sarfaraz // NS-MOCK2-180 // 10-11-2022
								  FROM oe_order_lines_all oola,
										mtl_system_items_b msib,
										org_organization_definitions ood,
										WIP_DISCRETE_JOBS_V wdjv,
										mtl_item_categories_v mic,
										MTL_RESERVATIONS MR
								WHERE oola.inventory_item_id    =msib.inventory_item_id
									and msib.organization_id      =ood.organization_id
									AND oola.FLOW_STATUS_CODE    IN (''PRODUCTION_OPEN'', ''PRODUCTION_PARTIAL'',''SUPPLY_ELIGIBLE'')
									AND OOLA.SHIP_FROM_ORG_ID     =ood.organization_id
									and ood.ORGANIZATION_ID IN (SELECT INVENTORY_ORG_ID FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||L_HEADER_ID||')
									and mic.organization_id       =ood.organization_id
									AND MIC.INVENTORY_ITEM_ID     =MSIB.INVENTORY_ITEM_ID
									AND mic.category_set_name     =''Production Methods''
									AND OOLA.LINE_ID              =MR.DEMAND_SOURCE_LINE_ID
									AND MR.SUPPLY_SOURCE_TYPE_ID  =5
									AND MR.ORGANIZATION_ID=OOD.ORGANIZATION_ID
									AND MR.SUPPLY_SOURCE_HEADER_ID=Wdjv.WIP_ENTITY_ID
									and OOD.ORGANIZATION_ID=WDJV.ORGANIZATION_ID
									AND wdjv.status_type_disp    IN (''Released'',''Unreleased'')
								  AND (SELECT count(*)
							FROM oe_hold_sources_all hs,
								 oe_hold_definitions hd,
								 oe_order_holds_all oh,
								 oe_order_headers_all oha,
								 oe_order_lines_all ola
						   WHERE 1 = 1
							 AND hs.hold_id = hd.hold_id
							 AND oh.hold_source_id = hs.hold_source_id
							 AND oh.header_id = oha.header_id
							 AND oha.header_id = ola.header_id
							 AND OH.LINE_ID = OLA.LINE_ID
							 AND OH.ORG_ID = OHA.ORG_ID
							 AND OH.RELEASED_FLAG = ''N''
							 AND HD.TYPE_CODE IN (SELECT meaning
					  FROM FND_LOOKUP_VALUES
					  WHERE lookup_type=''PX_ONT_AUTO_HOLD_EXCEPTION''
					  AND language     =''US''
					  AND ENABLED_FLAG=''Y''
					  AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE) ))
						 AND OLA.HEADER_ID = OOLA.HEADER_ID
						 AND ola.line_id = OOLA.LINE_ID) = 0
					  AND OOLA.HEADER_ID NOT IN (select ORDER_HEADER_ID from PAXAR.PX_BATCH_AUTO_SPL_TMP where order_header_id=OOLA.HEADER_ID and order_line_id=OOLA.LINE_ID AND BATCHING_TYPE=''Combo'')';

		end_of_query:='
			)
			  where BATCH_STATUS IN (''Open'',''Unbatched'')
			  --AND ORGANIZATION_ID = (SELECT INVENTORY_ORG_ID FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||L_HEADER_ID||')
			  AND PRESSTYPE  = (SELECT PRESS_TYPE FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||L_HEADER_ID||')
			  AND PX_AUTO_BATCHING_PKG.GET_COMBO_STATUS(INVENTORY_ITEM_ID,ORGANIZATION_ID) IN (UPPER(''COMBO''),UPPER(''VIPS AUTOBATCH''))';

		order_by := 'ORDER BY REQUESTDATE DESC';

		IF setup_data.CF_SEQ IS NULL THEN
			final_query:=main_query||' '||end_of_query||chr(10)||order_by;
		ELSE
			L_CF_QUERY:= fn_get_autobatch_cf_query(setup_data.CF_SEQ,AUTO_BATCH);
            final_query:=main_query||' '||end_of_query||chr(10)||'  AND  ( '||L_CF_QUERY||' ) '|| chr(10) ||order_by;
		END IF;

        pr_log_msg_auto('*****************************************************************************************');
        pr_log_msg_auto('Final Query  =======================>' );
        pr_log_msg_auto(final_query );
        pr_log_msg_auto('*****************************************************************************************');

		--fnd_file.put_line(fnd_file.log,final_query);
		L_ROWCOUNT:=0;
		OPEN C_GET_DATA_V FOR final_query;
		LOOP
			l_error := 'N';
			FETCH C_GET_DATA_V INTO get_data;
			EXIT WHEN C_GET_DATA_V%NOTFOUND;

			L_BATCH_LOGIC := get_data.BATCH_LOGIC;
			L_SUBBATCH_LOGIC := get_data.SUBBATCH_LOGIC;

			OPEN C_GET_JOBID(get_data.ORDER_NO,get_data.LINE_NO);
			FETCH C_GET_JOBID INTO LV_JOBID;
			CLOSE C_GET_JOBID;

			-- CHECKING BATCH_LOGIC AND SUBBATCH_LOGIC IS NULL
			IF (L_BATCH_LOGIC IS NULL  OR L_SUBBATCH_LOGIC IS NULL )
               Or
               (
                   (upper(L_BATCH_LOGIC) = 'BY JOB ID' or upper(L_SUBBATCH_LOGIC) = 'BY JOB ID' )
                  And UPPER(nvl(LV_JOBID,'NO JOB FROM')) LIKE 'NO JOB FROM%'
               )
            THEN
                If   L_BATCH_LOGIC IS NULL  OR L_SUBBATCH_LOGIC IS NULL Then
                    lv_err_batching_msg := 'Batch Logic Or Subbatch Logic is Null';
                Else
                    lv_err_batching_msg := 'No Valid Vips Job Id found. Cannot Batch or Subbatch by Job ID.';
                End If;

				fnd_file.put_line(fnd_file.log,'ERROR');
				fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
				fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
				fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
				fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
				fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
                pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>  get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   =>'Combo'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );

				l_error := 'Y';
			ELSE
				-- CHECKING BATCH_LOGIC AND SUBBATCH_LOGIC IS VALID FOR COMBO
				OPEN CHECK_COMBO_BATCH_LOGIC(L_BATCH_LOGIC);
				FETCH CHECK_COMBO_BATCH_LOGIC INTO L_BL_STATUS;
				CLOSE CHECK_COMBO_BATCH_LOGIC;

				OPEN CHECK_COMBO_SUBBATCH_LOGIC(L_SUBBATCH_LOGIC);
				FETCH CHECK_COMBO_SUBBATCH_LOGIC INTO L_SBL_STATUS;
				CLOSE CHECK_COMBO_SUBBATCH_LOGIC;

				--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023
				IF upper(L_BATCH_LOGIC)=upper('By GLID and Order Number') AND get_data.ORDER_NO IS NULL
				THEN
					lv_err_batching_msg :=  'We cannot execute ''By GLID and Order Number'' batch logic for these NON-ATO DJ''s';
					fnd_file.put_line(fnd_file.log,'ERROR');
					fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
					fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
					fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
					fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
					fnd_file.put_line(fnd_file.log,'Error Message:  '|| lv_err_batching_msg);

					pr_insert_Batch_error_record
                                            ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>  get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   => 'Color by Size'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                ,p_productionmethod =>get_data.productionmethod
                                            );
					l_error := 'Y';
				--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023
				--- Added by Sarfaraz // NS-MOCK2-117 // 01.03.2023
				ELSIF upper(L_BATCH_LOGIC) IN (upper('By Stock Type and Format'))
						AND get_data.ORDER_NO IS NOT NULL
						AND get_data.FORMATNAME IS NULL
				THEN
					lv_err_batching_msg :=  'The Format Name is null, cannot execute Auto Batching ';
					fnd_file.put_line(fnd_file.log,'ERROR');
					fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
					fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
					fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
					fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
					fnd_file.put_line(fnd_file.log,'Error Message:  '|| lv_err_batching_msg);

					pr_insert_Batch_error_record
											( p_order_number     => get_data.ORDER_NO
												,p_line_no                 =>  get_data.LINE_NO
												,p_error_msg            =>   lv_err_batching_msg
												,p_batch_program   => 'Color by Size'
												,p_customer_name  =>  get_data.customer_name
												,p_assembly             =>    get_data.assembly
												,p_quantity               =>     get_data.quantity
												,p_presstype             =>   get_data.presstype
												,p_jobno                    =>   get_data.jobno
												,p_organization_code   =>      get_data.inventoryorg
												,p_productionmethod =>get_data.productionmethod
											);
					l_error := 'Y';
				--- Added by Sarfaraz // NS-MOCK2-117 // 01.03.2023
				ELSIF L_BL_STATUS = 0  OR L_SBL_STATUS = 0 THEN
                    lv_err_batching_msg := 'Batch Logic Or Subbatch Logic is not in the Combo Scenario';
					fnd_file.put_line(fnd_file.log,'ERROR');
					fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
					fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
					fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
					fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
					fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
                    pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>  get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   =>'Combo'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );

					l_error := 'Y';
				ELSE
					IF UPPER(L_BATCH_LOGIC) = UPPER('By Combo') THEN
						LN_COMBO_COUNTER := 0;
						FOR c_combo_rel IN C_GET_COMBO_REL(get_data.ASSEMBLY,get_data.ORGANIZATION_ID)
						LOOP
							FOR c2 IN C_CHECK_COMBO_REL(c_combo_rel.ITEM_NUMBER)
							LOOP
								IF C2.ITEM_NUMBER = get_data.ASSEMBLY THEN
									LN_COMBO_COUNTER := LN_COMBO_COUNTER + 1;
								END IF;
							END LOOP;
						END LOOP;

						IF LN_COMBO_COUNTER = 0 THEN
                            lv_err_batching_msg := 'Combo Relationship is not maintained.';
							fnd_file.put_line(fnd_file.log,'ERROR');
							fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
							fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
							fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
							fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
							fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
							pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>  get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   =>'Combo'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );

							l_error := 'Y';
						END IF;
					END IF;
				END IF;
			END IF;

			IF  get_data.quantity > setup_data.MAX_QTY_PER_BATCH OR get_data.JOB_QTY > setup_data.MAX_QTY_PER_BATCH
			THEN
                lv_err_batching_msg :=  'The order quantity is over the ''Max Qty Per Batch'' in auto batching rule';
				fnd_file.put_line(fnd_file.log,'ERROR');
				fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
				fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
				fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
				fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
				fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
                pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>         get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   => 'Combo'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );
				l_error := 'Y';
			ELSIF GET_SKU_QTY(get_data.ORDER_LINE_ID) > setup_data.MAX_SKU_PER_BATCH and get_data.ORDER_NO IS NOT NULL
			THEN
                lv_err_batching_msg :=  'The order SKU# is over the ''Max SKU Per Batch'' in auto batching rule';
				fnd_file.put_line(fnd_file.log,'ERROR');
				fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
				fnd_file.put_line(fnd_file.log,'Order Number: '||get_data.ORDER_NO);
				fnd_file.put_line(fnd_file.log,'Line Number: '||get_data.LINE_NO);
				fnd_file.put_line(fnd_file.log,'Item Name: '||get_data.ASSEMBLY);
				fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
                pr_insert_Batch_error_record
                                              ( p_order_number     => get_data.ORDER_NO
                                                ,p_line_no                 =>         get_data.LINE_NO
                                                ,p_error_msg            =>   lv_err_batching_msg
                                                ,p_batch_program   => 'Combo'
                                                ,p_customer_name  =>  get_data.customer_name
                                                ,p_assembly             =>    get_data.assembly
                                                ,p_quantity               =>     get_data.quantity
                                                ,p_presstype             =>   get_data.presstype
                                                ,p_jobno                    =>   get_data.jobno
                                                ,p_organization_code   =>      get_data.inventoryorg
                                                 ,p_productionmethod =>get_data.productionmethod
                                              );
				l_error := 'Y';
			END IF;

			IF l_error = 'N' THEN
				INSERT INTO PAXAR.PX_BATCH_AUTO_SPL_TMP(
					CUSTOMER_NUMBER,
					CUSTOMER_NAME,
					ORDER_NO,
					LINE_NO,
					INTERNAL_ITEM,
					QUANTITY,
					UOM,
					JOBNO,
					ASSEMBLY,
					JOB_QTY,
					JOBUOM,
					JOBSTATUS,
					TE,
					STOCKTYPE,
					INVENTORYCODE,
					SYSTEMID,
					FORMATNAME,
					REQUESTDATE,
					PROMISEDATE,
					SCHEDULESHIPDATE,
					PLANNERCODE,
					INVENTORYORG,
					PRODUCTIONMETHOD,
					BATCH_STATUS,
					BATCH_NUMBER,
					BATCHTYPE,
					BATCH_CREATED_DATE,
					CREATEDBY,
					LAST_UPDATED_DATE,
					LAST_UPDATED_BY,
					RELEASED_DATE,
					TYPESETTING_METHOD,
					PRESSTYPE,
					ORDER_HEADER_ID,
					ORDER_LINE_ID,
					REQUEST_ID,
					INVENTORY_ITEM_ID,
					BATCH_LOGIC,
					SUBBATCH_LOGIC,
					BATCHING_TYPE,
					WIP_ENTITY_ID,
					JOBID,
					BILL_TO,
					SHIP_TO,
					CUST_PO,
					OPERATING_UNIT,
					ORDER_TYPE,
					FSC_CONTENT
				)
				VALUES(
					get_data.CUSTOMER_NUMBER,
					get_data.CUSTOMER_NAME,
					get_data.ORDER_NO,
					get_data.LINE_NO,
					get_data.INTERNAL_ITEM,
					get_data.QUANTITY,
					get_data.UOM,
					get_data.JOBNO,
					get_data.ASSEMBLY,
					get_data.JOB_QTY,
					get_data.JOBUOM,
					get_data.JOBSTATUS,
					get_data.TE,
					get_data.STOCKTYPE,
					get_data.INVENTORYCODE,
					get_data.SYSTEMID,
					get_data.FORMATNAME,
					get_data.REQUESTDATE,
					get_data.PROMISEDATE,
					get_data.SCHEDULESHIPDATE,
					get_data.PLANNERCODE,
					get_data.INVENTORYORG,
					get_data.PRODUCTIONMETHOD,
					get_data.BATCH_STATUS,
					get_data.BATCH_NUMBER,
					'Auto',
					get_data.BATCH_CREATED_DATE,
					get_data.CREATEDBY,
					get_data.LAST_UPDATED_DATE,
					get_data.LAST_UPDATED_BY,
					get_data.RELEASED_DATE,
					get_data.TYPESETTING_METHOD,
					get_data.PRESSTYPE,
					get_data.ORDER_HEADER_ID,
					get_data.ORDER_LINE_ID,
					g_conc_request_id,
					get_data.INVENTORY_ITEM_ID,
					L_BATCH_LOGIC,
					L_SUBBATCH_LOGIC,
					'Combo',
					get_data.WIP_ENTITY_ID,
					LV_JOBID,
					get_data.BILL_TO,
					get_data.SHIP_TO,
					get_data.CUST_PO,
					get_data.OPERATING_UNIT,
					get_data.ORDER_TYPE,
					get_data.FSC_CONTENT
				);
				L_ROWCOUNT:=L_ROWCOUNT+1;
			END IF;
		END LOOP; --OPEN C_GET_DATA_V FOR final_query;
		CLOSE C_GET_DATA_V;

		fnd_file.put_line(fnd_file.log,'Combo Rowcount:' ||L_ROWCOUNT);

		UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
        Set
        CREATEDBY      = FND_PROFILE.VALUE('USERNAME')
        ,last_updated_by= FND_PROFILE.VALUE('USERNAME');

		---
		FOR rec_combo IN C_COMBO
		LOOP
			LV_UNIQUE_ID := paxar.px_combo_batch_group_s.NEXTVAL;

			INSERT INTO PAXAR.PX_COMBO_DATA_TEMP
			(
				JOBNO,QUANTITY,INTERNAL_ITEM,REQUEST_ID,GROUP_ID
			)
			(
				SELECT JOBNO,QUANTITY,INTERNAL_ITEM,REQUEST_ID,LV_UNIQUE_ID
				FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
				WHERE INTERNAL_ITEM=REC_COMBO.ASSEMBLY
				AND QUANTITY=REC_COMBO.QUANTITY
				AND UPPER(BATCH_LOGIC)=UPPER('BY COMBO')
				AND REQUEST_ID=G_CONC_REQUEST_ID AND UPPER(BATCHING_TYPE)=UPPER('COMBO')
				AND NOT EXISTS (SELECT 1 FROM PAXAR.PX_COMBO_DATA_TEMP
								WHERE INTERNAL_ITEM=REC_COMBO.ASSEMBLY
								AND QUANTITY=REC_COMBO.QUANTITY
								AND REQUEST_ID=G_CONC_REQUEST_ID)
			);

			FOR C2 IN C_GET_COMBO_REL(rec_combo.ASSEMBLY,setup_data.INVENTORY_ORG_ID)
			LOOP
				INSERT INTO PAXAR.PX_COMBO_DATA_TEMP
				(
					JOBNO,QUANTITY,INTERNAL_ITEM,REQUEST_ID,GROUP_ID
				)
				(
					SELECT JOBNO,QUANTITY,INTERNAL_ITEM,REQUEST_ID,LV_UNIQUE_ID
					FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
					WHERE INTERNAL_ITEM=C2.ITEM_NUMBER
					AND QUANTITY=REC_COMBO.QUANTITY
					AND UPPER(BATCH_LOGIC)=UPPER('BY COMBO')
					AND REQUEST_ID=G_CONC_REQUEST_ID AND UPPER(BATCHING_TYPE)=UPPER('COMBO')
					AND NOT EXISTS (SELECT 1 FROM PAXAR.PX_COMBO_DATA_TEMP
									WHERE INTERNAL_ITEM=C2.ITEM_NUMBER
									AND QUANTITY=REC_COMBO.QUANTITY
									AND REQUEST_ID=G_CONC_REQUEST_ID)
				);
			END LOOP;
		END LOOP;

		FOR REC_UNI_COM IN (SELECT DISTINCT GROUP_ID FROM PAXAR.PX_COMBO_DATA_TEMP
							WHERE REQUEST_ID=G_CONC_REQUEST_ID)
		LOOP
			FOR REC_CHECK IN (SELECT COUNT(*) CNT,QUANTITY,INTERNAL_ITEM FROM PAXAR.PX_COMBO_DATA_TEMP
								WHERE GROUP_ID=REC_UNI_COM.GROUP_ID AND REQUEST_ID=G_CONC_REQUEST_ID
								GROUP BY QUANTITY,INTERNAL_ITEM
								)
			LOOP
				pr_log_msg_auto('Count is greater than 1.'||REC_CHECK.CNT);
				IF REC_CHECK.CNT > 1 THEN
					pr_log_msg_auto('Count is greater than 1.'||REC_CHECK.CNT);
					FOR get_order IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
										WHERE (JOBNO,REQUEST_ID) IN (SELECT JOBNO,REQUEST_ID FROM PAXAR.PX_COMBO_DATA_TEMP
																	WHERE GROUP_ID=REC_UNI_COM.GROUP_ID)
										)
					LOOP
						lv_err_batching_msg :=  'Multiple sets of Combo Item with the same quantity, need Manual Batch';
						fnd_file.put_line(fnd_file.log,'ERROR');
						fnd_file.put_line(fnd_file.log,'Request ID: '||g_conc_request_id);
						fnd_file.put_line(fnd_file.log,'Order Number: '||get_order.ORDER_NO);
						fnd_file.put_line(fnd_file.log,'Line Number: '||get_order.LINE_NO);
						fnd_file.put_line(fnd_file.log,'Item Name: '||get_order.ASSEMBLY);
						fnd_file.put_line(fnd_file.log,'Error Message: '|| lv_err_batching_msg);
						pr_insert_Batch_error_record
													  ( p_order_number     => get_order.ORDER_NO
														,p_line_no                 =>         get_order.LINE_NO
														,p_error_msg            =>   lv_err_batching_msg
														,p_batch_program   => 'Combo'
														,p_customer_name  =>  get_order.customer_name
														,p_assembly             =>    get_order.assembly
														,p_quantity               =>     get_order.quantity
														,p_presstype             =>   get_order.presstype
														,p_jobno                    =>   get_order.jobno
														,p_organization_code   =>      get_order.inventoryorg
														 ,p_productionmethod =>get_order.productionmethod
													  );
					END LOOP;
					DELETE FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
					WHERE (JOBNO,REQUEST_ID) IN (SELECT JOBNO,REQUEST_ID FROM PAXAR.PX_COMBO_DATA_TEMP
																	WHERE GROUP_ID=REC_UNI_COM.GROUP_ID);
					EXIT;
				END IF;
			END LOOP;
		END LOOP;

		DELETE FROM PAXAR.PX_COMBO_DATA_TEMP WHERE REQUEST_ID = G_CONC_REQUEST_ID;

		IF L_ROWCOUNT > 0 THEN
			-- BATCH_LOGIC='By Combo'
			FOR rec IN C_COMBO
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;   --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
                pr_log_msg_auto('LOOP 1 : '||'Step 1: ASSEMBLY'||rec.ASSEMBLY);
				i:=1;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_COMBO(rec.ASSEMBLY,REC.QUANTITY)
				LOOP
					pr_log_msg_auto('LOOP 2 : '||'Step 1 #ASSEMBLY : '|| rec.ASSEMBLY || ' - ORDER_NO : '||C1.ORDER_NO
                                       ||' - LINE_NO : '|| C1.LINE_NO ||' - QUANTITY : ' ||C1.QUANTITY);
					FOR C2 IN C_GET_COMBO_REL(C1.ASSEMBLY,setup_data.INVENTORY_ORG_ID)
					LOOP
						pr_log_msg_auto('LOOP 3 : '||'Step 1 '||C2.item_number);
						-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
						L_SOL_COUNT := L_SOL_COUNT +1 ;
						L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
						L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);
						IF L_REQUEST_DATE IS NULL THEN
							L_REQUEST_DATE := C1.REQUESTDATE;
							L_REQUEST_DATE_COUNT := 1;
						ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
							L_REQUEST_DATE := C1.REQUESTDATE;
							L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
						END IF;
						-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250

						IF i!=1 and rec.ASSEMBLY = C1.ASSEMBLY THEN
							V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
							-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
							L_SOL_COUNT := 1;
							L_MAX_ORDER_QTY := C1.QUANTITY;
							L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
							L_REQUEST_DATE_COUNT := 1;
							-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
						END IF;

						-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
						IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
							OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
							OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
							OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
						THEN
							V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

							L_SOL_COUNT := 1;
							L_MAX_ORDER_QTY := C1.QUANTITY;
							L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
							L_REQUEST_DATE_COUNT := 1;
						END IF;
						-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250

                        UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
						SET BATCH_NUMBER   = V_BATCH_NUMBER,
						BATCH_STATUS       = 'Batched',
						BATCH_CREATED_DATE = sysdate,
						--CREATEDBY          = FND_PROFILE.VALUE('USERNAME'),
						LAST_UPDATED_DATE  = sysdate
						--last_updated_by    = FND_PROFILE.VALUE('USERNAME')
						WHERE ASSEMBLY  = rec.ASSEMBLY
                        And ORDER_NO    = C1.ORDER_NO
                        And LINE_NO     = C1.LINE_NO
                        And QUANTITY    = C1.QUANTITY
						And upper(BATCH_LOGIC) = 'BY COMBO'	-- Added upper by Sarfaraz 04.08.2022
						And request_id         = g_conc_request_id
                        And upper(BATCHING_TYPE)= 'COMBO' 	-- Added upper by Sarfaraz 04.08.2022
						And batch_number is null;

                        pr_log_msg_auto('Combo-Step1:No of Records Updated with Batch number :'||V_BATCH_NUMBER || '-'||sql%rowcount);

						FOR C3 IN C_GET_COMBO_REL_SOL(C2.ITEM_NUMBER,C1.QUANTITY)
						LOOP
                            pr_log_msg_auto('Step 2 #ASSEMBLY : '|| C2.ITEM_NUMBER || ' - ORDER_NO : '||C3.ORDER_NO
                                       ||' - LINE_NO : '|| C3.LINE_NO ||' - QUANTITY : ' ||C3.QUANTITY
                                       );

							-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
							L_SOL_COUNT := L_SOL_COUNT +1 ;
							L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C3.QUANTITY;
							L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C3.ORDER_LINE_ID);
							IF L_REQUEST_DATE IS NULL THEN
								L_REQUEST_DATE := C3.REQUESTDATE;
								L_REQUEST_DATE_COUNT := 1;
							ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C3.REQUESTDATE,'DD-MM-YYYY') THEN
								L_REQUEST_DATE := C3.REQUESTDATE;
								L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
							END IF;

							IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
								OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
								OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
								OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
							THEN
								V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

								L_SOL_COUNT := 1;
								L_MAX_ORDER_QTY := C3.QUANTITY;
								L_MAX_SKU_QTY := GET_SKU_QTY(C3.ORDER_LINE_ID);
								L_REQUEST_DATE_COUNT := 1;
							END IF;
							-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250

							UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
							SET BATCH_NUMBER   =V_BATCH_NUMBER,
							BATCH_STATUS     ='Batched',
							BATCH_CREATED_DATE=sysdate,
							--CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
							LAST_UPDATED_DATE=sysdate
							--last_updated_by=FND_PROFILE.VALUE('USERNAME')
							WHERE ASSEMBLY = C2.ITEM_NUMBER
                            and ORDER_NO   = C3.ORDER_NO
                            and LINE_NO    = C3.LINE_NO
                            AND QUANTITY   = C3.QUANTITY
							and upper(BATCH_LOGIC)= 'BY COMBO'	-- Added upper by Sarfaraz 04.08.2022
							and request_id        =g_conc_request_id
                            AND upper(BATCHING_TYPE)='COMBO'   	-- Added upper by Sarfaraz 04.08.2022
							and batch_number is null;

                            pr_log_msg_auto('Combo-Step2:No of Records Updated with Batch number :'||V_BATCH_NUMBER || '-'||sql%rowcount);

						END LOOP;
					END LOOP;
					i:=i+1;
				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By Job ID'
			FOR rec_job IN C_JOBID
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;  --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
                -- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_JOBID(rec_job.JOBID)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
                    pr_log_msg_auto('Step 3 JOBID : '|| rec_job.JOBID || ' - ORDER_NO : '||C1.ORDER_NO
                                       ||' - LINE_NO : '|| C1.LINE_NO --||' - QUANTITY : ' ||C3.QUANTITY
                                       );

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					--CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate
					--last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE JOBID  = rec_job.JOBID
                    AND ORDER_NO = C1.ORDER_NO
                    and LINE_NO  = C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By Job ID')
                    and request_id=g_conc_request_id
                    AND upper(BATCHING_TYPE)=upper('Combo');  -- Added upper by Sarfaraz 04.08.2022

                    pr_log_msg_auto('Combo-Step3:No of Records Updated with Batch number :'||V_BATCH_NUMBER || '-'||sql%rowcount);

				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By GLID'
			FOR rec_glid IN C_GLID
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL; --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
                pr_log_msg_auto('Batch Logic  : By GLID');

				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
				-- BATCH NON-ATO ORDERS
				L_SOL_COUNT := 0;
				L_MAX_ORDER_QTY := 0;
				FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
							WHERE INTERNAL_ITEM=rec_glid.internal_item AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
				LOOP
					L_SOL_COUNT := L_SOL_COUNT+ 1;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.JOB_QTY;
					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.JOB_QTY;
					END IF;

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid.internal_item AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
				END LOOP;
				-- BATCH NON-ATO ORDERS
				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117

				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_GLID(rec_glid.internal_item)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);
					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
                   pr_log_msg_auto('Combo-Step4:internal_item / ORDER_NO /LINE_NO / JOBNO:'||
                     rec_glid.internal_item ||'/' || C1.ORDER_NO||'/' || C1.LINE_NO || '/'||C1.jobno  );

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
                        BATCH_STATUS     ='Batched',
                        BATCHTYPE='Auto',
                        PRESSTYPE= setup_data.PRESS_TYPE,
                        BATCH_CREATED_DATE=sysdate,
                        --CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
                        LAST_UPDATED_DATE=sysdate
                        --last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item  = rec_glid.internal_item
                    AND NVL(ORDER_NO,-1) = NVL(C1.ORDER_NO,-1) -- For the Non ATO Lines This is Failing to Update Batch Number
                    and NVL(LINE_NO,-1)  = NVL(C1.LINE_NO,-1)  -- For the Non ATO Lines This is Failing to Update Batch Number
                    and request_id       = g_conc_request_id
					and upper(BATCH_LOGIC)=upper('By GLID')
                    AND upper(BATCHING_TYPE)=upper('Combo'); -- Added upper by Sarfaraz 04.08.2022

                    pr_log_msg_auto('Combo-Step4:No of Records Updated with Batch number :'||V_BATCH_NUMBER || '-Count : '||sql%rowcount);

				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By GLID and Ship To'
			FOR rec_glid_ship IN cur_glid_ship
			LOOP
				fnd_file.put_line(fnd_file.log,'By GLID and Ship To :' ||rec_glid_ship.internal_item);
				fnd_file.put_line(fnd_file.log,'By GLID and Ship To :' ||rec_glid_ship.SHIP_TO);

                /*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;  --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022

				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
				-- BATCH NON-ATO ORDERS
				L_SOL_COUNT := 0;
				L_MAX_ORDER_QTY := 0;
				FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
							WHERE INTERNAL_ITEM=rec_glid_ship.internal_item AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
				LOOP
					L_SOL_COUNT := L_SOL_COUNT+ 1;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.JOB_QTY;
					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.JOB_QTY;
					END IF;

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_ship.internal_item AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
				END LOOP;
				-- BATCH NON-ATO ORDERS
				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117

				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_glship(rec_glid_ship.internal_item,rec_glid_ship.SHIP_TO)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					fnd_file.put_line(fnd_file.log,'Combo :' ||C1.ORDER_NO);

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					--CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate
					--last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item   = rec_glid_ship.internal_item
                    AND ORDER_NO          = C1.ORDER_NO
                    and LINE_NO           = C1.LINE_NO
                    and ship_to           = rec_glid_ship.SHIP_TO
					and request_id        = g_conc_request_id
					and upper(BATCH_LOGIC)   = upper('By GLID and Ship To')
                    AND upper(BATCHING_TYPE) = upper('Combo');

                    pr_log_msg_auto('Combo-Step5:No of Records Updated with Batch number :'||V_BATCH_NUMBER || '-'||sql%rowcount);

				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By GLID and Bill To'
			FOR rec_glid_bill IN cur_glid_bill
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;   --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022

				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
				-- BATCH NON-ATO ORDERS
				L_SOL_COUNT := 0;
				L_MAX_ORDER_QTY := 0;
				FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
							WHERE INTERNAL_ITEM=rec_glid_bill.internal_item AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
				LOOP
					L_SOL_COUNT := L_SOL_COUNT+ 1;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.JOB_QTY;
					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.JOB_QTY;
					END IF;

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_bill.internal_item AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
				END LOOP;
				-- BATCH NON-ATO ORDERS
				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117

				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				fnd_file.put_line(fnd_file.log,'By GLID and Bill To'||rec_glid_bill.BILL_TO);
				FOR C1 IN CUR_BAT_glbill(rec_glid_bill.internal_item,rec_glid_bill.BILL_TO)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					fnd_file.put_line(fnd_file.log,'By GLID and Bill To'||C1.ORDER_NO);
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					--CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate
					--last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item = rec_glid_bill.internal_item
                    AND ORDER_NO        = C1.ORDER_NO
                    and LINE_NO         = C1.LINE_NO
                    AND BILL_TO         = rec_glid_bill.BILL_TO
					and request_id      = g_conc_request_id
					and upper(BATCH_LOGIC) = upper('By GLID and Bill To')
                    AND upper(BATCHING_TYPE)=upper('Combo');

                    pr_log_msg_auto('Combo-Step6:No of Records Updated with Batch number :'||V_BATCH_NUMBER || '-'||sql%rowcount);

				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By GLID and Customer PO'
			FOR rec_glid_po IN cur_glid_po
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;  --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022

				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
				-- BATCH NON-ATO ORDERS
				L_SOL_COUNT := 0;
				L_MAX_ORDER_QTY := 0;
				FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
							WHERE INTERNAL_ITEM=rec_glid_po.internal_item AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
				LOOP
					L_SOL_COUNT := L_SOL_COUNT+ 1;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.JOB_QTY;
					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.JOB_QTY;
					END IF;

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_glid_po.internal_item AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
				END LOOP;
				-- BATCH NON-ATO ORDERS
				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117

				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_glpo(rec_glid_po.internal_item,rec_glid_po.CUST_PO)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					--CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate
					--last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item = rec_glid_po.internal_item
                    AND ORDER_NO        = C1.ORDER_NO
                    and LINE_NO         = C1.LINE_NO
                    AND CUST_PO         = rec_glid_po.CUST_PO
					and request_id      = g_conc_request_id
					and upper(BATCH_LOGIC) = upper('By GLID and Customer PO')
                    AND upper(BATCHING_TYPE) = upper('Combo');

                    pr_log_msg_auto('Combo-Step7:No of Records Updated with Batch number :'||V_BATCH_NUMBER || '-'||sql%rowcount);


				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By GLID and Order Line'
			FOR rec_gllin IN CUR_GLLIN
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;    --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
                pr_log_msg_auto('Batch Logic  : By GLID and Order Line');

				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
				-- BATCH NON-ATO ORDERS
				L_SOL_COUNT := 0;
				L_MAX_ORDER_QTY := 0;
				FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
							WHERE INTERNAL_ITEM=rec_gllin.internal_item AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
				LOOP
					L_SOL_COUNT := L_SOL_COUNT+ 1;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.JOB_QTY;
					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.JOB_QTY;
					END IF;

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=rec_gllin.internal_item AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
				END LOOP;
				-- BATCH NON-ATO ORDERS
				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117

				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_gllin(rec_gllin.internal_item,rec_gllin.order_no,rec_gllin.line_no,rec_gllin.jobno)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
                    pr_log_msg_auto('Combo-Step8:internal_item / ORDER_NO /LINE_NO :'||
                     rec_gllin.internal_item||'/' || C1.ORDER_NO||'/' || C1.LINE_NO  );

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					--CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate
					--last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item = rec_gllin.internal_item
                    AND ORDER_NO        = C1.ORDER_NO
                    and LINE_NO         = C1.LINE_NO
                    and request_id      = g_conc_request_id
					and upper(BATCH_LOGIC)=upper('By GLID and Order Line')
                    AND upper(BATCHING_TYPE)=upper('Combo');

                    pr_log_msg_auto('Combo-Step8:No of Records Updated with Batch number :'||V_BATCH_NUMBER || '-'||sql%rowcount);

				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By GLID and OM Order ID'
			FOR REC_GLOR IN CUR_GLOR
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;     --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022

				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117
				-- BATCH NON-ATO ORDERS
				L_SOL_COUNT := 0;
				L_MAX_ORDER_QTY := 0;
				FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_SPL_TMP
							WHERE INTERNAL_ITEM=REC_GLOR.internal_item AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
				LOOP
					L_SOL_COUNT := L_SOL_COUNT+ 1;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.JOB_QTY;
					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.JOB_QTY;
					END IF;

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate,
					last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item=REC_GLOR.internal_item AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
				END LOOP;
				-- BATCH NON-ATO ORDERS
				-- Added by Sarfaraz // 03-08-2023 // NS-PROD-117

                pr_log_msg_auto('Batch Logic  : By GLID and OM Order ID');
                -- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_glor(rec_glor.internal_item,rec_glor.te)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
                    pr_log_msg_auto('Combo-Step9:internal_item / ORDER_NO /LINE_NO/TE :'||
                     rec_glor.internal_item||'/' || C1.ORDER_NO||'/' || C1.LINE_NO || '/'|| rec_glor.te );

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					--CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate
					--last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item = rec_glor.internal_item
                    AND ORDER_NO        = C1.ORDER_NO
                    and LINE_NO         = C1.LINE_NO
                    and TE              = rec_glor.te
					and request_id      = g_conc_request_id
					and upper(BATCH_LOGIC)=upper('By GLID and OM Order ID')
                    AND upper(BATCHING_TYPE)=upper('Combo');

                    pr_log_msg_auto('Combo-Step9:No of Records Updated with Batch number :'||V_BATCH_NUMBER || '-'||sql%rowcount);

				END LOOP;
			END LOOP;

			--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023
			-- BATCH_LOGIC='By GLID and Order Number'
			FOR REC IN CUR_GL_ON
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;     --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022

                pr_log_msg_auto('Batch Logic  : By GLID and Order Number');
                -- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_GL_ON(REC.internal_item,REC.ORDER_NO)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
                    pr_log_msg_auto('Combo-Step9:internal_item / ORDER_NO /LINE_NO :'||
                     rec.internal_item||'/' || C1.ORDER_NO||'/' || C1.LINE_NO);

					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					--CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate
					--last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE internal_item = C1.internal_item
                    AND ORDER_NO        = C1.ORDER_NO
                    and LINE_NO         = C1.LINE_NO
					and request_id      = g_conc_request_id
					and upper(BATCH_LOGIC)=upper('By GLID and Order Number')
                    AND upper(BATCHING_TYPE)=upper('Combo');

                    pr_log_msg_auto('Combo-Step9:No of Records Updated with Batch number :'||V_BATCH_NUMBER || '-'||sql%rowcount);

				END LOOP;
			END LOOP;
			--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023

			-- BATCH_LOGIC='By Stock Type'
			FOR REC_Stk IN CUR_Stk
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;    --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
                pr_log_msg_auto('Batch Logic  : By Stock Type');
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_stk(rec_stk.stocktype)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
                     pr_log_msg_auto('Combo-Step10:stocktype / ORDER_NO /LINE_NO :'||
                     rec_stk.stocktype||'/' || C1.ORDER_NO||'/' || C1.LINE_NO  );
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					--CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate
					--last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE stocktype  = rec_stk.stocktype
                    AND ORDER_NO     = C1.ORDER_NO
                    And LINE_NO      = C1.LINE_NO
                    And request_id   = g_conc_request_id
					And upper(BATCH_LOGIC)=upper('By Stock Type')
                    And upper(BATCHING_TYPE)=upper('Combo');

                    pr_log_msg_auto('Combo-Step10:No of Records Updated with Batch number :'||V_BATCH_NUMBER || '-'||sql%rowcount);

				END LOOP;
			END LOOP;

			-- BATCH_LOGIC='By Stock Type and Format'
			FOR REC_Stkfrm IN CUR_Stk_frm
			LOOP
				/*V_BATCH_NUMBER:=setup_data.INVENTORY_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;   --Commented By LINGARAJ 28JUL2022*/
                V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);--Added By LINGARAj 28 JUL 2022
                -- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := 0;
					L_MAX_ORDER_QTY :=0;
					L_MAX_SKU_QTY := 0;
					L_REQUEST_DATE := null;
					L_REQUEST_DATE_COUNT :=0;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
				FOR C1 IN CUR_BAT_stkfrm(rec_stkfrm.stocktype,rec_stkfrm.formatname)
				LOOP
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					L_SOL_COUNT := L_SOL_COUNT +1 ;
					L_MAX_ORDER_QTY := L_MAX_ORDER_QTY + C1.QUANTITY;
					L_MAX_SKU_QTY := L_MAX_SKU_QTY + GET_SKU_QTY(C1.ORDER_LINE_ID);

					IF L_REQUEST_DATE IS NULL THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := 1;
					ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
						L_REQUEST_DATE := C1.REQUESTDATE;
						L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
					END IF;

					IF L_SOL_COUNT > setup_data.MAX_ORDER_NO_PER_BATCH
						OR L_MAX_ORDER_QTY > setup_data.MAX_QTY_PER_BATCH
						OR L_MAX_SKU_QTY >setup_data.MAX_SKU_PER_BATCH
						OR L_REQUEST_DATE_COUNT > setup_data.BATCH_REQUEST_DATE_RANGE
					THEN
						V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(setup_data.INVENTORY_ORG_CODE);

						L_SOL_COUNT := 1;
						L_MAX_ORDER_QTY := C1.QUANTITY;
						L_MAX_SKU_QTY := GET_SKU_QTY(C1.ORDER_LINE_ID);
						L_REQUEST_DATE_COUNT := 1;
					END IF;
				-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
					UPDATE PAXAR.PX_BATCH_AUTO_SPL_TMP
					SET BATCH_NUMBER   =V_BATCH_NUMBER,
					BATCH_STATUS     ='Batched',
					BATCH_CREATED_DATE=sysdate,
					--CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
					LAST_UPDATED_DATE=sysdate
					--last_updated_by=FND_PROFILE.VALUE('USERNAME')
					WHERE STOCKTYPE=rec_stkfrm.STOCKTYPE and formatname=rec_stkfrm.formatname
					AND ORDER_NO=C1.ORDER_NO and LINE_NO=C1.LINE_NO
					and upper(BATCH_LOGIC)=upper('By Stock Type and Format')
					and request_id=g_conc_request_id AND upper(BATCHING_TYPE)=upper('Combo');
				END LOOP;
			END LOOP;


			-- SUBBATCH_LOGIC='By GLID'
			FOR get_bt IN C_GET_BT_GLID
			LOOP
				LN_SUBBATCH_COUNTER:=0;
				FOR C2 IN C_SUB_GLID(get_bt.BATCH_NUMBER)
				LOOP
					LN_SUBBATCH_COUNTER:=LN_SUBBATCH_COUNTER+1;
					V_SUB_BATCH_NUMBER := get_bt.BATCH_NUMBER||'-'||LPAD(LN_SUBBATCH_COUNTER,3,0);
					FOR C3 IN CUR_SUB_BAT_GLID(C2.internal_item,get_bt.BATCH_NUMBER)
					LOOP
						OPEN C_GET_PREFIX(C3.INVENTORY_ITEM_ID,C3.organization_id);
						FETCH C_GET_PREFIX INTO L_PREFIX,L_SUFFIX;
						CLOSE C_GET_PREFIX;
						INSERT INTO PAXAR.PX_BATCH_AUTO_SPL_TMP
						(
							CUSTOMER_NUMBER,
							CUSTOMER_NAME,
							ORDER_NO,
							LINE_NO,
							INTERNAL_ITEM,
							QUANTITY,
							UOM,
							JOBNO,
							ASSEMBLY,
							JOB_QTY,
							JOBUOM,
							JOBSTATUS,
							TE,
							STOCKTYPE,
							INVENTORYCODE,
							SYSTEMID,
							FORMATNAME,
							REQUESTDATE,
							PROMISEDATE,
							SCHEDULESHIPDATE,
							PLANNERCODE,
							INVENTORYORG,
							PRODUCTIONMETHOD,
							BATCH_STATUS,
							BATCH_NUMBER,
							BATCHTYPE,
							BATCH_CREATED_DATE,
							CREATEDBY,
							LAST_UPDATED_DATE,
							LAST_UPDATED_BY,
							RELEASED_DATE,
							TYPESETTING_METHOD,
							PRESSTYPE,
							ORDER_HEADER_ID,
							ORDER_LINE_ID,
							REQUEST_ID,
							INVENTORY_ITEM_ID,
							BATCH_LOGIC,
							SUBBATCH_LOGIC,
							BATCHING_TYPE,
							WIP_ENTITY_ID,
							SUB_BATCH,
							ITEM_PREFIX,
							ITEM_SUFFIX,
							OPERATING_UNIT,
							ORDER_TYPE,
							FSC_CONTENT
						)
						VALUES
						(
							C3.CUSTOMER_NUMBER,
							C3.CUSTOMER_NAME,
							C3.ORDER_NO,
							C3.LINE_NO,
							C3.INTERNAL_ITEM,
							C3.QUANTITY,
							C3.UOM,
							C3.JOBNO,
							C3.ASSEMBLY,
							C3.JOB_QTY,
							C3.JOBUOM,
							C3.JOBSTATUS,
							C3.TE,
							C3.STOCKTYPE,
							C3.INVENTORYCODE,
							C3.SYSTEMID,
							C3.FORMATNAME,
							C3.REQUESTDATE,
							C3.PROMISEDATE,
							C3.SCHEDULESHIPDATE,
							C3.PLANNERCODE,
							C3.INVENTORYORG,
							C3.PRODUCTIONMETHOD,
							'Batched',
							get_bt.BATCH_NUMBER,
							'Auto',
							sysdate,
							FND_PROFILE.VALUE('USERNAME'),
							sysdate,
							FND_PROFILE.VALUE('USERNAME'),
							C3.RELEASED_DATE,
							C3.TYPESETTING_METHOD,
							C3.PRESSTYPE,
							C3.ORDER_HEADER_ID,
							C3.ORDER_LINE_ID,
							g_conc_request_id,
							C3.INVENTORY_ITEM_ID,
							C3.BATCH_LOGIC,
							C3.SUBBATCH_LOGIC,
							'Combo',
							C3.WIP_ENTITY_ID,
							V_SUB_BATCH_NUMBER,
							L_PREFIX,
							L_SUFFIX,
							C3.OPERATING_UNIT,
							C3.ORDER_TYPE,
							C3.FSC_CONTENT
						);
					END LOOP;
				END LOOP;
			END LOOP;

			-- SUBBATCH_LOGIC='By JOB ID'
			FOR get_bt IN C_GET_BT_JOBID
			LOOP
				LN_SUBBATCH_COUNTER:=0;
				FOR C2 IN C_SUB_JOBID(get_bt.BATCH_NUMBER)
				LOOP
					LN_SUBBATCH_COUNTER:=LN_SUBBATCH_COUNTER+1;
					V_SUB_BATCH_NUMBER := get_bt.BATCH_NUMBER||'-'||LPAD(LN_SUBBATCH_COUNTER,3,0);
					FOR C3 IN CUR_SUB_BAT_JOBID(C2.JOBID,get_bt.BATCH_NUMBER)
					LOOP
						OPEN C_GET_PREFIX(C3.INVENTORY_ITEM_ID,C3.organization_id);
						FETCH C_GET_PREFIX INTO L_PREFIX,L_SUFFIX;
						CLOSE C_GET_PREFIX;
						INSERT INTO PAXAR.PX_BATCH_AUTO_SPL_TMP
						(
							CUSTOMER_NUMBER,
							CUSTOMER_NAME,
							ORDER_NO,
							LINE_NO,
							INTERNAL_ITEM,
							QUANTITY,
							UOM,
							JOBNO,
							ASSEMBLY,
							JOB_QTY,
							JOBUOM,
							JOBSTATUS,
							TE,
							STOCKTYPE,
							INVENTORYCODE,
							SYSTEMID,
							FORMATNAME,
							REQUESTDATE,
							PROMISEDATE,
							SCHEDULESHIPDATE,
							PLANNERCODE,
							INVENTORYORG,
							PRODUCTIONMETHOD,
							BATCH_STATUS,
							BATCH_NUMBER,
							BATCHTYPE,
							BATCH_CREATED_DATE,
							CREATEDBY,
							LAST_UPDATED_DATE,
							LAST_UPDATED_BY,
							RELEASED_DATE,
							TYPESETTING_METHOD,
							PRESSTYPE,
							ORDER_HEADER_ID,
							ORDER_LINE_ID,
							REQUEST_ID,
							INVENTORY_ITEM_ID,
							BATCH_LOGIC,
							SUBBATCH_LOGIC,
							BATCHING_TYPE,
							WIP_ENTITY_ID,
							SUB_BATCH,
							JOBID,
							OPERATING_UNIT,
							ORDER_TYPE,
							FSC_CONTENT
						)
						VALUES
						(
							C3.CUSTOMER_NUMBER,
							C3.CUSTOMER_NAME,
							C3.ORDER_NO,
							C3.LINE_NO,
							C3.INTERNAL_ITEM,
							C3.QUANTITY,
							C3.UOM,
							C3.JOBNO,
							C3.ASSEMBLY,
							C3.JOB_QTY,
							C3.JOBUOM,
							C3.JOBSTATUS,
							C3.TE,
							C3.STOCKTYPE,
							C3.INVENTORYCODE,
							C3.SYSTEMID,
							C3.FORMATNAME,
							C3.REQUESTDATE,
							C3.PROMISEDATE,
							C3.SCHEDULESHIPDATE,
							C3.PLANNERCODE,
							C3.INVENTORYORG,
							C3.PRODUCTIONMETHOD,
							'Batched',
							get_bt.BATCH_NUMBER,
							'Auto',
							sysdate,
							FND_PROFILE.VALUE('USERNAME'),
							sysdate,
							FND_PROFILE.VALUE('USERNAME'),
							C3.RELEASED_DATE,
							C3.TYPESETTING_METHOD,
							C3.PRESSTYPE,
							C3.ORDER_HEADER_ID,
							C3.ORDER_LINE_ID,
							g_conc_request_id,
							C3.INVENTORY_ITEM_ID,
							C3.BATCH_LOGIC,
							C3.SUBBATCH_LOGIC,
							'Combo',
							C3.WIP_ENTITY_ID,
							V_SUB_BATCH_NUMBER,
							C3.JOBID,
							C3.OPERATING_UNIT,
							C3.ORDER_TYPE,
							C3.FSC_CONTENT
						);
					END LOOP;
				END LOOP;
			END LOOP;

			  INSERT INTO paxar.PX_BATCH_DETAILS_TAB
			  (
				BATCH_NUMBER
				,BATCH_STATUS
				,CUSTOMER_NUMBER
				,CUSTOMER_NAME
				,ORDER_NO
				,LINE_NO
				,INTERNAL_ITEM
				,QUANTITY
				,UOM
				,JOBNO
				,ASSEMBLY
				,JOB_QTY
				,JOBUOM
				,JOBSTATUS
				,TE
				,STOCKTYPE
				,INVENTORYCODE
				,SYSTEMID
				,FORMATNAME
				,REQUESTDATE
				,PROMISEDATE
				,SCHEDULESHIPDATE
				,PLANNERCODE
				,INVENTORYORG
				,PRODUCTIONMETHOD
				,BATCHTYPE
				,BATCH_CREATED_DATE
				,CREATED_BY
				,LAST_UPDATED_DATE
				,LAST_UPDATED_BY
				,RELEASED_DATE
				,TYPESETTING_METHOD
				,PRESSTYPE
				,SUB_BATCH
				,BATCH_LOGIC
				,BATCHING_TYPE
				,SUBBATCH_LOGIC
				,OE_HEADER_ID
				,OE_LINE_ID
				,WIP_ENTITY_ID
				,INT_ITEM_PREFIX
				,INT_ITEM_SUFFIX
                ,REQUEST_ID,AUTO_BATCH_HEADER_ID,AUTO_BATCH_CONFIG_XML          -- Added By Lingaraj
			  )
			  (SELECT PBT.BATCH_NUMBER,PBT.BATCH_STATUS,PBT.CUSTOMER_NUMBER,PBT.CUSTOMER_NAME,PBT.ORDER_NO,PBT.LINE_NO,PBT.INTERNAL_ITEM,PBT.QUANTITY,PBT.UOM,PBT.JOBNO,PBT.ASSEMBLY,PBT.JOB_QTY,PBT.JOBUOM,
					PBT.JOBSTATUS,PBT.TE,PBT.STOCKTYPE,PBT.INVENTORYCODE,PBT.SYSTEMID,PBT.FORMATNAME,PBT.REQUESTDATE,PBT.PROMISEDATE,PBT.SCHEDULESHIPDATE,PBT.PLANNERCODE,PBT.INVENTORYORG,PBT.PRODUCTIONMETHOD,PBT.BATCHTYPE,
					PBT.BATCH_CREATED_DATE,PBT.CREATEDBY,PBT.LAST_UPDATED_DATE,PBT.LAST_UPDATED_BY,PBT.RELEASED_DATE,PBT.TYPESETTING_METHOD,PBT.PRESSTYPE,PBT.SUB_BATCH,PBT.BATCH_LOGIC,PBT.BATCHING_TYPE,PBT.SUBBATCH_LOGIC,
					PBT.ORDER_HEADER_ID,PBT.ORDER_LINE_ID,PBT.WIP_ENTITY_ID,PBT.ITEM_PREFIX,PBT.ITEM_SUFFIX
                    ,g_conc_request_id,ln_autobatch_header_id,lv_autobatch_Config
				FROM PAXAR.PX_BATCH_AUTO_SPL_TMP PBT where PBT.BATCH_STATUS  ='Batched' AND PBT.REQUEST_ID = g_conc_request_id AND PBT.BATCHING_TYPE='Combo'
				AND (SELECT COUNT(*) FROM APPS.PX_BATCH_DETAILS_TAB PT WHERE PT.JOBNO=PBT.JOBNO AND PT.SUB_BATCH IS NULL AND PT.BATCH_STATUS IN ('Batched','Released')) = 0);

		END IF;
		commit;
	END LOOP; -- FOR setup_data in C_GET_SETUP(P_HEADER_ID)
   pr_log_msg_auto('+----------------------generate_batch_combo()  Exit----------------------+');
END GENERATE_BATCH_COMBO; --GENERATE_BATCH_COMBO

FUNCTION get_colour_by_size_status(P_IIID NUMBER,P_ORG_ID NUMBER)
RETURN CHAR
IS
	CURSOR C_GET_CBS_STATUS(P_IIID NUMBER,P_ORG_ID NUMBER) IS
	SELECT element_value
	FROM px_descr_element_values
	WHERE inventory_item_id=P_IIID
	AND organization_id=P_ORG_ID
	AND element_name='Color By Size';
	STATUS CHAR(1);
BEGIN
	OPEN C_GET_CBS_STATUS(P_IIID,P_ORG_ID);
	FETCH C_GET_CBS_STATUS INTO STATUS;
	CLOSE C_GET_CBS_STATUS;
	RETURN UPPER(NVL(STATUS,'N'));
END GET_COLOUR_BY_SIZE_STATUS;

FUNCTION get_copy_change_status(P_IIID NUMBER,P_ORG_ID NUMBER)
RETURN CHAR
IS
	CURSOR C_GET_CC_STATUS(P_IIID NUMBER,P_ORG_ID NUMBER) IS
	SELECT element_value
	FROM px_descr_element_values
	WHERE inventory_item_id=P_IIID
	AND organization_id=P_ORG_ID
	AND element_name='Copy Change';
	STATUS CHAR(1);
BEGIN
	OPEN C_GET_CC_STATUS(P_IIID,P_ORG_ID);
	FETCH C_GET_CC_STATUS INTO STATUS;
	CLOSE C_GET_CC_STATUS;
	RETURN UPPER(NVL(STATUS,'N'));
END GET_COPY_CHANGE_STATUS;

FUNCTION get_combo_status(P_IIID NUMBER,P_ORG_ID NUMBER)
RETURN VARCHAR2
IS
	CURSOR C_GET_C_STATUS(P_IIID NUMBER,P_ORG_ID NUMBER) IS
	SELECT element_value
	FROM px_descr_element_values
	WHERE inventory_item_id=P_IIID
	AND organization_id=P_ORG_ID
	AND element_name='Combo';
	STATUS VARCHAR2(1000);
BEGIN
	OPEN C_GET_C_STATUS(P_IIID,P_ORG_ID);
	FETCH C_GET_C_STATUS INTO STATUS;
	CLOSE C_GET_C_STATUS;
	RETURN UPPER(STATUS);
END GET_COMBO_STATUS;

FUNCTION get_vf_value(P_DATA varchar2,P_POS number)
RETURN varchar2
IS

-- Commented by Sarfaraz // NS-PROD-183 // 09-02-2023
  /*CURSOR GET_VF(P_DATA VARCHAR2,P_POS VARCHAR2) IS
  select REGEXP_SUBSTR( P_DATA, '([^|]*)(,|$)', 1, level, null, 1 ) VAR_DATA
	FROM   DUAL WHERE LEVEL=P_POS
	connect by level < REGEXP_COUNT( P_DATA, '[^|]*(,|$)' );*/
-- Commented by Sarfaraz // NS-PROD-183 // 09-02-2023

-- Added by Sarfaraz // NS-PROD-183 // 09-02-2023
  POS1 NUMBER;
  START_POS NUMBER;
  END_POS NUMBER;
  CHAR_LENGTH NUMBER;

  LV_VF_VALUE VARCHAR2(4000);
BEGIN
	pos1 :=P_POS-1;

	BEGIN
		-- Added by Sarfaraz // NS-PROD-222//13/02/2023
		IF pos1 = 0 THEN
			start_pos := 1;
		ELSE
			select instr(P_DATA,'|',1,pos1)+1 into start_pos from dual;
		END IF;
		-- Added by Sarfaraz // NS-PROD-222//13/02/2023

		select instr(P_DATA,'|',1,P_POS) into end_pos from dual;

		-- Added by Sarfaraz // NS-PROD-222//13/02/2023
		IF end_pos = 0 THEN
			SELECT LENGTH(P_DATA)+1 INTO END_POS FROM DUAL;
		END IF;
		-- Added by Sarfaraz // NS-PROD-222//13/02/2023

		char_length :=end_pos-start_pos;

		select substr(P_DATA,start_pos,char_length) into LV_VF_VALUE from dual;
		EXCEPTION
			WHEN OTHERS THEN
				RETURN NULL;
	END;
-- Added by Sarfaraz // NS-PROD-183 // 09-02-2023

-- Commented by Sarfaraz // NS-PROD-183 // 09-02-2023
/*  OPEN GET_VF(P_DATA,P_POS);
  FETCH GET_VF INTO LV_VF_VALUE;
  CLOSE GET_VF;
*/
-- Commented by Sarfaraz // NS-PROD-183 // 09-02-2023

  RETURN UPPER(LV_VF_VALUE);
END GET_VF_VALUE;


-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250
FUNCTION GET_SKU_QTY(P_LINE_ID NUMBER)
RETURN NUMBER
IS
	LN_COUNT NUMBER := 0;
BEGIN
	BEGIN
		SELECT count(*) into LN_COUNT
		FROM PAXAR.PX_CARE_WOV_HEADERS pcwh,PAXAR.PX_CARE_WOV_DETAIL_LINES pcwdl
		WHERE pcwh.CARE_WOV_ID=pcwdl.CARE_WOV_ID AND pcwh.order_line_id=P_LINE_ID
		AND pcwdl.SEQUENCE!=0;
	EXCEPTION
		WHEN OTHERS THEN
			LN_COUNT := 0;
	END;

	IF LN_COUNT = 0 THEN
		BEGIN
			select count(*) INTO LN_COUNT
      from px_oe_variable_details
			where header_sequence_id=(select
				header_sequence_id from px_oe_variable_headers where line_id=P_LINE_ID and entry_type='I');
		EXCEPTION
			WHEN OTHERS THEN
				LN_COUNT := 0;
		END;
	END IF;
	RETURN LN_COUNT;
END GET_SKU_QTY;
-- Added by Sarfaraz // 26-12-2022 // NS-MOCK2-250


-- Added by Sarfaraz // NS-MOCK2-157 // 02-11-2022
FUNCTION CHECK_CBS_SKU(L_VF_POSITION NUMBER,P_IIID NUMBER,P_ORG_ID NUMBER,P_HEADER_ID NUMBER,P_LINE_ID NUMBER)
RETURN NUMBER
IS
	SQL_QUERY LONG;
	VF LONG;
	LN_CHECK_SKU NUMBER;
	TYPE C_GET_SKU_DATA IS REF CURSOR;
	C_GET_DATA_SKU_V C_GET_SKU_DATA;
BEGIN
	vf := 'VARIABLE_DATA'||L_VF_POSITION;
	SQL_QUERY:='select count(*) from (SELECT '||VF||',(SELECT BASE_ITEM_NUMBER FROM PX_COLOR_BY_SIZES_V WHERE GLID_INVENTORY_ITEM_ID='||P_IIID||'
				AND organization_id='||p_org_id||' and upper(variable_value)=UPPER('||vf||')) BASE_ITEM_NUMBER from px_oe_variable_details POVD
				WHERE HEADER_SEQUENCE_ID=(SELECT HEADER_SEQUENCE_ID FROM PX_OE_VARIABLE_HEADERS
				WHERE HEADER_ID='||p_header_id||' AND LINE_ID='||p_line_id||' AND ENTRY_TYPE=''I''))
				where base_item_number is null';

	OPEN C_GET_DATA_SKU_V FOR SQL_QUERY;
	FETCH C_GET_DATA_SKU_V INTO LN_CHECK_SKU;
	CLOSE C_GET_DATA_SKU_V;

	RETURN LN_CHECK_SKU;

END CHECK_CBS_SKU;
-- Added by Sarfaraz // NS-MOCK2-157 // 02-11-2022

PROCEDURE GENERATE_BATCH(
    P_BATCH_LOGIC VARCHAR2
    ,P_Press_Type VARCHAR2
	,P_HEADER_ID NUMBER)
AS
  CURSOR CUR_GLOR
  IS
    SELECT INTERNAL_ITEM,TE
    FROM PAXAR.PX_BATCH_AUTO_TMP WHERE REQUEST_ID=g_conc_request_id
    GROUP BY INTERNAL_ITEM, TE;

  CURSOR CUR_BAT_GLOR(pin_item VARCHAR2,pin_te NUMBER)
  IS
    SELECT *
    FROM PAXAR.PX_BATCH_AUTO_TMP
    WHERE INTERNAL_ITEM=PIN_ITEM AND REQUEST_ID=g_conc_request_id
    AND TE       =pin_te AND ORDER_NO IS NOT NULL
	ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

  CURSOR cur_glid
  IS
    SELECT INTERNAL_ITEM FROM PAXAR.PX_BATCH_AUTO_TMP WHERE REQUEST_ID=g_conc_request_id GROUP BY INTERNAL_ITEM;

  CURSOR CUR_BAT_glid(pin_item VARCHAR2)
  IS
    SELECT * FROM PAXAR.PX_BATCH_AUTO_TMP
	WHERE INTERNAL_ITEM=PIN_ITEM AND REQUEST_ID=g_conc_request_id
	AND ORDER_NO IS NOT NULL ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

  CURSOR cur_glid_ship
  IS
    SELECT pbd.INTERNAL_ITEM,SHIP_TO
    FROM PAXAR.PX_BATCH_AUTO_TMP PBD
    WHERE PBD.REQUEST_ID=g_conc_request_id
    GROUP BY pbd.INTERNAL_ITEM,PBD.SHIP_TO;

  CURSOR CUR_BAT_glship(pin_item VARCHAR2,P_SHIP_TO VARCHAR2)
  IS
    SELECT * FROM PAXAR.PX_BATCH_AUTO_TMP WHERE INTERNAL_ITEM=PIN_ITEM
	AND SHIP_TO=P_SHIP_TO AND REQUEST_ID=g_conc_request_id
	AND ORDER_NO IS NOT NULL ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

  CURSOR cur_glid_bill
  IS
    SELECT PBD.INTERNAL_ITEM,PBD.BILL_TO
    FROM PAXAR.PX_BATCH_AUTO_TMP PBD
    WHERE PBD.REQUEST_ID=g_conc_request_id
    GROUP BY PBD.INTERNAL_ITEM,PBD.BILL_TO;

  CURSOR CUR_BAT_glbill(pin_item VARCHAR2,P_BILL_TO VARCHAR2)
  IS
    SELECT * FROM PAXAR.PX_BATCH_AUTO_TMP WHERE INTERNAL_ITEM=PIN_ITEM
	AND BILL_TO=P_BILL_TO AND REQUEST_ID=g_conc_request_id
	AND ORDER_NO IS NOT NULL ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

  CURSOR cur_glid_po
  IS
    SELECT PBD.INTERNAL_ITEM,PBD.cust_po
    FROM PAXAR.PX_BATCH_AUTO_TMP PBD
    WHERE PBD.REQUEST_ID=g_conc_request_id
    GROUP BY PBD.INTERNAL_ITEM,PBD.cust_po;

  CURSOR CUR_BAT_glpo(pin_item VARCHAR2,P_CUST_PO VARCHAR2)
  IS
    SELECT * FROM PAXAR.PX_BATCH_AUTO_TMP WHERE INTERNAL_ITEM=PIN_ITEM
	AND CUST_PO=P_CUST_PO AND REQUEST_ID=g_conc_request_id
	AND ORDER_NO IS NOT NULL ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

    CURSOR CUR_GLLIN
  IS
    SELECT INTERNAL_ITEM,ORDER_NO,LINE_NO,jobno
    FROM PAXAR.PX_BATCH_AUTO_TMP WHERE REQUEST_ID=g_conc_request_id
    GROUP BY INTERNAL_ITEM, ORDER_NO,LINE_NO,jobno;

  CURSOR CUR_BAT_GLLIN(pin_item VARCHAR2,P_ORDER_NO NUMBER,pin_line NUMBER,p_jobno VARCHAR2)
  IS
    SELECT *
    FROM PAXAR.PX_BATCH_AUTO_TMP
    WHERE INTERNAL_ITEM=PIN_ITEM
	AND ORDER_NO=P_ORDER_NO
    AND line_no=PIN_line
	AND to_char(jobno)=to_char(p_jobno)
	and REQUEST_ID=g_conc_request_id
	AND ORDER_NO IS NOT NULL ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

    CURSOR CUR_Stk
  IS
    SELECT Stocktype
    FROM PAXAR.PX_BATCH_AUTO_TMP
	where stocktype is not null AND REQUEST_ID=g_conc_request_id
    GROUP BY Stocktype;

  CURSOR CUR_BAT_Stk(pin_stk VARCHAR2)
  IS
    SELECT *
    FROM PAXAR.PX_BATCH_AUTO_TMP
    WHERE stocktype=pin_stk AND REQUEST_ID=g_conc_request_id
	AND ORDER_NO IS NOT NULL ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

  CURSOR CUR_Stk_frm
  IS
    SELECT Stocktype,formatname
    FROM PAXAR.PX_BATCH_AUTO_TMP WHERE REQUEST_ID=g_conc_request_id
    GROUP BY Stocktype,formatname;

  CURSOR CUR_BAT_Stkfrm(pin_stk VARCHAR2,pin_formatname VARCHAR2)
  IS
    SELECT *
    FROM PAXAR.PX_BATCH_AUTO_TMP
    WHERE STOCKTYPE=PIN_STK
    and formatname=pin_formatname AND REQUEST_ID=g_conc_request_id
	AND ORDER_NO IS NOT NULL ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;

	--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023
	CURSOR CUR_GL_ON
	IS
		SELECT INTERNAL_ITEM,ORDER_NO
		FROM PAXAR.PX_BATCH_AUTO_TMP WHERE REQUEST_ID=g_conc_request_id
		GROUP BY INTERNAL_ITEM, ORDER_NO;

	CURSOR CUR_BAT_GL_ON(P_INTERNAL_ITEM VARCHAR2,P_ORDER_NO NUMBER)
	IS
		SELECT *
		FROM PAXAR.PX_BATCH_AUTO_TMP
		WHERE INTERNAL_ITEM=P_INTERNAL_ITEM AND REQUEST_ID=g_conc_request_id
		AND ORDER_NO       =P_ORDER_NO AND ORDER_NO IS NOT NULL
		ORDER BY TO_DATE(REQUESTDATE,'DD-MM-YYYY'),QUANTITY;
	--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023

	CURSOR C_GET_SETUP_DATA(P_HEADER_ID NUMBER) IS
	SELECT MAX_ORDER_NO_PER_BATCH,MAX_SKU_PER_BATCH,MAX_QTY_PER_BATCH,INVENTORY_ORG_CODE,BATCH_REQUEST_DATE_RANGE
	from PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id=P_HEADER_ID;

  V_BATCH_NUMBER VARCHAR2(10000);
  L_MAX_ORDER_NO NUMBER;
  L_MAX_SKU_COUNT NUMBER;
  L_SKU_COUNT NUMBER;
  L_ORDER_COUNT NUMBER;
  L_QTY NUMBER;
  L_MAX_QTY NUMBER;
  L_QTY_COUNTER NUMBER;
  L_ORG_CODE VARCHAR2(4000);
  L_REQUEST_DATE varchar2(2000);
  L_REQUEST_DATE_COUNT NUMBER;
  L_BATCH_REQUEST_DATE_RANGE NUMBER;
  ln_autobatch_header_id Number;            -- Added By Lingaraj
  lv_autobatch_Config      XmlType  ; -- Added By Lingaraj

BEGIN
   -- Get Auto Batch Header ID and Config info
     pr_get_autobatch_config_info(p_request_id => g_conc_request_id,
                                                          p_autobatch_header_id  => ln_autobatch_header_id ,
                                                          p_autobatch_config        => lv_autobatch_Config
                                                          );

	OPEN C_GET_SETUP_DATA(P_HEADER_ID);
	FETCH C_GET_SETUP_DATA INTO L_MAX_ORDER_NO,L_MAX_SKU_COUNT,L_MAX_QTY,L_ORG_CODE,L_BATCH_REQUEST_DATE_RANGE;
	CLOSE C_GET_SETUP_DATA;


	--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023
	IF (P_BATCH_LOGIC='By GLID and Order Number') THEN
		FOR REC IN CUR_GL_ON
		LOOP
			V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);

			-- BATCH ATO ORDERS
			L_ORDER_COUNT := 0;
			L_QTY_COUNTER := 0;
			L_SKU_COUNT:=0;
			L_REQUEST_DATE := null;
			L_REQUEST_DATE_COUNT :=0;
			FOR C2 IN CUR_BAT_GL_ON(REC.internal_item,REC.ORDER_NO)
			LOOP
				L_ORDER_COUNT:=L_ORDER_COUNT+1;
				L_QTY_COUNTER := L_QTY_COUNTER+C2.QUANTITY;
				L_SKU_COUNT := L_SKU_COUNT + GET_SKU_QTY(C2.ORDER_LINE_ID);

				IF L_REQUEST_DATE IS NULL THEN
					L_REQUEST_DATE := C2.REQUESTDATE;
					L_REQUEST_DATE_COUNT := 1;
				ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C2.REQUESTDATE,'DD-MM-YYYY') THEN
					L_REQUEST_DATE := C2.REQUESTDATE;
					L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
				END IF;

				IF L_ORDER_COUNT > L_MAX_ORDER_NO
					OR L_QTY_COUNTER > L_MAX_QTY
					OR L_SKU_COUNT > L_MAX_SKU_COUNT
					OR L_REQUEST_DATE_COUNT > L_BATCH_REQUEST_DATE_RANGE
				THEN
					V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);

					L_ORDER_COUNT := 1;
					L_QTY_COUNTER := C2.QUANTITY;
					L_SKU_COUNT := GET_SKU_QTY(C2.ORDER_LINE_ID);
					L_REQUEST_DATE_COUNT := 1;
				END IF;

				UPDATE PAXAR.PX_BATCH_AUTO_TMP
				SET BATCH_NUMBER   =V_BATCH_NUMBER,
				BATCH_STATUS     ='Batched',BATCHTYPE='Auto',
				PRESSTYPE=P_Press_Type,
				BATCH_LOGIC= P_BATCH_LOGIC,
				BATCH_CREATED_DATE=sysdate,
				CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
				LAST_UPDATED_DATE=sysdate,
				last_updated_by=FND_PROFILE.VALUE('USERNAME')
				WHERE internal_item=C2.internal_item AND ORDER_NO=C2.ORDER_NO
				AND LINE_NO = C2.LINE_NO AND REQUEST_ID=g_conc_request_id;
			END LOOP;
			-- BATCH ATO ORDERS
		END LOOP;
	END IF;
	--- Added by Sarfaraz // NS-MOCK2-127 // 27-01-2023

  IF(P_BATCH_LOGIC='By GLID and OM Order ID') THEN
    FOR REC_GLOR IN CUR_GLOR
    LOOP
		/*V_BATCH_NUMBER:=L_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;   --Commented By LINGARAJ 28JUL2022*/
        V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);--Added By LINGARAj 28 JUL 2022

		-- BATCH NON-ATO ORDERS
		L_ORDER_COUNT := 0;
		L_QTY_COUNTER := 0;
		FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_TMP
					WHERE INTERNAL_ITEM=rec_glor.internal_item
					AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
		LOOP
			L_ORDER_COUNT := L_ORDER_COUNT+ 1;
			L_QTY_COUNTER := L_QTY_COUNTER + C1.JOB_QTY;
			IF L_ORDER_COUNT > L_MAX_ORDER_NO OR L_QTY_COUNTER > L_MAX_QTY THEN
				V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);

				L_ORDER_COUNT := 1;
				L_QTY_COUNTER := C1.JOB_QTY;
			END IF;

			UPDATE PAXAR.PX_BATCH_AUTO_TMP
			SET BATCH_NUMBER   =V_BATCH_NUMBER,
			BATCH_STATUS     ='Batched',BATCHTYPE='Auto',
			PRESSTYPE=P_Press_Type,
			BATCH_LOGIC= P_BATCH_LOGIC,
			BATCH_CREATED_DATE=sysdate,
			CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
			LAST_UPDATED_DATE=sysdate,
			last_updated_by=FND_PROFILE.VALUE('USERNAME')
			WHERE internal_item=rec_glor.internal_item
			AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
		END LOOP;
		-- BATCH NON-ATO ORDERS

		-- BATCH ATO ORDERS
		L_ORDER_COUNT := 0;
		L_QTY_COUNTER := 0;
		L_SKU_COUNT:=0;
		L_REQUEST_DATE := null;
		L_REQUEST_DATE_COUNT :=0;
		FOR C2 IN CUR_BAT_glor(rec_glor.internal_item,rec_glor.te)
		LOOP
			L_ORDER_COUNT:=L_ORDER_COUNT+1;
			L_QTY_COUNTER := L_QTY_COUNTER+C2.QUANTITY;
			L_SKU_COUNT := L_SKU_COUNT + GET_SKU_QTY(C2.ORDER_LINE_ID);

			IF L_REQUEST_DATE IS NULL THEN
				L_REQUEST_DATE := C2.REQUESTDATE;
				L_REQUEST_DATE_COUNT := 1;
			ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C2.REQUESTDATE,'DD-MM-YYYY') THEN
				L_REQUEST_DATE := C2.REQUESTDATE;
				L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
			END IF;

			IF L_ORDER_COUNT > L_MAX_ORDER_NO
				OR L_QTY_COUNTER > L_MAX_QTY
				OR L_SKU_COUNT > L_MAX_SKU_COUNT
				OR L_REQUEST_DATE_COUNT > L_BATCH_REQUEST_DATE_RANGE
			THEN
				V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);

				L_ORDER_COUNT := 1;
				L_QTY_COUNTER := C2.QUANTITY;
				L_SKU_COUNT := GET_SKU_QTY(C2.ORDER_LINE_ID);
				L_REQUEST_DATE_COUNT := 1;
			END IF;

			UPDATE PAXAR.PX_BATCH_AUTO_TMP
			SET BATCH_NUMBER   =V_BATCH_NUMBER,
			BATCH_STATUS     ='Batched',BATCHTYPE='Auto',
			PRESSTYPE=P_Press_Type,
			BATCH_LOGIC= P_BATCH_LOGIC,
			BATCH_CREATED_DATE=sysdate,
			CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
			LAST_UPDATED_DATE=sysdate,
			last_updated_by=FND_PROFILE.VALUE('USERNAME')
			WHERE internal_item=rec_glor.internal_item AND ORDER_NO=C2.ORDER_NO
			AND LINE_NO = C2.LINE_NO AND TE=rec_glor.te AND REQUEST_ID=g_conc_request_id;
		END LOOP;
		-- BATCH ATO ORDERS
      END LOOP;
  END IF;

  IF(P_BATCH_LOGIC='By GLID') THEN
	fnd_file.put_line(fnd_file.log,'By GLID');
    FOR rec_glid IN cur_glid
    LOOP
		fnd_file.put_line(fnd_file.log,rec_glid.internal_item);
		/*V_BATCH_NUMBER:=L_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;  --Commented By LINGARAJ 28JUL2022*/
        V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);--Added By LINGARAj 28 JUL 2022

		-- BATCH NON-ATO ORDERS
		L_ORDER_COUNT := 0;
		L_QTY_COUNTER := 0;
		FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_TMP
					WHERE INTERNAL_ITEM=rec_glid.internal_item AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
		LOOP
			L_ORDER_COUNT := L_ORDER_COUNT+ 1;
			L_QTY_COUNTER := L_QTY_COUNTER + C1.JOB_QTY;
			IF L_ORDER_COUNT > L_MAX_ORDER_NO OR L_QTY_COUNTER > L_MAX_QTY THEN
				V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);

				L_ORDER_COUNT := 1;
				L_QTY_COUNTER := C1.JOB_QTY;
			END IF;

			UPDATE PAXAR.PX_BATCH_AUTO_TMP
			SET BATCH_NUMBER   =V_BATCH_NUMBER,
			BATCH_STATUS     ='Batched',BATCHTYPE='Auto',
			PRESSTYPE=P_Press_Type,
			BATCH_LOGIC= P_BATCH_LOGIC,
			BATCH_CREATED_DATE=sysdate,
			CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
			LAST_UPDATED_DATE=sysdate,
			last_updated_by=FND_PROFILE.VALUE('USERNAME')
			WHERE internal_item=rec_glid.internal_item AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
		END LOOP;
		-- BATCH NON-ATO ORDERS

		-- BATCH ATO ORDERS
		L_ORDER_COUNT := 0;
		L_QTY_COUNTER := 0;
		L_SKU_COUNT:=0;
		L_REQUEST_DATE := null;
		L_REQUEST_DATE_COUNT :=0;
		FOR C2 IN cur_bat_glid(rec_glid.internal_item)
		LOOP
			L_ORDER_COUNT:=L_ORDER_COUNT+1;
			L_QTY_COUNTER := L_QTY_COUNTER+C2.QUANTITY;
			L_SKU_COUNT := L_SKU_COUNT + GET_SKU_QTY(C2.ORDER_LINE_ID);

			IF L_REQUEST_DATE IS NULL THEN
				L_REQUEST_DATE := C2.REQUESTDATE;
				L_REQUEST_DATE_COUNT := 1;
			ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C2.REQUESTDATE,'DD-MM-YYYY') THEN
				L_REQUEST_DATE := C2.REQUESTDATE;
				L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
			END IF;

			IF L_ORDER_COUNT > L_MAX_ORDER_NO
				OR L_QTY_COUNTER > L_MAX_QTY
				OR L_SKU_COUNT > L_MAX_SKU_COUNT
				OR L_REQUEST_DATE_COUNT > L_BATCH_REQUEST_DATE_RANGE
			THEN
				V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);

				L_ORDER_COUNT := 1;
				L_QTY_COUNTER := C2.QUANTITY;
				L_SKU_COUNT := GET_SKU_QTY(C2.ORDER_LINE_ID);
				L_REQUEST_DATE_COUNT := 1;
			END IF;

			UPDATE PAXAR.PX_BATCH_AUTO_TMP
			SET BATCH_NUMBER   =V_BATCH_NUMBER,
			BATCH_STATUS     ='Batched',BATCHTYPE='Auto',
			PRESSTYPE=P_Press_Type,
			BATCH_LOGIC= P_BATCH_LOGIC,
			BATCH_CREATED_DATE=sysdate,
			CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
			LAST_UPDATED_DATE=sysdate,
			last_updated_by=FND_PROFILE.VALUE('USERNAME')
			WHERE internal_item=rec_glid.internal_item
			AND ORDER_NO=C2.ORDER_NO AND LINE_NO = C2.LINE_NO
			AND REQUEST_ID=g_conc_request_id;
		END LOOP;
		-- BATCH ATO ORDERS
    END LOOP;
  END IF;


IF(P_BATCH_LOGIC='By GLID and Ship To') THEN
    FOR rec_glid_ship IN cur_glid_ship
    LOOP
		/*V_BATCH_NUMBER:=L_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;  --Commented By LINGARAJ 28JUL2022*/
        V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);--Added By LINGARAj 28 JUL 2022

		-- BATCH NON-ATO ORDERS
		FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_TMP
					WHERE INTERNAL_ITEM=rec_glid_ship.internal_item
					AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
		LOOP
			L_ORDER_COUNT := L_ORDER_COUNT+ 1;
			L_QTY_COUNTER := L_QTY_COUNTER + C1.JOB_QTY;
			IF L_ORDER_COUNT > L_MAX_ORDER_NO OR L_QTY_COUNTER > L_MAX_QTY THEN
				V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);

				L_ORDER_COUNT := 1;
				L_QTY_COUNTER := C1.JOB_QTY;
			END IF;

			UPDATE PAXAR.PX_BATCH_AUTO_TMP
			SET BATCH_NUMBER   =V_BATCH_NUMBER,
			BATCH_STATUS     ='Batched',BATCHTYPE='Auto',
			PRESSTYPE=P_Press_Type,
			BATCH_LOGIC= P_BATCH_LOGIC,
			BATCH_CREATED_DATE=sysdate,
			CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
			LAST_UPDATED_DATE=sysdate,
			last_updated_by=FND_PROFILE.VALUE('USERNAME')
			WHERE internal_item=rec_glid_ship.internal_item
			AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
		END LOOP;
		-- BATCH NON-ATO ORDERS

		-- BATCH ATO ORDERS
		L_ORDER_COUNT := 0;
		L_QTY_COUNTER := 0;
		L_SKU_COUNT:=0;
		L_REQUEST_DATE := null;
		L_REQUEST_DATE_COUNT :=0;
		FOR C2 IN CUR_BAT_glship(rec_glid_ship.internal_item,rec_glid_ship.SHIP_TO)
		LOOP
			L_ORDER_COUNT:=L_ORDER_COUNT+1;
			L_QTY_COUNTER := L_QTY_COUNTER+C2.QUANTITY;
			L_SKU_COUNT := L_SKU_COUNT + GET_SKU_QTY(C2.ORDER_LINE_ID);

			IF L_REQUEST_DATE IS NULL THEN
				L_REQUEST_DATE := C2.REQUESTDATE;
				L_REQUEST_DATE_COUNT := 1;
			ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C2.REQUESTDATE,'DD-MM-YYYY') THEN
				L_REQUEST_DATE := C2.REQUESTDATE;
				L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
			END IF;

			IF L_ORDER_COUNT > L_MAX_ORDER_NO
				OR L_QTY_COUNTER > L_MAX_QTY
				OR L_SKU_COUNT > L_MAX_SKU_COUNT
				OR L_REQUEST_DATE_COUNT > L_BATCH_REQUEST_DATE_RANGE
			THEN
				V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);

				L_ORDER_COUNT := 1;
				L_QTY_COUNTER := C2.QUANTITY;
				L_SKU_COUNT := GET_SKU_QTY(C2.ORDER_LINE_ID);
				L_REQUEST_DATE_COUNT := 1;
			END IF;
			UPDATE PAXAR.PX_BATCH_AUTO_TMP
			SET BATCH_NUMBER   =V_BATCH_NUMBER,
			BATCH_STATUS     ='Batched',BATCHTYPE='Auto',
			PRESSTYPE=P_Press_Type,
			BATCH_LOGIC= P_BATCH_LOGIC,
			BATCH_CREATED_DATE=sysdate,
			CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
			LAST_UPDATED_DATE=sysdate,
			last_updated_by=FND_PROFILE.VALUE('USERNAME')
			WHERE internal_item=rec_glid_ship.internal_item AND ORDER_NO=C2.ORDER_NO
			AND LINE_NO = C2.LINE_NO AND SHIP_TO=rec_glid_ship.SHIP_TO
			AND REQUEST_ID=g_conc_request_id;
		END LOOP;
		-- BATCH ATO ORDERS
    END LOOP;
  END IF;


  IF(P_BATCH_LOGIC='By GLID and Bill To') THEN
	FOR rec_glid_bill IN cur_glid_bill
    LOOP
		V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);--Added By LINGARAj 28 JUL 2022

		-- BATCH NON-ATO ORDERS
		L_ORDER_COUNT := 0;
		L_QTY_COUNTER := 0;
		FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_TMP
					WHERE INTERNAL_ITEM=rec_glid_bill.internal_item
					AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
		LOOP
			L_ORDER_COUNT := L_ORDER_COUNT+ 1;
			L_QTY_COUNTER := L_QTY_COUNTER + C1.JOB_QTY;
			IF L_ORDER_COUNT > L_MAX_ORDER_NO OR L_QTY_COUNTER > L_MAX_QTY THEN
				V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);

				L_ORDER_COUNT := 1;
				L_QTY_COUNTER := C1.JOB_QTY;
			END IF;

			UPDATE PAXAR.PX_BATCH_AUTO_TMP
			SET BATCH_NUMBER   =V_BATCH_NUMBER,
			BATCH_STATUS     ='Batched',BATCHTYPE='Auto',
			PRESSTYPE=P_Press_Type,
			BATCH_LOGIC= P_BATCH_LOGIC,
			BATCH_CREATED_DATE=sysdate,
			CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
			LAST_UPDATED_DATE=sysdate,
			last_updated_by=FND_PROFILE.VALUE('USERNAME')
			WHERE internal_item=rec_glid_bill.internal_item AND REQUEST_ID=g_conc_request_id
			and jobno=C1.jobno;
		END LOOP;
		-- BATCH NON-ATO ORDERS

		-- BATCH ATO ORDERS
		L_ORDER_COUNT := 0;
		L_QTY_COUNTER := 0;
		L_SKU_COUNT:=0;
		L_REQUEST_DATE := null;
		L_REQUEST_DATE_COUNT :=0;
		FOR C2 IN CUR_BAT_glbill(rec_glid_bill.internal_item,rec_glid_bill.BILL_TO)
		LOOP
			L_ORDER_COUNT:=L_ORDER_COUNT+1;
			L_QTY_COUNTER := L_QTY_COUNTER+C2.QUANTITY;
			L_SKU_COUNT := L_SKU_COUNT + GET_SKU_QTY(C2.ORDER_LINE_ID);

			IF L_REQUEST_DATE IS NULL THEN
				L_REQUEST_DATE := C2.REQUESTDATE;
				L_REQUEST_DATE_COUNT := 1;
			ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C2.REQUESTDATE,'DD-MM-YYYY') THEN
				L_REQUEST_DATE := C2.REQUESTDATE;
				L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
			END IF;

			IF L_ORDER_COUNT > L_MAX_ORDER_NO
				OR L_QTY_COUNTER > L_MAX_QTY
				OR L_SKU_COUNT > L_MAX_SKU_COUNT
				OR L_REQUEST_DATE_COUNT > L_BATCH_REQUEST_DATE_RANGE
			THEN
				V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);

				L_ORDER_COUNT := 1;
				L_QTY_COUNTER := C2.QUANTITY;
				L_SKU_COUNT := GET_SKU_QTY(C2.ORDER_LINE_ID);
				L_REQUEST_DATE_COUNT := 1;
			END IF;

			UPDATE PAXAR.PX_BATCH_AUTO_TMP
			SET BATCH_NUMBER   =V_BATCH_NUMBER,
			BATCH_STATUS     ='Batched',BATCHTYPE='Auto',
			PRESSTYPE=P_Press_Type,
			BATCH_LOGIC= P_BATCH_LOGIC,
			BATCH_CREATED_DATE=sysdate,
			CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
			LAST_UPDATED_DATE=sysdate,
			last_updated_by=FND_PROFILE.VALUE('USERNAME')
			WHERE internal_item=rec_glid_bill.internal_item AND ORDER_NO=C2.ORDER_NO
			AND LINE_NO = C2.LINE_NO AND BILL_TO=rec_glid_bill.BILL_TO
			AND REQUEST_ID=g_conc_request_id;
		END LOOP;
		-- BATCH ATO ORDERS
    END LOOP;
  END IF;

  IF(P_BATCH_LOGIC='By GLID and Customer PO') THEN
    FOR rec_glid_po IN cur_glid_po
    LOOP
		/*V_BATCH_NUMBER:=L_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;   --Commented By LINGARAJ 28JUL2022*/
        V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);--Added By LINGARAj 28 JUL 2022

		-- BATCH NON-ATO ORDERS
		L_ORDER_COUNT := 0;
		L_QTY_COUNTER := 0;
		FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_TMP
					WHERE INTERNAL_ITEM=rec_glid_po.internal_item AND REQUEST_ID=g_conc_request_id AND ORDER_NO IS NULL)
		LOOP
			L_ORDER_COUNT := L_ORDER_COUNT+ 1;
			L_QTY_COUNTER := L_QTY_COUNTER + C1.JOB_QTY;
			IF L_ORDER_COUNT > L_MAX_ORDER_NO OR L_QTY_COUNTER > L_MAX_QTY THEN
				V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);

				L_ORDER_COUNT := 1;
				L_QTY_COUNTER := C1.JOB_QTY;
			END IF;

			UPDATE PAXAR.PX_BATCH_AUTO_TMP
			SET BATCH_NUMBER   =V_BATCH_NUMBER,
			BATCH_STATUS     ='Batched',BATCHTYPE='Auto',
			PRESSTYPE=P_Press_Type,
			BATCH_LOGIC= P_BATCH_LOGIC,
			BATCH_CREATED_DATE=sysdate,
			CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
			LAST_UPDATED_DATE=sysdate,
			last_updated_by=FND_PROFILE.VALUE('USERNAME')
			WHERE internal_item=rec_glid_po.internal_item AND REQUEST_ID=g_conc_request_id
			AND jobno=C1.jobno;
		END LOOP;
		-- BATCH NON-ATO ORDERS

		-- BATCH ATO ORDERS
		L_ORDER_COUNT := 0;
		L_QTY_COUNTER := 0;
		L_SKU_COUNT:=0;
		L_REQUEST_DATE := null;
		L_REQUEST_DATE_COUNT :=0;
		FOR C2 IN CUR_BAT_glpo(rec_glid_po.internal_item,rec_glid_po.CUST_PO)
		LOOP
			L_ORDER_COUNT:=L_ORDER_COUNT+1;
			L_QTY_COUNTER := L_QTY_COUNTER+C2.QUANTITY;
			L_SKU_COUNT := L_SKU_COUNT + GET_SKU_QTY(C2.ORDER_LINE_ID);

			IF L_REQUEST_DATE IS NULL THEN
				L_REQUEST_DATE := C2.REQUESTDATE;
				L_REQUEST_DATE_COUNT := 1;
			ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C2.REQUESTDATE,'DD-MM-YYYY') THEN
				L_REQUEST_DATE := C2.REQUESTDATE;
				L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
			END IF;

			IF L_ORDER_COUNT > L_MAX_ORDER_NO
				OR L_QTY_COUNTER > L_MAX_QTY
				OR L_SKU_COUNT > L_MAX_SKU_COUNT
				OR L_REQUEST_DATE_COUNT > L_BATCH_REQUEST_DATE_RANGE
			THEN
				V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);

				L_ORDER_COUNT := 1;
				L_QTY_COUNTER := C2.QUANTITY;
				L_SKU_COUNT := GET_SKU_QTY(C2.ORDER_LINE_ID);
				L_REQUEST_DATE_COUNT := 1;
			END IF;

			UPDATE PAXAR.PX_BATCH_AUTO_TMP
			SET BATCH_NUMBER   =V_BATCH_NUMBER,
			BATCH_STATUS     ='Batched',BATCHTYPE='Auto',
			PRESSTYPE=P_Press_Type,
			BATCH_LOGIC= P_BATCH_LOGIC,
			BATCH_CREATED_DATE=sysdate,
			CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
			LAST_UPDATED_DATE=sysdate,
			last_updated_by=FND_PROFILE.VALUE('USERNAME')
			WHERE internal_item=rec_glid_po.internal_item AND ORDER_NO=C2.ORDER_NO
			AND LINE_NO = C2.LINE_NO AND CUST_PO=rec_glid_po.CUST_PO
			AND REQUEST_ID=g_conc_request_id;
		END LOOP;
		-- BATCH ATO ORDERS
    END LOOP;
  END IF;

 IF(P_BATCH_LOGIC='By GLID and Order Line') THEN
    FOR REC_GLLIN IN CUR_GLLIN
    LOOP
		/*V_BATCH_NUMBER:=L_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;  --Commented By LINGARAJ 28JUL2022*/
        V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);--Added By LINGARAj 28 JUL 2022

		-- BATCH NON-ATO ORDERS
		L_ORDER_COUNT := 0;
		L_QTY_COUNTER := 0;
		FOR C1 IN (SELECT * FROM PAXAR.PX_BATCH_AUTO_TMP
					WHERE INTERNAL_ITEM=rec_gllin.internal_item AND REQUEST_ID=g_conc_request_id
					AND ORDER_NO IS NULL)
		LOOP
			L_ORDER_COUNT := L_ORDER_COUNT+ 1;
			L_QTY_COUNTER := L_QTY_COUNTER + C1.JOB_QTY;
			IF L_ORDER_COUNT > L_MAX_ORDER_NO OR L_QTY_COUNTER > L_MAX_QTY THEN
				V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);

				L_ORDER_COUNT := 1;
				L_QTY_COUNTER := C1.JOB_QTY;
			END IF;

			UPDATE PAXAR.PX_BATCH_AUTO_TMP
			SET BATCH_NUMBER   =V_BATCH_NUMBER,
			BATCH_STATUS     ='Batched',BATCHTYPE='Auto',
			PRESSTYPE=P_Press_Type,
			BATCH_LOGIC= P_BATCH_LOGIC,
			BATCH_CREATED_DATE=sysdate,
			CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
			LAST_UPDATED_DATE=sysdate,
			last_updated_by=FND_PROFILE.VALUE('USERNAME')
			WHERE internal_item=rec_gllin.internal_item
			AND REQUEST_ID=g_conc_request_id and jobno=C1.jobno;
		END LOOP;
		-- BATCH NON-ATO ORDERS

		-- BATCH ATO ORDERS
		L_ORDER_COUNT := 0;
		L_QTY_COUNTER := 0;
		L_SKU_COUNT:=0;
		L_REQUEST_DATE := null;
		L_REQUEST_DATE_COUNT :=0;
		FOR C2 IN CUR_BAT_gllin(rec_gllin.internal_item,rec_gllin.order_no,rec_gllin.line_no,REC_GLLIN.jobno)
		LOOP
			L_ORDER_COUNT:=L_ORDER_COUNT+1;
			L_QTY_COUNTER := L_QTY_COUNTER+C2.QUANTITY;
			L_SKU_COUNT := L_SKU_COUNT + GET_SKU_QTY(C2.ORDER_LINE_ID);

			IF L_REQUEST_DATE IS NULL THEN
				L_REQUEST_DATE := C2.REQUESTDATE;
				L_REQUEST_DATE_COUNT := 1;
			ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C2.REQUESTDATE,'DD-MM-YYYY') THEN
				L_REQUEST_DATE := C2.REQUESTDATE;
				L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
			END IF;

			IF L_ORDER_COUNT > L_MAX_ORDER_NO
				OR L_QTY_COUNTER > L_MAX_QTY
				OR L_SKU_COUNT > L_MAX_SKU_COUNT
				OR L_REQUEST_DATE_COUNT > L_BATCH_REQUEST_DATE_RANGE
			THEN
				V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);

				L_ORDER_COUNT := 1;
				L_QTY_COUNTER := C2.QUANTITY;
				L_SKU_COUNT := GET_SKU_QTY(C2.ORDER_LINE_ID);
				L_REQUEST_DATE_COUNT := 1;
			END IF;
			UPDATE PAXAR.PX_BATCH_AUTO_TMP
			SET BATCH_NUMBER   =V_BATCH_NUMBER,
			BATCH_STATUS     ='Batched',BATCHTYPE='Auto',
			PRESSTYPE=P_Press_Type,
			BATCH_LOGIC= P_BATCH_LOGIC,
			BATCH_CREATED_DATE=sysdate,
			CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
			LAST_UPDATED_DATE=sysdate,
			last_updated_by=FND_PROFILE.VALUE('USERNAME')
			WHERE internal_item=rec_gllin.internal_item AND ORDER_NO=C2.ORDER_NO
			AND LINE_NO = C2.LINE_NO AND REQUEST_ID=g_conc_request_id;
		END LOOP;
		-- BATCH ATO ORDERS
    END LOOP;
  END IF;

  IF(P_BATCH_LOGIC='By Stock Type') THEN
    FOR REC_Stk IN CUR_Stk
    LOOP
		/*V_BATCH_NUMBER:=L_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;--Commented By LINGARAJ 28JUL2022*/
        V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);--Added By LINGARAj 28 JUL 2022

		-- BATCH ATO ORDERS
		L_ORDER_COUNT := 0;
		L_QTY_COUNTER := 0;
		L_SKU_COUNT:=0;
		L_REQUEST_DATE := null;
		L_REQUEST_DATE_COUNT :=0;
		FOR C1 IN CUR_BAT_stk(rec_stk.stocktype)
		LOOP
			L_ORDER_COUNT:=L_ORDER_COUNT+1;
			L_QTY_COUNTER := L_QTY_COUNTER+C1.QUANTITY;
			L_SKU_COUNT := L_SKU_COUNT + GET_SKU_QTY(C1.ORDER_LINE_ID);

			IF L_REQUEST_DATE IS NULL THEN
				L_REQUEST_DATE := C1.REQUESTDATE;
				L_REQUEST_DATE_COUNT := 1;
			ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
				L_REQUEST_DATE := C1.REQUESTDATE;
				L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
			END IF;

			IF L_ORDER_COUNT > L_MAX_ORDER_NO
				OR L_QTY_COUNTER > L_MAX_QTY
				OR L_SKU_COUNT > L_MAX_SKU_COUNT
				OR L_REQUEST_DATE_COUNT > L_BATCH_REQUEST_DATE_RANGE
			THEN
				V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);

				L_ORDER_COUNT := 1;
				L_QTY_COUNTER := C1.QUANTITY;
				L_SKU_COUNT := GET_SKU_QTY(C1.ORDER_LINE_ID);
				L_REQUEST_DATE_COUNT := 1;
			END IF;

			UPDATE PAXAR.PX_BATCH_AUTO_TMP
			SET BATCH_NUMBER   =V_BATCH_NUMBER,
			BATCH_STATUS     ='Batched',BATCHTYPE='Auto',
			PRESSTYPE=P_Press_Type,
			BATCH_LOGIC= P_BATCH_LOGIC,
			BATCH_CREATED_DATE=sysdate,
			CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
			LAST_UPDATED_DATE=sysdate,
			last_updated_by=FND_PROFILE.VALUE('USERNAME')
			WHERE stocktype=REC_Stk.stocktype AND ORDER_NO=C1.ORDER_NO
			AND LINE_NO = C1.LINE_NO AND REQUEST_ID=g_conc_request_id;
		END LOOP;
		-- BATCH ATO ORDERS
    END LOOP;
  END IF;


  IF(P_BATCH_LOGIC='By Stock Type and Format') THEN
    FOR REC_Stkfrm IN CUR_Stk_frm
    LOOP
		/*V_BATCH_NUMBER:=L_ORG_CODE||PX_BATCH_SEQ.NEXTVAL;--Commented By LINGARAJ 28JUL2022*/
        V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);--Added By LINGARAj 28 JUL 2022

		-- BATCH ATO ORDERS
		L_ORDER_COUNT := 0;
		L_QTY_COUNTER := 0;
		L_SKU_COUNT:=0;
		L_REQUEST_DATE := null;
		L_REQUEST_DATE_COUNT :=0;
		FOR C1 IN CUR_BAT_stkfrm(rec_stkfrm.stocktype,rec_stkfrm.formatname)
		LOOP
			L_ORDER_COUNT:=L_ORDER_COUNT+1;
			L_QTY_COUNTER := L_QTY_COUNTER+C1.QUANTITY;
			L_SKU_COUNT := L_SKU_COUNT + GET_SKU_QTY(C1.ORDER_LINE_ID);

			IF L_REQUEST_DATE IS NULL THEN
				L_REQUEST_DATE := C1.REQUESTDATE;
				L_REQUEST_DATE_COUNT := 1;
			ELSIF TO_DATE(L_REQUEST_DATE,'DD-MM-YYYY') != TO_DATE(C1.REQUESTDATE,'DD-MM-YYYY') THEN
				L_REQUEST_DATE := C1.REQUESTDATE;
				L_REQUEST_DATE_COUNT := L_REQUEST_DATE_COUNT + 1;
			END IF;

			IF L_ORDER_COUNT > L_MAX_ORDER_NO
				OR L_QTY_COUNTER > L_MAX_QTY
				OR L_SKU_COUNT > L_MAX_SKU_COUNT
				OR L_REQUEST_DATE_COUNT > L_BATCH_REQUEST_DATE_RANGE
			THEN
				V_BATCH_NUMBER:=PX_NANSHA_BATCH_UTIL_PKG.fn_get_batch_number(L_ORG_CODE);

				L_ORDER_COUNT := 1;
				L_QTY_COUNTER := C1.QUANTITY;
				L_SKU_COUNT := GET_SKU_QTY(C1.ORDER_LINE_ID);
				L_REQUEST_DATE_COUNT := 1;
			END IF;

			UPDATE PAXAR.PX_BATCH_AUTO_TMP
			SET BATCH_NUMBER   =V_BATCH_NUMBER,
			BATCH_STATUS     ='Batched',BATCHTYPE='Auto',
			PRESSTYPE=P_Press_Type,
			BATCH_LOGIC= P_BATCH_LOGIC,
			BATCH_CREATED_DATE=sysdate,
			CREATEDBY=FND_PROFILE.VALUE('USERNAME'),
			LAST_UPDATED_DATE=sysdate,
			last_updated_by=FND_PROFILE.VALUE('USERNAME')
			WHERE STOCKTYPE=rec_stkfrm.STOCKTYPE
			and formatname=rec_stkfrm.formatname AND ORDER_NO=C1.ORDER_NO
			AND LINE_NO = C1.LINE_NO AND REQUEST_ID=g_conc_request_id;
		END LOOP;
		-- BATCH ATO ORDERS
    END LOOP;
  END IF;

  INSERT INTO paxar.PX_BATCH_DETAILS_TAB
	(
		BATCH_NUMBER
		,BATCH_STATUS
		,CUSTOMER_NUMBER
		,CUSTOMER_NAME
		,ORDER_NO
		,LINE_NO
		,INTERNAL_ITEM
		,QUANTITY
		,UOM
		,JOBNO
		,ASSEMBLY
		,JOB_QTY
		,JOBUOM
		,JOBSTATUS
		,TE
		,STOCKTYPE
		,INVENTORYCODE
		,SYSTEMID
		,FORMATNAME
		,REQUESTDATE
		,PROMISEDATE
		,SCHEDULESHIPDATE
		,PLANNERCODE
		,INVENTORYORG
		,PRODUCTIONMETHOD
		,BATCHTYPE
		,BATCH_CREATED_DATE
		,CREATED_BY
		,LAST_UPDATED_DATE
		,LAST_UPDATED_BY
		,RELEASED_DATE
		,TYPESETTING_METHOD
		,PRESSTYPE
		,SUB_BATCH
		,BATCH_LOGIC
		,OE_HEADER_ID
		,OE_LINE_ID
		,WIP_ENTITY_ID
        ,REQUEST_ID,AUTO_BATCH_HEADER_ID,AUTO_BATCH_CONFIG_XML      -- Added by Lingaraj
	)
	(SELECT PBT.BATCH_NUMBER,PBT.BATCH_STATUS,PBT.CUSTOMER_NUMBER,PBT.CUSTOMER_NAME,PBT.ORDER_NO,PBT.LINE_NO,PBT.INTERNAL_ITEM,PBT.QUANTITY,PBT.UOM,PBT.JOBNO,PBT.ASSEMBLY,PBT.JOB_QTY,PBT.JOBUOM,
		PBT.JOBSTATUS,PBT.TE,PBT.STOCKTYPE,PBT.INVENTORYCODE,PBT.SYSTEMID,PBT.FORMATNAME,PBT.REQUESTDATE,PBT.PROMISEDATE,PBT.SCHEDULESHIPDATE,PBT.PLANNERCODE,PBT.INVENTORYORG,PBT.PRODUCTIONMETHOD,PBT.BATCHTYPE,
		PBT.BATCH_CREATED_DATE,PBT.CREATEDBY,PBT.LAST_UPDATED_DATE,PBT.LAST_UPDATED_BY,PBT.RELEASED_DATE,PBT.TYPESETTING_METHOD,PBT.PRESSTYPE,PBT.SUB_BATCH,PBT.BATCH_LOGIC,
		PBT.ORDER_HEADER_ID,PBT.ORDER_LINE_ID,PBT.WIP_ENTITY_ID ,g_conc_request_id ,ln_autobatch_header_id,lv_autobatch_Config
	FROM PAXAR.PX_BATCH_AUTO_TMP PBT where  PBT.BATCH_STATUS  ='Batched' AND PBT.REQUEST_ID=g_conc_request_id
	AND (SELECT COUNT(*) FROM APPS.PX_BATCH_DETAILS_TAB PT
    WHERE PT.JOBNO=PBT.JOBNO AND SUB_BATCH IS NULL AND PT.BATCH_STATUS IN ('Batched','Released')) = 0);

  COMMIT;
END GENERATE_BATCH;

/*
   This Procedure Called by  "PX OM Autobatch Execution Trigger Program"

*/
PROCEDURE CALL_WRAPPER(P_ERRBUFF OUT VARCHAR2 , P_RETCODE OUT NUMBER) AS

    --Get All Active Auto Batch Setup Rules
	cursor cur_setup IS
	SELECT *
    FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T
     where NVL(AUTO_BATCH_ACTIVE,'No') != 'No'
		order by inventory_org_code desc,press_type,cf_seq; -- Added by Sarfaraz// NS-PROD-65
    --order by press_type,inventory_org_code,cf_seq;

    -- Get Auto Batch Schedule Details of the input Header ID
	cursor cur_sch_data(P_HEADER_ID NUMBER) IS
	SELECT *
    FROM PAXAR.PAXAR_OE_AUTO_BATCH_SCH_T
    WHERE HEADER_ID = P_HEADER_ID
	AND trunc(sysdate) between trunc(start_date) and nvl(trunc(end_date),trunc(sysdate));

    --Fetch If Any Auto Batch schedule Program currently scheduled to Run for the  (Auto Batch Setup + Auto Batch Schedule Time)
	cursor c_get_sch_status(P_HEADER_ID VARCHAR2,P_DATE varchar2) IS
	select count(*) from fnd_concurrent_requests
	where concurrent_program_id=
                    (select CONCURRENT_PROGRAM_ID
                        from FND_CONCURRENT_PROGRAMS
                        where CONCURRENT_PROGRAM_NAME='PX_OM_AUTOBATCH_SCHEDULE'
                     )
	and phase_code = 'P'
    and status_code = 'Q'
	and to_char(requested_start_date,'DD-MM-RRRR HH24:MI:SS')=to_char(to_date(P_DATE,'DD-MM-RRRR HH24:MI:SS'),'DD-MM-RRRR HH24:MI:SS')
	and ARGUMENT1=P_HEADER_ID;

	CURSOR C_GET_TIME(T1 VARCHAR2) IS
	SELECT regexp_substr(t1, '[^,; ]+', 1, LEVEL) sch_time
       FROM DUAL
       CONNECT BY REGEXP_SUBSTR(t1, '[^,; ]+', 1, LEVEL) IS NOT NULL;

	-- Temporary Table
	CURSOR C_GET_SETUP IS
	SELECT * FROM PAXAR.PX_SCH_SETUP_TMP
	ORDER BY SCH_TIME,INVENTORY_ORG_CODE desc,PRESS_TYPE,CF_SEQ; --Added by Sarfaraz// NS-PROD-65
    --ORDER BY SCH_TIME,PRESS_TYPE,INVENTORY_ORG_CODE,CF_SEQ;

	l_time_zone VARCHAR2(100);
	sun char;
	mon char;
	tue char;
	wed char;
	thu char;
	fri char;
	sat char;
	l_date varchar2(500);
	l_time varchar2(1000);
	l_time1 varchar2(1000);
	l_count number;
	v_request_id        NUMBER;
	v_status            BOOLEAN;
	l_curr_day varchar2(500);
	l_shedule_counter number;
	l_curr_time varchar2(500);
	l_db_time varchar2(500);
	l_set_date date;
	l_interval_time VARCHAR2(500);
	lv_prev_time VARCHAR2(500);
	LV_REQUEST_IDS VARCHAR2(4000);
	ln_group_id NUMBER;

	l_prev_org varchar2(4000);
	l_prev_press varchar2(4000);
	L_PREV_REQUEST_ID number;
    lv_active         Varchar2(10);

	L_DAY varchar2(100); -- Added by Sarfaraz // NS-MOCK2-151 // 08-11-2022
BEGIN
	--Initialize the session with appropirate values
    -- Not Required as it is running inside EBS Concurrent
	/*fnd_global.apps_initialize (user_id=>FND_PROFILE.VALUE('USER_ID')
                              ,resp_id=>FND_PROFILE.VALUE('RESP_ID')
                              ,resp_appl_id=>FND_PROFILE.VALUE('RESP_APPL_ID')); -- to be changed later.*/

	FOR c_setup IN cur_setup
	LOOP
		IF c_setup.AUTO_BATCH_ACTIVE = 'Immediately Batch' THEN
			fnd_file.put_line(fnd_file.log,'Immediately Batch');
								v_request_id := fnd_request.submit_request ( application => 'PAX'
															  , program     => 'PX_OM_AUTOBATCH_SCHEDULE'
															  , start_time  => SYSDATE   --TO_CHAR(SYSDATE + 3/24,'DD-Mon-YYYY HH24:MI:SS')
															  , sub_request => FALSE
															  ,ARGUMENT1=> c_setup.HEADER_ID);
					COMMIT;

					IF v_request_id = 0 THEN
						fnd_file.put_line(fnd_file.log,'Request not submitted: '|| fnd_message.get);
					ELSE
						fnd_file.put_line(fnd_file.log,'Request submitted successfully. Request id: ' || v_request_id);
					END IF;
		ELSE
			fnd_file.put_line(fnd_file.log,'Scheduled Batch');
			fnd_file.put_line(fnd_file.log,'Auto Batch Setup Header ID  :' ||c_setup.header_id);

			FOR c_sch IN cur_sch_data(c_setup.header_id)
			LOOP
				l_time_zone := substr(c_sch.DB_TIME_ZONE,6,1);
				l_time:= c_sch.DB_TIME;

				sun := c_sch.SUN;
				mon := c_sch.MON;
				tue := c_sch.TUE;
				wed := c_sch.WED;
				thu := c_sch.THU;
				fri := c_sch.FRI;
				sat := c_sch.SAT;
				fnd_file.put_line(fnd_file.log,l_time_zone);
				/*--select to_char(sysdate,'DY') into l_curr_day from dual; Commented for current day not as per HKT

                lv_active := 'False';
				lv_active := (Case When l_curr_day = 'SUN'   And  nvl(c_sch.SUN,'N')  = 'Y' Then 'True'
                                       When l_curr_day = 'MON' And  nvl(c_sch.MON,'N') = 'Y' Then 'True'
                                       When l_curr_day = 'TUE'   And  nvl(c_sch.TUE,'N')   = 'Y' Then 'True'
                                       When l_curr_day = 'WED'  And  nvl(c_sch.WED,'N')  = 'Y' Then 'True'
                                       When l_curr_day = 'THU'  And  nvl(c_sch.THU,'N')   = 'Y' Then 'True'
                                       When l_curr_day = 'FRI'    And  nvl(c_sch.FRI,'N')    = 'Y' Then 'True'
                                       When l_curr_day = 'SAT'   And  nvl(c_sch.SAT,'N')   = 'Y' Then 'True'
                                       Else 'False'
                                End);
                fnd_file.put_line(fnd_file.log,'Current Day of the Week :'|| l_curr_day);
                fnd_file.put_line(fnd_file.log,'Schedule is Active for Today to Execute :'||    lv_active  );

                IF lv_active = 'True'  Then*/
				--IF sun ='Y' and l_curr_day='SUN' THEN
				--	fnd_file.put_line(fnd_file.log,'sun');
					FOR c_time IN C_GET_TIME(L_TIME)
					LOOP
						fnd_file.put_line(fnd_file.log,c_time.SCH_TIME);

						SELECT TO_CHAR(TO_DATE(c_time.SCH_TIME,'HH24:MI') - NUMTODSINTERVAL(L_TIME_ZONE, 'HOUR'),'HH24:MI')
                        INTO L_DB_TIME FROM DUAL;
						fnd_file.put_line(fnd_file.log,L_DB_TIME);

						L_SET_DATE:=TO_DATE(TRUNC(SYSDATE)||' '||L_DB_TIME||':00','DD-MM-RRRR HH24:MI:SS');
						SELECT TO_CHAR(L_SET_DATE,'DD-MM-RRRR HH24:MI:SS') INTO L_DATE FROM DUAL;
						fnd_file.put_line(fnd_file.log,l_date);

						select to_char(TO_DATE(l_date,'DD-MM-RRRR HH24:MI:SS') + NUMTODSINTERVAL(l_time_zone, 'HOUR'),'DY') into l_curr_day from dual; -- Added to get current day as per HKT.

						lv_active := 'False';
						lv_active := (Case When l_curr_day = 'SUN'   And  nvl(c_sch.SUN,'N')  = 'Y' Then 'True'
                                       When l_curr_day = 'MON' And  nvl(c_sch.MON,'N') = 'Y' Then 'True'
                                       When l_curr_day = 'TUE'   And  nvl(c_sch.TUE,'N')   = 'Y' Then 'True'
                                       When l_curr_day = 'WED'  And  nvl(c_sch.WED,'N')  = 'Y' Then 'True'
                                       When l_curr_day = 'THU'  And  nvl(c_sch.THU,'N')   = 'Y' Then 'True'
                                       When l_curr_day = 'FRI'    And  nvl(c_sch.FRI,'N')    = 'Y' Then 'True'
                                       When l_curr_day = 'SAT'   And  nvl(c_sch.SAT,'N')   = 'Y' Then 'True'
                                       Else 'False'
                                End);
						fnd_file.put_line(fnd_file.log,'Current Day of the Week :'|| l_curr_day);
						fnd_file.put_line(fnd_file.log,'Schedule is Active for Today to Execute :'||    lv_active  );

						IF lv_active = 'True'  Then
							-- Added by Sarfaraz // NS-MOCK2-151 // 08-11-2022

							IF TO_DATE(L_DATE,'DD-MM-YYYY HH24:MI:SS') < SYSDATE
							THEN
							fnd_file.put_line(fnd_file.log,'NEW LOGIC : '||L_DATE );
								L_DATE := TO_CHAR(TO_DATE(L_DATE,'dd-mm-yyyy hh24:mi:ss') + 1,'dd-mm-yyyy hh24:mi:ss');
								fnd_file.put_line(fnd_file.log,'NEW LOGIC : '||L_DATE );
								L_DAY := TO_CHAR(TO_DATE(L_DATE,'dd-mm-yyyy hh24:mi:ss')+NUMTODSINTERVAL(l_time_zone, 'HOUR'),'DY');
								fnd_file.put_line(fnd_file.log,'NEW LOGIC : '||L_DAY );
								lv_active := (Case 	When L_DAY = 'SUN'  And  nvl(c_sch.SUN,'N')  = 'Y' Then 'True'
													When L_DAY = 'MON' 	And  nvl(c_sch.MON,'N') = 'Y' Then 'True'
													When L_DAY = 'TUE'  And  nvl(c_sch.TUE,'N') = 'Y' Then 'True'
													When L_DAY = 'WED' 	And  nvl(c_sch.WED,'N') = 'Y' Then 'True'
													When L_DAY = 'THU'  And  nvl(c_sch.THU,'N') = 'Y' Then 'True'
													When L_DAY = 'FRI'  And  nvl(c_sch.FRI,'N') = 'Y' Then 'True'
													When L_DAY = 'SAT'  And  nvl(c_sch.SAT,'N') = 'Y' Then 'True'
												Else 'FALSE'
									End);
								fnd_file.put_line(fnd_file.log,'NEW LOGIC : '||lv_active );
								IF lv_active = 'FALSE' THEN
									L_DATE := NULL;
								END IF;

							END IF;

							-- Added by Sarfaraz // NS-MOCK2-151 // 08-11-2022

							SELECT TO_CHAR(SYSDATE,'DD-MM-RRRR HH24:MI:SS') INTO L_CURR_TIME FROM DUAL;  -- Current date and time
							--SELECT TO_CHAR(SYSDATE+1/24,'DD-MM-RRRR HH24:MI:SS') INTO L_INTERVAL_TIME FROM DUAL; -- 1 hour later time
							SELECT TO_CHAR(SYSDATE+8/24,'DD-MM-RRRR HH24:MI:SS') INTO L_INTERVAL_TIME FROM DUAL; -- 8 hour later time
							fnd_file.put_line(fnd_file.log,'L_CURR_TIME: '||L_CURR_TIME );
							fnd_file.put_line(fnd_file.log,'L_INTERVAL_TIME : '||L_INTERVAL_TIME );

							--IF L_DATE BETWEEN L_CURR_TIME AND L_INTERVAL_TIME AND L_DATE IS NOT NULL THEN  -- Commented by Sarfaraz 01-DEC-2022 For time check issue.
							IF to_date(L_DATE,'DD-MM-YYYY HH24:MI:SS') between to_date(L_CURR_TIME,'DD-MM-YYYY HH24:MI:SS') and to_date(L_INTERVAL_TIME,'DD-MM-YYYY HH24:MI:SS') and L_DATE is not null THEN  -- Added by Sarfaraz 01-DEC-2022 For time check issue.
								OPEN c_get_sch_status(c_setup.HEADER_ID,l_date);
								FETCH c_get_sch_status INTO l_shedule_counter;
								CLOSE c_get_sch_status;

								fnd_file.put_line(fnd_file.log,'l_shedule_counter: '||l_shedule_counter );

								if l_shedule_counter = 0 THEN
									INSERT INTO PAXAR.PX_SCH_SETUP_TMP(HEADER_ID,INVENTORY_ORG_CODE,PRESS_TYPE,CF_SEQ,SCH_TIME,SCH_DATE)
									VALUES(c_setup.HEADER_ID,c_setup.inventory_org_code,c_setup.press_type,c_setup.cf_seq,L_DB_TIME,L_DATE);
									COMMIT;
									fnd_file.put_line(fnd_file.log,'Schedule request for this setup');

								end if;
							end if;
						END IF;
					END LOOP;
				--END IF; -- IF sun ='Y' THEN

                /*  -- Commented by Lingaraj . Code is Same for All the Day .
				IF mon ='Y' and l_curr_day='MON' THEN
					fnd_file.put_line(fnd_file.log,'MON');

					fnd_file.put_line(fnd_file.log,c_setup.HEADER_ID);
					FOR c_time IN C_GET_TIME(L_TIME)
					LOOP
						fnd_file.put_line(fnd_file.log,c_time.SCH_TIME);

						SELECT TO_CHAR(TO_DATE(c_time.SCH_TIME,'HH24:MI') - NUMTODSINTERVAL(L_TIME_ZONE, 'HOUR'),'HH24:MI') INTO L_DB_TIME FROM DUAL;
						fnd_file.put_line(fnd_file.log,L_DB_TIME);

						L_SET_DATE:=TO_DATE(TRUNC(SYSDATE)||' '||L_DB_TIME||':00','DD-MM-RRRR HH24:MI:SS');
						SELECT TO_CHAR(L_SET_DATE,'DD-MM-RRRR HH24:MI:SS') INTO L_DATE FROM DUAL;
						fnd_file.put_line(fnd_file.log,l_date);

						SELECT TO_CHAR(SYSDATE,'DD-MM-RRRR HH24:MI:SS') INTO L_CURR_TIME FROM DUAL;  -- Current date and time
						SELECT TO_CHAR(SYSDATE+1/24,'DD-MM-RRRR HH24:MI:SS') INTO L_INTERVAL_TIME FROM DUAL; -- 1 hour later time

						IF L_DATE BETWEEN L_CURR_TIME AND L_INTERVAL_TIME THEN
							OPEN c_get_sch_status(c_setup.HEADER_ID,l_date);
							FETCH c_get_sch_status INTO l_shedule_counter;
							CLOSE c_get_sch_status;

							if l_shedule_counter = 0 THEN
								INSERT INTO PAXAR.PX_SCH_SETUP_TMP(HEADER_ID,INVENTORY_ORG_CODE,PRESS_TYPE,CF_SEQ,SCH_TIME,SCH_DATE)
								VALUES(c_setup.HEADER_ID,c_setup.inventory_org_code,c_setup.press_type,c_setup.cf_seq,L_DB_TIME,L_DATE);
								COMMIT;
								fnd_file.put_line(fnd_file.log,'Schedule request for this setup');

							end if;
						end if;
					END LOOP;
				END IF;-- IF mon ='Y' THEN

				IF tue ='Y' and l_curr_day='TUE' THEN
					fnd_file.put_line(fnd_file.log,'TUE');
					FOR c_time IN C_GET_TIME(L_TIME)
					LOOP
						fnd_file.put_line(fnd_file.log,c_time.SCH_TIME);

						SELECT TO_CHAR(TO_DATE(c_time.SCH_TIME,'HH24:MI') - NUMTODSINTERVAL(L_TIME_ZONE, 'HOUR'),'HH24:MI') INTO L_DB_TIME FROM DUAL;
						fnd_file.put_line(fnd_file.log,L_DB_TIME);

						L_SET_DATE:=TO_DATE(TRUNC(SYSDATE)||' '||L_DB_TIME||':00','DD-MM-RRRR HH24:MI:SS');
						SELECT TO_CHAR(L_SET_DATE,'DD-MM-RRRR HH24:MI:SS') INTO L_DATE FROM DUAL;
						fnd_file.put_line(fnd_file.log,l_date);

						SELECT TO_CHAR(SYSDATE,'DD-MM-RRRR HH24:MI:SS') INTO L_CURR_TIME FROM DUAL;  -- Current date and time
						SELECT TO_CHAR(SYSDATE+1/24,'DD-MM-RRRR HH24:MI:SS') INTO L_INTERVAL_TIME FROM DUAL; -- 1 hour later time

						IF L_DATE BETWEEN L_CURR_TIME AND L_INTERVAL_TIME THEN
							OPEN c_get_sch_status(c_setup.HEADER_ID,l_date);
							FETCH c_get_sch_status INTO l_shedule_counter;
							CLOSE c_get_sch_status;

							if l_shedule_counter = 0 THEN
								INSERT INTO PAXAR.PX_SCH_SETUP_TMP(HEADER_ID,INVENTORY_ORG_CODE,PRESS_TYPE,CF_SEQ,SCH_TIME,SCH_DATE)
								VALUES(c_setup.HEADER_ID,c_setup.inventory_org_code,c_setup.press_type,c_setup.cf_seq,L_DB_TIME,L_DATE);
								COMMIT;
								fnd_file.put_line(fnd_file.log,'Schedule request for this setup');

							end if;
						end if;
					END LOOP;
				END IF; --IF tue ='Y' THEN

				IF wed ='Y' and l_curr_day='WED' THEN
					fnd_file.put_line(fnd_file.log,'WED');
					FOR c_time IN C_GET_TIME(L_TIME)
					LOOP
						fnd_file.put_line(fnd_file.log,c_time.SCH_TIME);

						SELECT TO_CHAR(TO_DATE(c_time.SCH_TIME,'HH24:MI') - NUMTODSINTERVAL(L_TIME_ZONE, 'HOUR'),'HH24:MI') INTO L_DB_TIME FROM DUAL;
						fnd_file.put_line(fnd_file.log,L_DB_TIME);

						L_SET_DATE:=TO_DATE(TRUNC(SYSDATE)||' '||L_DB_TIME||':00','DD-MM-RRRR HH24:MI:SS');
						SELECT TO_CHAR(L_SET_DATE,'DD-MM-RRRR HH24:MI:SS') INTO L_DATE FROM DUAL;
						fnd_file.put_line(fnd_file.log,l_date);

						SELECT TO_CHAR(SYSDATE,'DD-MM-RRRR HH24:MI:SS') INTO L_CURR_TIME FROM DUAL;  -- Current date and time
						SELECT TO_CHAR(SYSDATE+1/24,'DD-MM-RRRR HH24:MI:SS') INTO L_INTERVAL_TIME FROM DUAL; -- 1 hour later time

						IF L_DATE BETWEEN L_CURR_TIME AND L_INTERVAL_TIME THEN
							OPEN c_get_sch_status(c_setup.HEADER_ID,l_date);
							FETCH c_get_sch_status INTO l_shedule_counter;
							CLOSE c_get_sch_status;

							if l_shedule_counter = 0 THEN
								INSERT INTO PAXAR.PX_SCH_SETUP_TMP(HEADER_ID,INVENTORY_ORG_CODE,PRESS_TYPE,CF_SEQ,SCH_TIME,SCH_DATE)
								VALUES(c_setup.HEADER_ID,c_setup.inventory_org_code,c_setup.press_type,c_setup.cf_seq,L_DB_TIME,L_DATE);
								COMMIT;
								fnd_file.put_line(fnd_file.log,'Schedule request for this setup');

							end if;
						end if;
					END LOOP;
				END IF; --IF wed ='Y' THEN

				IF thu ='Y' and l_curr_day='THU' THEN
					fnd_file.put_line(fnd_file.log,'THU');
					FOR c_time IN C_GET_TIME(L_TIME)
					LOOP
						fnd_file.put_line(fnd_file.log,c_time.SCH_TIME);

						SELECT TO_CHAR(TO_DATE(c_time.SCH_TIME,'HH24:MI') - NUMTODSINTERVAL(L_TIME_ZONE, 'HOUR'),'HH24:MI') INTO L_DB_TIME FROM DUAL;
						fnd_file.put_line(fnd_file.log,L_DB_TIME);

						L_SET_DATE:=TO_DATE(TRUNC(SYSDATE)||' '||L_DB_TIME||':00','DD-MM-RRRR HH24:MI:SS');
						SELECT TO_CHAR(L_SET_DATE,'DD-MM-RRRR HH24:MI:SS') INTO L_DATE FROM DUAL;
						fnd_file.put_line(fnd_file.log,l_date);

						SELECT TO_CHAR(SYSDATE,'DD-MM-RRRR HH24:MI:SS') INTO L_CURR_TIME FROM DUAL;  -- Current date and time
						SELECT TO_CHAR(SYSDATE+1/24,'DD-MM-RRRR HH24:MI:SS') INTO L_INTERVAL_TIME FROM DUAL; -- 1 hour later time

						IF L_DATE BETWEEN L_CURR_TIME AND L_INTERVAL_TIME THEN
							OPEN c_get_sch_status(c_setup.HEADER_ID,l_date);
							FETCH c_get_sch_status INTO l_shedule_counter;
							CLOSE c_get_sch_status;

							if l_shedule_counter = 0 THEN
								INSERT INTO PAXAR.PX_SCH_SETUP_TMP(HEADER_ID,INVENTORY_ORG_CODE,PRESS_TYPE,CF_SEQ,SCH_TIME,SCH_DATE)
								VALUES(c_setup.HEADER_ID,c_setup.inventory_org_code,c_setup.press_type,c_setup.cf_seq,L_DB_TIME,L_DATE);
								COMMIT;
								fnd_file.put_line(fnd_file.log,'Schedule request for this setup');

							end if;
						end if;
					END LOOP;
				END IF; --IF thu ='Y' THEN

				IF fri ='Y' and l_curr_day='FRI' THEN
					fnd_file.put_line(fnd_file.log,'FRI');
					FOR c_time IN C_GET_TIME(L_TIME)
					LOOP
						fnd_file.put_line(fnd_file.log,c_time.SCH_TIME);

						SELECT TO_CHAR(TO_DATE(c_time.SCH_TIME,'HH24:MI') - NUMTODSINTERVAL(L_TIME_ZONE, 'HOUR'),'HH24:MI') INTO L_DB_TIME FROM DUAL;
						fnd_file.put_line(fnd_file.log,L_DB_TIME);

						L_SET_DATE:=TO_DATE(TRUNC(SYSDATE)||' '||L_DB_TIME||':00','DD-MM-RRRR HH24:MI:SS');
						SELECT TO_CHAR(L_SET_DATE,'DD-MM-RRRR HH24:MI:SS') INTO L_DATE FROM DUAL;
						fnd_file.put_line(fnd_file.log,l_date);

						SELECT TO_CHAR(SYSDATE,'DD-MM-RRRR HH24:MI:SS') INTO L_CURR_TIME FROM DUAL;  -- Current date and time
						SELECT TO_CHAR(SYSDATE+1/24,'DD-MM-RRRR HH24:MI:SS') INTO L_INTERVAL_TIME FROM DUAL; -- 1 hour later time

						IF L_DATE BETWEEN L_CURR_TIME AND L_INTERVAL_TIME THEN
							OPEN c_get_sch_status(c_setup.HEADER_ID,l_date);
							FETCH c_get_sch_status INTO l_shedule_counter;
							CLOSE c_get_sch_status;

							if l_shedule_counter = 0 THEN
								INSERT INTO PAXAR.PX_SCH_SETUP_TMP(HEADER_ID,INVENTORY_ORG_CODE,PRESS_TYPE,CF_SEQ,SCH_TIME,SCH_DATE)
								VALUES(c_setup.HEADER_ID,c_setup.inventory_org_code,c_setup.press_type,c_setup.cf_seq,L_DB_TIME,L_DATE);
								COMMIT;
								fnd_file.put_line(fnd_file.log,'Schedule request for this setup');

							end if;
						end if;
					END LOOP;
				END IF; --IF fri ='Y' THEN

				IF sat ='Y' and l_curr_day='SAT' THEN
					fnd_file.put_line(fnd_file.log,'SAT');
					FOR c_time IN C_GET_TIME(L_TIME)
					LOOP
						fnd_file.put_line(fnd_file.log,c_time.SCH_TIME);

						SELECT TO_CHAR(TO_DATE(c_time.SCH_TIME,'HH24:MI') - NUMTODSINTERVAL(L_TIME_ZONE, 'HOUR'),'HH24:MI') INTO L_DB_TIME FROM DUAL;
						fnd_file.put_line(fnd_file.log,L_DB_TIME);

						L_SET_DATE:=TO_DATE(TRUNC(SYSDATE)||' '||L_DB_TIME||':00','DD-MM-RRRR HH24:MI:SS');
						SELECT TO_CHAR(L_SET_DATE,'DD-MM-RRRR HH24:MI:SS') INTO L_DATE FROM DUAL;
						fnd_file.put_line(fnd_file.log,l_date);

						SELECT TO_CHAR(SYSDATE,'DD-MM-RRRR HH24:MI:SS') INTO L_CURR_TIME FROM DUAL;  -- Current date and time
						SELECT TO_CHAR(SYSDATE+1/24,'DD-MM-RRRR HH24:MI:SS') INTO L_INTERVAL_TIME FROM DUAL; -- 1 hour later time

						IF L_DATE BETWEEN L_CURR_TIME AND L_INTERVAL_TIME THEN
							OPEN c_get_sch_status(c_setup.HEADER_ID,l_date);
							FETCH c_get_sch_status INTO l_shedule_counter;
							CLOSE c_get_sch_status;

							if l_shedule_counter = 0 THEN
								INSERT INTO PAXAR.PX_SCH_SETUP_TMP(HEADER_ID,INVENTORY_ORG_CODE,PRESS_TYPE,CF_SEQ,SCH_TIME,SCH_DATE)
								VALUES(c_setup.HEADER_ID,c_setup.inventory_org_code,c_setup.press_type,c_setup.cf_seq,L_DB_TIME,L_DATE);
								COMMIT;
								fnd_file.put_line(fnd_file.log,'Schedule request for this setup');

							end if;
						end if;
					END LOOP;
				END IF; -- IF sat ='Y' THEN

				*/
                COMMIT;
			END LOOP;
		END IF;
	END LOOP;


	lv_prev_time:=NULL;
	LV_REQUEST_IDS := NULL;
	ln_group_id := paxar.px_auto_request_grp_s.nextval;
	FOR get_setup IN C_GET_SETUP
	LOOP
		IF lv_prev_time IS NOT NULL AND lv_prev_time != get_setup.SCH_DATE THEN

			v_request_id := fnd_request.submit_request ( application => 'PAX'
														, program     => 'PX_AUTO_EXPORT_REPORT_EXE'
														, start_time  =>  lv_prev_time  --TO_CHAR(SYSDATE + 3/24,'DD-Mon-YYYY HH24:MI:SS')
														, sub_request => FALSE
														,ARGUMENT1 => ln_group_id
                                                       -- ,ARGUMENT2 => g_conc_request_id
                                                        );
			COMMIT;

			IF v_request_id = 0 THEN
				fnd_file.put_line(fnd_file.log,'Request not submitted: '|| fnd_message.get);
			ELSE
				fnd_file.put_line(fnd_file.log,'PX_AUTO_EXPORT_REPORT_EXE - Request submitted successfully. Request id: ' || v_request_id ||  '# For Group ID  :'||ln_group_id );
				LV_REQUEST_IDS := NULL;
				ln_group_id := paxar.px_auto_request_grp_s.nextval;
                fnd_file.put_line(fnd_file.log, 'New Group ID Generated  :'|| ln_group_id);
			END IF;
		END IF;

		if l_prev_org is not null
              and l_prev_press is not null
              and l_prev_org = get_setup.INVENTORY_ORG_CODE
              and l_prev_press = get_setup.PRESS_TYPE
        then
			v_request_id := fnd_request.submit_request ( application => 'PAX'
																  , program     => 'PX_OM_AUTOBATCH_SCHEDULE'
																  , start_time  => get_setup.SCH_DATE   --TO_CHAR(SYSDATE + 3/24,'DD-Mon-YYYY HH24:MI:SS')
																  , sub_request => FALSE
																  ,ARGUMENT1=> get_setup.HEADER_ID
																  ,ARGUMENT2 => L_PREV_REQUEST_ID);
			COMMIT;

		else
			v_request_id := fnd_request.submit_request ( application => 'PAX'
																  , program     => 'PX_OM_AUTOBATCH_SCHEDULE'
																  , start_time  => get_setup.SCH_DATE   --TO_CHAR(SYSDATE + 3/24,'DD-Mon-YYYY HH24:MI:SS')
																  , sub_request => FALSE
																  ,ARGUMENT1=> get_setup.HEADER_ID
																  ,ARGUMENT2 => NULL);
			COMMIT;
		end if;


		IF v_request_id = 0 THEN
			fnd_file.put_line(fnd_file.log,'PX_OM_AUTOBATCH_SCHEDULE - Request not submitted: '|| fnd_message.get);
		ELSE
			fnd_file.put_line(fnd_file.log,'PX_OM_AUTOBATCH_SCHEDULE - Request submitted successfully. Request id: ' || v_request_id
                     || ' Auto Batch Setup Header ID  :'|| get_setup.HEADER_ID );

            insert into PAXAR.PX_AUTO_REQUEST_DTL_TMP(group_id,request_id) values(ln_group_id,v_request_id);

            IF LV_REQUEST_IDS IS NULL THEN
				LV_REQUEST_IDS := v_request_id;
			ELSE
				LV_REQUEST_IDS:=LV_REQUEST_IDS||','||v_request_id;
			END IF;
			l_prev_org := get_setup.INVENTORY_ORG_CODE;
			l_prev_press := get_setup.PRESS_TYPE;
			L_PREV_REQUEST_ID := v_request_id;
		END IF;
		lv_prev_time := get_setup.SCH_DATE;
	END LOOP;

	IF lv_prev_time IS NOT NULL AND LV_REQUEST_IDS IS NOT NULL  THEN
		v_request_id := fnd_request.submit_request ( application => 'PAX'
														, program     => 'PX_AUTO_EXPORT_REPORT_EXE'
														, start_time  =>  lv_prev_time  --TO_CHAR(SYSDATE + 3/24,'DD-Mon-YYYY HH24:MI:SS')
														, sub_request => FALSE
														,ARGUMENT1 => ln_group_id
                                                     --    ,ARGUMENT2 => g_conc_request_id
                                                         );
			COMMIT;

			IF v_request_id = 0 THEN
				fnd_file.put_line(fnd_file.log,'PX_AUTO_EXPORT_REPORT_EXE - Request not submitted: '|| fnd_message.get);
			ELSE
				fnd_file.put_line(fnd_file.log,'PX_AUTO_EXPORT_REPORT_EXE - Request submitted successfully. Request id: ' || v_request_id
                || ' #Group ID : '||ln_group_id );
			END IF;
	END IF;

    DELETE FROM PAXAR.PX_SCH_SETUP_TMP;

     fnd_file.put_line(fnd_file.log,' PAXAR.PX_SCH_SETUP_TMP Table Data Deleted, No of Records  :'|| sql%rowcount);

    COMMIT;

END CALL_WRAPPER;

PROCEDURE pr_get_autobatch_config_info(p_request_id Number,
                                                                            p_autobatch_header_id Out Number ,
                                                                            p_autobatch_config       Out Xmltype)
is
lv_sql1 Varchar2(4000);
lv_sql2 Varchar2(4000);
ln_cf_num Number;
lv_Step Varchar2(10);
Begin
    lv_Step := 'Step 1';
    SELECT HEADER_ID,    CF_SEQ
    Into  p_autobatch_header_id , ln_cf_num
    FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T Auto, apps.fnd_Concurrent_requests fcr
    WHERE  to_number(fcr.argument1) = Auto.Header_id And fcr.request_id = p_request_id;
     lv_Step := 'Step 2';

     -- Query to Fetch the Auto Batch Setup Info
     lv_sql1 := 'SELECT HEADER_ID,INVENTORY_ORG_ID,INVENTORY_ORG_CODE,PRESS_TYPE,CF_SEQ, '||
                      'AUTO_BATCH_ACTIVE,MAX_ORDER_NO_PER_BATCH,MAX_SKU_PER_BATCH,MAX_QTY_PER_BATCH,'||
                      'BATCH_REQUEST_DATE_RANGE,CUSTOM_FILTER,BATCH_LOGIC ,fcr.REQUEST_ID , fcr.Argument_text '||
                      'FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T Auto, apps.fnd_Concurrent_requests fcr  WHERE '||
                      ' to_number(fcr.argument1) = Auto.Header_id And fcr.request_id = '|| p_request_id;
     lv_Step := 'Step 3';

    lv_sql2 :=    'Select H.CF_SEQNO, h.HEADER_ID , L.GROUP_ID,OPERATOR_LOGIC,L.PARAMETER_DETAILS,L.OPERATOR_DETAILS,'||
                        'L.VALUE_FROM,L.VALUE_TO,L.ATTRIBUTE1  '||
                        'from PAXAR.PAXAR_OE_AUTO_BATCH_SEQ_HDR_T H,     '||
                        'PAXAR.PAXAR_OE_AUTO_BATCH_SEQ_LINE_T L where H.HEADER_ID = L.HEADER_ID And CF_SEQNO = '||  nvl(ln_cf_num,0);

      lv_Step := 'Step 4';

   select xmlelement("XML",
        xmlelement(evalname('AutoBatchSetup'), dbms_xmlgen.getxmltype(lv_sql1) ),
        xmlelement(evalname('CFSetup'), dbms_xmlgen.getxmltype(lv_sql2) )
                            )x
    Into p_autobatch_config
    from DUAL ;

       lv_Step := 'Step 5';

Exception
When Others Then
    fnd_file.put_line(fnd_file.log,'Unexpected Error in PX_AUTO_BATCHING_PKG.pr_get_autobatch_config_info() :'||sqlerrm);
    fnd_file.put_line(fnd_file.log,'Last Step Executed : '||   lv_Step);
    p_autobatch_header_id := Null;
    p_autobatch_config := Null;
End  pr_get_autobatch_config_info;

FUNCTION fn_get_autobatch_cf_query(p_seq_no Number, p_Calling_Unit Varchar2 Default Null) Return Varchar2
is
    cursor c_get_seq_hdr is
        select header_id from paxar.paxar_oe_auto_batch_seq_hdr_t
        where cf_seqno=p_seq_no;

    cursor c_get_group_id(p_seq_header_id number) is
        select group_id,count(*) g_count
        from paxar.paxar_oe_auto_batch_seq_line_t
        where header_id  =  p_seq_header_id
        group by group_id;

    cursor c_get_seq_line(p_seq_header_id number,p_group_id number) is
        select operator_logic,parameter_details,operator_details,value_from,value_to
        from paxar.paxar_oe_auto_batch_seq_line_t
        where header_id=p_seq_header_id
        and nvl(group_id,1)=nvl(p_group_id,1)
        order by to_number(attribute1);

    cursor c_get_operator_det(p_operator_desc varchar2) is
          select meaning
          from fnd_lookup_values
          where lookup_type='PAXAR_ONT_AUTO_SEQUENCE'
          and language     ='US'
          and enabled_flag='Y'
          and (
                    end_date_active is null
                       Or
                    trunc(end_date_active) > trunc(sysdate)
                  )
          and tag='SEQ'
          and description=p_operator_desc;

    cursor c_get_param_det(p_param_desc varchar2) is
          select meaning
          from fnd_lookup_values
          where lookup_type='PAXAR_ONT_AUTO_SEQUENCE'
          and language     ='US'
          and enabled_flag='Y'
          and (     end_date_active is null or trunc(end_date_active)>trunc(sysdate)     )
          and tag='SQL'
          and description=p_param_desc;


    l_cf_query                     varchar2(10000);
    ln_rule_cnt                    number;
    object_details_query   varchar2(10000);
    l_operator_logic           varchar2(1000);
    l_object_details            varchar2(1000);
    l_parameter_details    varchar2(1000);
    l_operator_details varchar2(1000);
    l_value_from_details varchar2(1000);
    l_value_to_details varchar2(1000);
    l_param_column varchar2(1000);
    l_operator_value varchar2(1000);
    l_operator_details_query   varchar2(32000);

    l_value                     varchar2(1000);

Begin
      l_cf_query:= null;
     pr_log_msg_auto('CF Number / p_Calling_Unit :'|| p_seq_no ||'/'|| p_Calling_Unit);
    for seq_header in c_get_seq_hdr
    loop

        for seq_group in c_get_group_id(seq_header.header_id)
        loop
           ln_rule_cnt := 0 ;
            for seq_line in c_get_seq_line(seq_header.header_id,seq_group.group_id)
            loop
                ln_rule_cnt  :=    ln_rule_cnt + 1;

                l_operator_logic:= seq_line.operator_logic;
                l_parameter_details:=seq_line.parameter_details;
                l_operator_details:=seq_line.operator_details;
                l_value_from_details:=seq_line.value_from;
                l_value_to_details := seq_line.value_to;

                open c_get_operator_det(l_operator_details);
                fetch c_get_operator_det into l_operator_value;
                close c_get_operator_det;

                if trim(lower(l_operator_value)) = 'between' then
                    l_operator_details_query := l_operator_value||' '||''''||l_value_from_details||''''||'   and   '||''''||l_value_to_details||'''';
                end if;

                if trim(lower(l_operator_value)) = 'like' or trim(lower(l_operator_value)) = 'not like' then
                    l_operator_details_query := upper(l_operator_value) ||' '''||'%'||l_value_from_details||'%''';
                end if;

                if trim(lower(l_operator_value)) = 'is null' or trim(lower(l_operator_value)) = 'is not null' then
                    l_operator_details_query := upper(l_operator_value);
                end if;

                if trim(lower(l_operator_value)) = 'in' or trim(lower(l_operator_value)) = 'not in' then
                    select replace(l_value_from_details,',',''',''') into l_value from dual;
                    l_operator_details_query := upper(l_operator_value) ||' ('''||l_value||''')';
                end if;

                if l_operator_value in ('=','<>','<','>','>=','<=') then
                    l_operator_details_query := l_operator_value||' '||''''||l_value_from_details||'''';
                end if;

                open c_get_param_det(l_parameter_details);
                fetch c_get_param_det into l_param_column;
                close c_get_param_det;

                object_details_query:= l_param_column||' '||l_operator_details_query;


                -- added by lingaraj
                if ln_rule_cnt = 1 and l_cf_query is null then -- already added some group query
                       l_cf_query :=l_cf_query||' (  '|| object_details_query;

                elsif ln_rule_cnt = 1 and l_cf_query is not null then
                      l_cf_query :=l_cf_query||'   and   (  '|| object_details_query;

                else
                     l_cf_query :=l_cf_query||' '||nvl(l_operator_logic,'  and  ')||' '|| object_details_query;
                end if;



                l_operator_logic:= null;
                l_parameter_details:=null;
                l_operator_details:=null;
                l_value_from_details:=null;
                l_value_to_details := null;
                object_details_query := null;
                l_operator_details_query := null;
                l_param_column := null;
            end loop; --seq_line
                   if ln_rule_cnt > 0 then
                       l_cf_query := l_cf_query || ' )  ' ;
                   end if;
        end loop; -- seq_group
    end loop;


    pr_log_msg_auto (' query Formed - p_seq_no :' ||p_seq_no || '$' ||l_cf_query );

    If p_Calling_Unit is not Null And l_cf_query is not Null Then
           If p_Calling_Unit  = AUTO_BATCH  Then
                  l_cf_query := Replace(l_cf_query , 'SYSTEM_ID' , 'SYSTEMID');
                  l_cf_query := Replace(l_cf_query , 'PRODUCTION_METHOD' , 'PRODUCTIONMETHOD');
                  l_cf_query := Replace(l_cf_query , 'STOCK_TYPE' , 'STOCKTYPE');
                  l_cf_query := Replace(l_cf_query , 'INVENTORY_CODE' , 'INVENTORYCODE');
                  l_cf_query := Replace(l_cf_query , 'FORMAT_NAME' , 'FORMATNAME');
                  l_cf_query := Replace(l_cf_query , 'PLANNER_CODE' , 'PLANNERCODE');
           End If;

           pr_log_msg_auto('Replace Columns Respective to the Calling Program :'|| l_cf_query);
    End If;
    Return   l_cf_query;
Exception
    When Others Then
          pr_log_msg_auto(' Error in fn_get_autobatch_cf_query : (Custom Rule Number )'||  p_seq_no || ' #Error : '
                                                    ||SQLCODE ||'.'||sqlerrm ||'.'||dbms_utility.format_error_backtrace   );
         pr_log_msg_auto('error Formed Query :' || l_cf_query);

         Return 'ERROR';
End   fn_get_autobatch_cf_query;

FUNCTION fn_get_main_query(P_HEADER_ID number) return long
Is
 main_query long;
Begin
 -- Define Reusable Dynamic Query
 main_query :=
                       'SELECT customer_number,
                        customer_name,
                        order_no,
                        organization_id,
                        line_no,
                        internal_item,
                        inventory_item_id,
                        quantity,
                        uom,
                        jobno,
                        assembly,
                        job_type,
                        job_qty,
                        jobuom,
                        jobstatus,
                        te,
                        stocktype,
                        inventorycode,
                        systemid,
                        formatname,
                        requestdate,
                        promisedate,
                        scheduleshipdate,
                        plannercode,
                        inventoryorg,
                        productionmethod,
                        batch_status,
                        batch_number,
                        batchtype,
                        BATCH_CREATED_DATE,
                        CREATEDBY,
                        LAST_UPDATED_DATE,
                        LAST_UPDATED_BY,
                        RELEASED_DATE,
                        TYPESETTING_METHOD,
                        PRESSTYPE,
                        ORDER_HEADER_ID,
                        ORDER_LINE_ID,
                        batch_logic,
                        subbatch_logic,
                        bill_to,
                        ship_to,
                        cust_po,
                        WIP_ENTITY_ID,
                        OPERATING_UNIT,
                        ORDER_TYPE,
                        FSC_CONTENT,
						SHIPPING_METHOD	-- Added by Sarfaraz // NS-MOCK2-180 // 10-11-2022
                            FROM
                          (SELECT null customer_number,
                            null customer_name,
                            null ORDER_NO,
                            ood.organization_id ORGANIZATION_ID,
                            null LINE_NO,
                            msib.segment1 INTERNAL_ITEM,
                            MSIB.INVENTORY_ITEM_ID INVENTORY_ITEM_ID,
                            to_number('''') QUANTITY,
                            null UOM,
                            wdjv.wip_entity_name JOBNO,
                            msib.segment1 ASSEMBLY,
                            wdjv.job_type_meaning JOB_TYPE,
                            wdjv.start_quantity JOB_QTY,
                            msib.PRIMARY_UOM_CODE JOBUOM,
                            Decode ((SELECT PBD.BATCH_STATUS
                                FROM PX_BATCH_DETAILS_TAB PBD
                                WHERE 1=1
                                AND pbd.jobno     =wdjv.wip_entity_name and rownum=1) ,''Released'',''Released'',wdjv.status_type_disp) JOBSTATUS,
                            null TE,
                            null STOCKTYPE,
                            null INVENTORYCODE,
                            null SYSTEMID,
                            null FORMATNAME,
                            null REQUESTDATE,
                            null PROMISEDATE,
                            null SCHEDULESHIPDATE,
                            msib.planner_code PLANNERCODE,
                            ood.organization_code INVENTORYORG,
                            mic.category_concat_segs PRODUCTIONMETHOD,
                            (SELECT PBD.BATCH_STATUS
                            FROM PX_BATCH_DETAILS_TAB PBD
                            WHERE 1=1
                            AND pbd.jobno     =wdjv.wip_entity_name
                            and rownum=1
                            UNION
                            SELECT ''Open''
                            FROM DUAL
                            WHERE NOT EXISTS
                              (SELECT *
                              FROM PX_BATCH_DETAILS_TAB
                              WHERE 1=1
                              AND jobno     =wdjv.wip_entity_name
                              )
                            ) BATCH_STATUS,
                            (SELECT batch_number
                            FROM px_batch_details_tab
                            WHERE 1=1
                            AND jobno     =wdjv.wip_entity_name
                            and rownum=1
                            UNION
                            SELECT '' ''
                            FROM dual
                            WHERE NOT EXISTS
                              (SELECT *
                              FROM PX_BATCH_DETAILS_TAB
                              WHERE 1=1
                              AND jobno     =wdjv.wip_entity_name
                              )
                            ) BATCH_NUMBER,
                            (SELECT batchtype
                            FROM px_batch_details_tab
                            WHERE 1=1
                            AND jobno     =wdjv.wip_entity_name
                            and rownum=1
                            UNION
                            SELECT '' ''
                            FROM dual
                            WHERE NOT EXISTS
                              (SELECT *
                              FROM PX_BATCH_DETAILS_TAB
                              WHERE  1=1
                              AND JOBNO     =WDJV.WIP_ENTITY_NAME
                              )
                            ) BATCHTYPE,
                            (SELECT BATCH_CREATED_DATE
                            FROM px_batch_details_tab
                            WHERE  1=1
                            AND JOBNO     =WDJV.WIP_ENTITY_NAME
                            and rownum=1
                            UNION
                            SELECT NULL
                            FROM DUAL
                            WHERE NOT EXISTS
                              (SELECT *
                              FROM PX_BATCH_DETAILS_TAB
                              WHERE  1=1
                              AND JOBNO     =WDJV.WIP_ENTITY_NAME
                              )
                            ) BATCH_CREATED_DATE,
                            (SELECT CReated_By
                            FROM px_batch_details_tab
                            WHERE  1=1
                            AND JOBNO     =WDJV.WIP_ENTITY_NAME
                            and rownum=1
                            UNION
                            SELECT NULL
                            FROM DUAL
                            WHERE NOT EXISTS
                              (SELECT *
                              FROM PX_BATCH_DETAILS_TAB
                              WHERE  1=1
                              AND JOBNO     =WDJV.WIP_ENTITY_NAME
                              )
                            ) CREATEDBY,
                            (SELECT last_updated_date
                            FROM px_batch_details_tab
                            WHERE  1=1
                            AND JOBNO     =WDJV.WIP_ENTITY_NAME
                            and rownum=1
                            UNION
                            SELECT NULL
                            FROM DUAL
                            WHERE NOT EXISTS
                              (SELECT *
                              FROM PX_BATCH_DETAILS_TAB
                              WHERE  1=1
                              AND JOBNO     =WDJV.WIP_ENTITY_NAME
                              )
                            ) LAST_UPDATED_DATE ,
                            (SELECT last_updated_by
                            FROM px_batch_details_tab
                            WHERE  1=1
                            AND JOBNO     =WDJV.WIP_ENTITY_NAME
                            and rownum=1
                            UNION
                            SELECT NULL
                            FROM DUAL
                            WHERE NOT EXISTS
                              (SELECT *
                              FROM PX_BATCH_DETAILS_TAB
                              WHERE  1=1
                              AND JOBNO     =WDJV.WIP_ENTITY_NAME
                              )
                            ) LAST_UPDATED_BY ,
                            (SELECT released_date
                            FROM px_batch_details_tab
                            WHERE  1=1
                            AND JOBNO     =WDJV.WIP_ENTITY_NAME
                            and rownum=1
                            UNION
                            SELECT NULL
                            FROM DUAL
                            WHERE NOT EXISTS
                              (SELECT *
                              FROM PX_BATCH_DETAILS_TAB
                              WHERE  1=1
                              AND JOBNO     =WDJV.WIP_ENTITY_NAME
                              )
                            ) RELEASED_DATE ,
                            (SELECT distinct ELEMENT_VALUE
                            FROM px_descr_element_values
                            WHERE INVENTORY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
                            AND ORGANIZATION_ID    =msib.ORGANIZATION_ID
                            AND ELEMENT_NAME        =''Typesetting Method''
                            and rownum=1
                            ) TYPESETTING_METHOD,
                            (SELECT distinct ELEMENT_VALUE
                            FROM px_descr_element_values
                            WHERE INVENTORY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
                            AND ORGANIZATION_ID    =msib.ORGANIZATION_ID
                            AND ELEMENT_NAME        =''Factory Spec Press Type''
                            and rownum=1
                            ) PRESSTYPE,
                            null ORDER_HEADER_ID,
                            null ORDER_LINE_ID,
                            null batch_logic,
                            null subbatch_logic,
                            null bill_to,
                            null ship_to,
                            null cust_po,
                            Wdjv.WIP_ENTITY_ID WIP_ENTITY_ID,
                            null OPERATING_UNIT,
                            null ORDER_TYPE,
                            (select mcb.CONCATENATED_SEGMENTS from
                                MTL_ITEM_CATEGORIES mtc,
                                MTL_CATEGORIES_B_KFV mcb
                                where mcb.category_id=mtc.category_id
                                and mtc.category_set_id=''1100000261''
                                and mtc.INVENTORY_ITEM_ID=MSIB.inventory_item_id
                                and mtc.ORGANIZATION_ID=ood.organization_id) FSC_CONTENT,
							null SHIPPING_METHOD -- Added by Sarfaraz // NS-MOCK2-180 // 10-11-2022
                            FROM
                                WIP_DISCRETE_JOBS_V WDJV,MTL_SYSTEM_ITEMS_B MSIB,ORG_ORGANIZATION_DEFINITIONS OOD,MTL_ITEM_CATEGORIES_V MIC
                             WHERE ood.ORGANIZATION_ID IN (SELECT INVENTORY_ORG_ID FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||P_HEADER_ID||')
                            AND WDJV.STATUS_TYPE_DISP IN (''Released'',''Unreleased'')
                            AND WDJV.PRIMARY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
                            AND WDJV.ORGANIZATION_ID=MSIB.ORGANIZATION_ID
                            AND WDJV.ORGANIZATION_ID=OOD.ORGANIZATION_ID
                            AND MIC.INVENTORY_ITEM_ID     =MSIB.INVENTORY_ITEM_ID
                            AND MIC.CATEGORY_SET_NAME     =''Production Methods''
                            AND MIC.ORGANIZATION_ID=OOD.ORGANIZATION_ID
                            AND nvl(msib.replenish_to_order_flag,''N'') = ''N''
                              and wdjv.wip_entity_name not in (SELECT jobno from PAXAR.PX_BATCH_AUTO_TMP where jobno=wdjv.wip_entity_name and order_no is null)
                    union
                        SELECT (SELECT ar.account_number
                                    FROM hz_cust_accounts ar,
                                        hz_parties hp,
                                    oe_order_headers_all ooha
                                WHERE ar.cust_account_id      =ooha.sold_to_org_id
                                AND ar.party_id               =hp.party_id
                                AND OOHA.HEADER_ID=OOLA.HEADER_ID) customer_number,
                                (SELECT hp.party_name
                                    FROM hz_cust_accounts ar,
                                        hz_parties hp,
                                        oe_order_headers_all ooha
                                    WHERE ar.cust_account_id      =ooha.sold_to_org_id
                                        AND ar.party_id               =hp.party_id
                                        AND OOHA.HEADER_ID=OOLA.HEADER_ID) customer_name,
                                (select order_number from oe_order_headers_all where header_id=oola.header_id) ORDER_NO,
                                ood.organization_id ORGANIZATION_ID,
                                oola.line_number LINE_NO,
                                msib.segment1 INTERNAL_ITEM,
                                oola.inventory_item_id INVENTORY_ITEM_ID,
                                oola.ordered_quantity QUANTITY,
                                oola.order_quantity_uom UOM,
                                wdjv.wip_entity_name JOBNO,
                                msib.segment1 ASSEMBLY,
                                wdjv.job_type_meaning JOB_TYPE,
                                wdjv.start_quantity JOB_QTY,
                                oola.order_quantity_uom JOBUOM,
                                wdjv.status_type_disp JOBSTATUS,
                                oola.attribute16 TE,
                                oola.attribute2 STOCKTYPE,
                                oola.attribute3 INVENTORYCODE,
                                oola.attribute4 SYSTEMID,
                                oola.attribute5 FORMATNAME,
                                oola.request_date REQUESTDATE,
                                oola.promise_date PROMISEDATE,
                                oola.schedule_ship_date SCHEDULESHIPDATE,
                                msib.planner_code PLANNERCODE,
                                ood.organization_code INVENTORYORG,
                                mic.category_concat_segs PRODUCTIONMETHOD,
                                (SELECT PBD.BATCH_STATUS
                                FROM PX_BATCH_DETAILS_TAB PBD
                                WHERE PBD.ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
                                AND PBD.LINE_NO   =OOLA.LINE_NUMBER
                                AND pbd.jobno     =wdjv.wip_entity_name
                                and rownum=1
                                UNION
                                SELECT ''Open''
                                FROM DUAL
                                WHERE NOT EXISTS
                                  (SELECT *
                                  FROM PX_BATCH_DETAILS_TAB
                                  WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
                                  AND line_no   =oola.line_number
                                  AND jobno     =wdjv.wip_entity_name
                                  )
                                ) BATCH_STATUS,
                                (SELECT batch_number
                                FROM px_batch_details_tab
                                WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
                                AND line_no   =oola.line_number
                                AND jobno     =wdjv.wip_entity_name
                                and rownum=1
                                UNION
                                SELECT NULL
                                FROM dual
                                WHERE NOT EXISTS
                                  (SELECT *
                                  FROM PX_BATCH_DETAILS_TAB
                                  WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
                                  AND line_no   =oola.line_number
                                  AND jobno     =wdjv.wip_entity_name
                                  )
                                ) BATCH_NUMBER,
                                (SELECT batchtype
                                FROM px_batch_details_tab
                                WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
                                AND line_no   =oola.line_number
                                AND jobno     =wdjv.wip_entity_name
                                and rownum=1
                                UNION
                                SELECT NULL
                                FROM dual
                                WHERE NOT EXISTS
                                  (SELECT *
                                  FROM PX_BATCH_DETAILS_TAB
                                  WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
                                  AND LINE_NO   =OOLA.LINE_NUMBER
                                  AND JOBNO     =WDJV.WIP_ENTITY_NAME
                                  )
                                ) BATCHTYPE,
                                (SELECT BATCH_CREATED_DATE
                                FROM px_batch_details_tab
                                WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
                                AND LINE_NO   =OOLA.LINE_NUMBER
                                AND JOBNO     =WDJV.WIP_ENTITY_NAME
                                and rownum=1
                                UNION
                                SELECT NULL
                                FROM DUAL
                                WHERE NOT EXISTS
                                  (SELECT *
                                  FROM PX_BATCH_DETAILS_TAB
                                  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
                                  AND LINE_NO   =OOLA.LINE_NUMBER
                                  AND JOBNO     =WDJV.WIP_ENTITY_NAME
                                  )
                                ) BATCH_CREATED_DATE,
                                (SELECT CReated_By
                                FROM px_batch_details_tab
                                WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
                                AND LINE_NO   =OOLA.LINE_NUMBER
                                AND JOBNO     =WDJV.WIP_ENTITY_NAME
                                and rownum=1
                                UNION
                                SELECT NULL
                                FROM DUAL
                                WHERE NOT EXISTS
                                  (SELECT *
                                  FROM PX_BATCH_DETAILS_TAB
                                  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
                                  AND LINE_NO   =OOLA.LINE_NUMBER
                                  AND JOBNO     =WDJV.WIP_ENTITY_NAME
                                  )
                                ) CREATEDBY,
                                (SELECT last_updated_date
                                FROM px_batch_details_tab
                                WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
                                AND LINE_NO   =OOLA.LINE_NUMBER
                                AND JOBNO     =WDJV.WIP_ENTITY_NAME
                                and rownum=1
                                UNION
                                SELECT NULL
                                FROM DUAL
                                WHERE NOT EXISTS
                                  (SELECT *
                                  FROM PX_BATCH_DETAILS_TAB
                                  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
                                  AND LINE_NO   =OOLA.LINE_NUMBER
                                  AND JOBNO     =WDJV.WIP_ENTITY_NAME
                                  )
                                ) LAST_UPDATED_DATE ,
                                (SELECT last_updated_by
                                FROM px_batch_details_tab
                                WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
                                AND LINE_NO   =OOLA.LINE_NUMBER
                                AND JOBNO     =WDJV.WIP_ENTITY_NAME
                                and rownum=1
                                UNION
                                SELECT NULL
                                FROM DUAL
                                WHERE NOT EXISTS
                                  (SELECT *
                                  FROM PX_BATCH_DETAILS_TAB
                                  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
                                  AND LINE_NO   =OOLA.LINE_NUMBER
                                  AND JOBNO     =WDJV.WIP_ENTITY_NAME
                                  )
                                ) LAST_UPDATED_BY ,
                                (SELECT released_date
                                FROM px_batch_details_tab
                                WHERE order_no=(select order_number from oe_order_headers_all where header_id=oola.header_id)
                                AND LINE_NO   =OOLA.LINE_NUMBER
                                AND JOBNO     =WDJV.WIP_ENTITY_NAME
                                and rownum=1
                                UNION
                                SELECT NULL
                                FROM DUAL
                                WHERE NOT EXISTS
                                  (SELECT *
                                  FROM PX_BATCH_DETAILS_TAB
                                  WHERE ORDER_NO=(select order_number from oe_order_headers_all where header_id=oola.header_id)
                                  AND LINE_NO   =OOLA.LINE_NUMBER
                                  AND JOBNO     =WDJV.WIP_ENTITY_NAME
                                  )
                                ) RELEASED_DATE ,
                                (SELECT ELEMENT_VALUE
                                FROM px_descr_element_values
                                WHERE INVENTORY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
                                AND ORGANIZATION_ID    =msib.ORGANIZATION_ID
                                AND ELEMENT_NAME        =''Typesetting Method''
                            	and rownum=1
								) TYPESETTING_METHOD,
								(SELECT ELEMENT_VALUE
								FROM px_descr_element_values
								WHERE INVENTORY_ITEM_ID=MSIB.INVENTORY_ITEM_ID
								AND ORGANIZATION_ID    =msib.ORGANIZATION_ID
								AND ELEMENT_NAME        =''Factory Spec Press Type''
								and rownum=1
								) PRESSTYPE,
								oola.header_id ORDER_HEADER_ID,
								oola.line_id ORDER_LINE_ID,
								null batch_logic,
								null subbatch_logic,
								OOLA.INVOICE_TO_ORG_ID bill_to,
								OOLA.SHIP_TO_ORG_ID ship_to,
								OOLA.cust_po_number cust_po,
								Wdjv.WIP_ENTITY_ID WIP_ENTITY_ID,
								(select name from hr_operating_units where organization_id=oola.org_id) OPERATING_UNIT,
								(select otl.NAME from oe_transaction_types_tl otl,oe_order_headers_all ooha
								where otl.TRANSACTION_TYPE_ID=ooha.ORDER_TYPE_ID
								and otl.language= userenv(''LANG'')
								and ooha.header_id=oola.header_id) ORDER_TYPE,
								(select mcb.CONCATENATED_SEGMENTS from
								MTL_ITEM_CATEGORIES mtc,
								MTL_CATEGORIES_B_KFV mcb
								where mcb.category_id=mtc.category_id
								and mtc.category_set_id=''1100000261''
								and mtc.INVENTORY_ITEM_ID=oola.inventory_item_id
								and mtc.ORGANIZATION_ID=ood.organization_id) FSC_CONTENT,
								(SELECT meaning
								FROM FND_LOOKUP_VALUES
								WHERE lookup_type=''SHIP_METHOD''
								AND language     =''US''
								and ENABLED_FLAG=''Y''
								and (END_DATE_ACTIVE is null or TRUNC(END_DATE_ACTIVE)>TRUNC(sysdate) )
								AND LOOKUP_CODE= oola.SHIPPING_METHOD_CODE
								) SHIPPING_METHOD  -- Added by Sarfaraz // NS-MOCK2-180 // 10-11-2022
						  FROM oe_order_lines_all oola,
							mtl_system_items_b msib,
							org_organization_definitions ood,
							WIP_DISCRETE_JOBS_V wdjv,
							mtl_item_categories_v mic,
							MTL_RESERVATIONS MR
					WHERE oola.inventory_item_id    =msib.inventory_item_id
						and msib.organization_id      =ood.organization_id
						AND oola.FLOW_STATUS_CODE    IN (''PRODUCTION_OPEN'', ''PRODUCTION_PARTIAL'',''SUPPLY_ELIGIBLE'')
						AND OOLA.SHIP_FROM_ORG_ID     =ood.organization_id
						and ood.ORGANIZATION_ID IN (SELECT INVENTORY_ORG_ID FROM PAXAR.PAXAR_OE_AUTO_BATCH_SETUP_T where header_id='||P_HEADER_ID||')
						and mic.organization_id       =ood.organization_id
						AND MIC.INVENTORY_ITEM_ID     =MSIB.INVENTORY_ITEM_ID
						AND mic.category_set_name     =''Production Methods''
						AND OOLA.LINE_ID              =MR.DEMAND_SOURCE_LINE_ID
						AND MR.SUPPLY_SOURCE_TYPE_ID  =5
						AND MR.ORGANIZATION_ID=OOD.ORGANIZATION_ID
						AND MR.SUPPLY_SOURCE_HEADER_ID=Wdjv.WIP_ENTITY_ID
						and OOD.ORGANIZATION_ID=WDJV.ORGANIZATION_ID
						AND wdjv.status_type_disp    IN (''Released'',''Unreleased'')
						  AND (SELECT count(*)
                FROM oe_hold_sources_all hs,
                     oe_hold_definitions hd,
                     oe_order_holds_all oh,
                     oe_order_headers_all oha,
                     oe_order_lines_all ola
               WHERE 1 = 1
                 AND hs.hold_id = hd.hold_id
                 AND oh.hold_source_id = hs.hold_source_id
                 AND oh.header_id = oha.header_id
                 AND oha.header_id = ola.header_id
                 AND OH.LINE_ID = OLA.LINE_ID
                 AND OH.ORG_ID = OHA.ORG_ID
				 AND OH.RELEASED_FLAG = ''N''
                 AND HD.TYPE_CODE IN (SELECT meaning
  FROM FND_LOOKUP_VALUES
  WHERE lookup_type=''PX_ONT_AUTO_HOLD_EXCEPTION''
  AND language     =''US''
  AND ENABLED_FLAG=''Y''
  AND (END_DATE_ACTIVE IS NULL OR TRUNC(END_DATE_ACTIVE)>TRUNC(SYSDATE) ))
                 AND OLA.HEADER_ID = OOLA.HEADER_ID
                 AND ola.line_id = OOLA.LINE_ID) = 0
				AND OOLA.HEADER_ID NOT IN (select ORDER_HEADER_ID from PAXAR.PX_BATCH_AUTO_TMP where order_header_id=OOLA.HEADER_ID and order_line_id=OOLA.LINE_ID)';


      return main_query;
End fn_get_main_query;

procedure pr_insert_Batch_error_record
(
  p_order_number      Number,
  p_line_no                  Number,
  p_error_msg             Varchar2,
  p_batch_program     Varchar2,
  p_customer_name     Varchar2,
  p_assembly                 Varchar2,
  p_quantity                    Number,
  p_productionmethod   Varchar2,
  p_presstype                   Varchar2,
  p_jobno                          Varchar2,
  p_organization_code     Varchar2
)
 is

ln_error_count NUMBER;

Begin
	-- Added by Sarfaraz // INC0982310 // 13-04-2023
	BEGIN
		select count(*)
		into ln_error_count
		from PAXAR.PX_BATCH_AUTO_ERR
		where REQUEST_ID = g_conc_request_id
			and ORDER_NO = p_order_number
			and LINE_NO = p_line_no
			and JOBNO = p_jobno;
	END;

	IF ln_error_count = 0 THEN
	-- Added by Sarfaraz // INC0982310 // 13-04-2023

      INSERT INTO PAXAR.PX_BATCH_AUTO_ERR(
								REQUEST_ID,
								ORDER_NO,
								LINE_NO,
								INTERNAL_ITEM,
								ERROR_MSG,
								BATCH_PROGRAM,
								CUSTOMER_NAME,
								ASSEMBLY,
								QUANTITY,
								PRODUCTIONMETHOD,
								PRESSTYPE,
                                JOBNO,
                                organization_code)
							VALUES
							(
								g_conc_request_id,
								p_order_number,
								p_line_no,
								p_assembly,
								p_error_msg,
								p_batch_program,
								p_customer_name,
							    p_assembly,
								p_quantity,
								p_productionmethod,
								p_presstype,
                                p_jobno,
                                p_organization_code
							);
							-- commit;
	END IF; -- IF ln_error_count = 0   -- Added by Sarfaraz // INC0982310 // 13-04-2023

Exception
When Others Then
 Null;
End  pr_insert_Batch_error_record;


end PX_AUTO_BATCHING_PKG; -- PACKAGE END